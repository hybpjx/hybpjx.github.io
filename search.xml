<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo主题高亮不生效问题解决</title>
      <link href="/2025/10/16/hexo%E4%B8%BB%E9%A2%98%E9%AB%98%E4%BA%AE%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2025/10/16/hexo%E4%B8%BB%E9%A2%98%E9%AB%98%E4%BA%AE%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="查看是否安装了highlight-js"><a href="#查看是否安装了highlight-js" class="headerlink" title="查看是否安装了highlight.js"></a>查看是否安装了highlight.js</h1><p>查看 _config.yml（是根目录那个，不是主题的）</p><p>正确为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如果依然不生效<br>themes&#x2F;cactus&#x2F;layout&#x2F;_partials&#x2F;head.ejs 或对应模板里，确保引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/highlight.js/styles/github.min.css&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/highlight.js/lib/highlight.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>hljs.highlightAll();<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="使用PrismJS"><a href="#使用PrismJS" class="headerlink" title="使用PrismJS"></a>使用PrismJS</h1><p>修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">syntax_highlighter:</span> <span class="hljs-string">prismjs</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>themes&#x2F;cactus&#x2F;layout&#x2F;_partial&#x2F;head.ejs</p><p>（有的版本是 themes&#x2F;cactus&#x2F;layout&#x2F;_partials&#x2F;head.ejs）</p><p>在 </head> 之前添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- PrismJS Syntax Highlighting --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后执行</p><blockquote><p>hexo clean &amp;&amp; hexo g</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS反调试绕过</title>
      <link href="/2025/10/13/JS%E5%8F%8D%E8%B0%83%E8%AF%95%E7%BB%95%E8%BF%87/"/>
      <url>/2025/10/13/JS%E5%8F%8D%E8%B0%83%E8%AF%95%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="无限Debugger绕过"><a href="#无限Debugger绕过" class="headerlink" title="无限Debugger绕过"></a>无限Debugger绕过</h1><p>代表网站：马蜂窝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">temp_constructor</span>= <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>;<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]===<span class="hljs-string">&quot;string&quot;</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]===<span class="hljs-string">&quot;debugger&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">temp_constructor</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="某大佬写的终极绕过"><a href="#某大佬写的终极绕过" class="headerlink" title="某大佬写的终极绕过"></a>某大佬写的终极绕过</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 立即执行函数，创建独立作用域</span><br> <span class="hljs-string">&#x27;use strict&#x27;</span>; <span class="hljs-comment">// 启用严格模式，防止一些不规范的代码写法</span><br> <span class="hljs-comment">// 调试配置对象</span><br> <span class="hljs-comment">//按0开启日志，默认关闭</span><br> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEBUG</span> = &#123;<br>  <span class="hljs-attr">enable</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">// 控制是否输出日志信息的开关</span><br>  <span class="hljs-attr">deb</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 控制是否在关键位置设置断点的开关</span><br> &#125;;<br><br> <span class="hljs-comment">//作者：Dexter</span><br> <span class="hljs-comment">//公众号：我不是蜘蛛</span><br> <span class="hljs-comment">// 定义日志输出函数，根据 DEBUG.enable 决定是否输出日志</span><br> <span class="hljs-keyword">const</span> log = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">DEBUG</span>.<span class="hljs-property">enable</span> == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...args);<br>  &#125;<br> &#125;;<br><br> <span class="hljs-comment">// 保存原始的 setInterval 函数</span><br> <span class="hljs-keyword">var</span> originalSetInterval = <span class="hljs-variable language_">window</span>.<span class="hljs-property">setInterval</span>;<br><br> <span class="hljs-comment">// 用新的函数替换原始的 setInterval</span><br> <span class="hljs-variable language_">window</span>.<span class="hljs-property">setInterval</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">callback, delay</span>) &#123;<br>  <span class="hljs-comment">// 获取除了 callback 和 delay 的其他额外参数</span><br>  <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">// 如果 callback 是字符串，则删除其中的 debugger 语句</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>   callback = callback.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/debugger;/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>   <span class="hljs-comment">// 如果 callback 是函数，替换包含 debugger 的回调</span><br>   <span class="hljs-keyword">var</span> originalCallback = callback;<br>   callback = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 获取原始回调函数的源码</span><br>    <span class="hljs-keyword">var</span> callbackSource = originalCallback.<span class="hljs-title function_">toString</span>();<br><br>    <span class="hljs-comment">// 如果源码包含 debugger，将其删除并创建新的函数</span><br>    <span class="hljs-keyword">if</span> (callbackSource.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;debugger&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>     callbackSource = callbackSource.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/debugger;/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>     originalCallback = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;return &#x27;</span> + callbackSource)();<br>    &#125;<br><br>    <span class="hljs-comment">// 调用修改后的回调函数，并传入参数</span><br>    originalCallback.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>   &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 调用原始的 setInterval 函数，并传入修改后的 callback、delay 和其他参数</span><br>  <span class="hljs-keyword">return</span> originalSetInterval.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">window</span>, [callback, delay].<span class="hljs-title function_">concat</span>(args));<br> &#125;<br> <span class="hljs-comment">//============ toString 相关防护 ============</span><br> <span class="hljs-keyword">var</span> temp_eval = <span class="hljs-built_in">eval</span>; <span class="hljs-comment">// 保存原始的 eval 函数</span><br> <span class="hljs-keyword">var</span> temp_toString = <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>; <span class="hljs-comment">// 保存原始的 toString 方法</span><br> <span class="hljs-comment">// 改进toString方法的处理</span><br> <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> === <span class="hljs-built_in">eval</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;function eval() &#123; [native code] &#125;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> === <span class="hljs-title class_">Function</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;function Function() &#123; [native code] &#125;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;function toString() &#123; [native code] &#125;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>.<span class="hljs-property">setInterval</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;function setInterval() &#123; [native code] &#125;&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> temp_toString.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br> &#125;<br><br> <span class="hljs-comment">//============ eval 相关hook ============</span><br> <span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 重写全局 eval 函数</span><br>  <span class="hljs-keyword">const</span> stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>; <span class="hljs-comment">// 获取调用栈</span><br>  <span class="hljs-keyword">const</span> callLocation = stackTrace; <span class="hljs-comment">// 保存调用位置</span><br>  <span class="hljs-title function_">log</span>(callLocation); <span class="hljs-comment">// 输出调用信息</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">DEBUG</span>.<span class="hljs-property">deb</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 根据配置决定是否断点</span><br>   <span class="hljs-keyword">debugger</span>;<br>  &#125;<br>  <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;=============== eval end ===============&quot;</span>);<br><br>  <span class="hljs-comment">// 处理传入的字符串参数，移除 debugger 语句</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>   <span class="hljs-keyword">var</span> temp_length = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/debugger/g</span>);<br>   <span class="hljs-keyword">if</span> (temp_length != <span class="hljs-literal">null</span>) &#123;<br>    temp_length = temp_length.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/debugger/</span>;<br>    <span class="hljs-keyword">while</span> (temp_length) &#123;<br>     <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>] = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(reg, <span class="hljs-string">&quot;&quot;</span>);<br>     temp_length--;<br>    &#125;<br>   &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">temp_eval</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 使用原始 eval 执行处理后的代码</span><br> &#125;<br><br> <span class="hljs-comment">//============ Function 相关hook ============</span><br> <span class="hljs-keyword">var</span> _debugger = <span class="hljs-title class_">Function</span>; <span class="hljs-comment">// 保存原始 Function 构造函数</span><br> <span class="hljs-title class_">Function</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 重写 Function 构造函数</span><br>  <span class="hljs-keyword">const</span> stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>; <span class="hljs-comment">// 获取调用栈</span><br>  <span class="hljs-keyword">const</span> callLocation = stackTrace; <span class="hljs-comment">// 保存调用位置</span><br>  <span class="hljs-title function_">log</span>(callLocation); <span class="hljs-comment">// 输出调用信息</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">DEBUG</span>.<span class="hljs-property">deb</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 根据配置决定是否断点</span><br>   <span class="hljs-keyword">debugger</span>;<br>  &#125;<br>  <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;=============== Function end ===============&quot;</span>);<br><br>  <span class="hljs-comment">// 处理所有参数中的 debugger 语句</span><br>  <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/debugger/</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">arguments</span>[i] == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">var</span> temp_length = <span class="hljs-variable language_">arguments</span>[i].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/debugger/g</span>);<br>    <span class="hljs-keyword">if</span> (temp_length != <span class="hljs-literal">null</span>) &#123;<br>     temp_length = temp_length.<span class="hljs-property">length</span>;<br>     <span class="hljs-keyword">while</span> (temp_length) &#123;<br>      <span class="hljs-variable language_">arguments</span>[i] = <span class="hljs-variable language_">arguments</span>[i].<span class="hljs-title function_">replace</span>(reg, <span class="hljs-string">&quot;&quot;</span>);<br>      temp_length--;<br>     &#125;<br>    &#125;<br>   &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">_debugger</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 使用原始 Function 构造函数创建函数</span><br> &#125;<br><br> <span class="hljs-comment">// 保持原型链的完整性</span><br> <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = _debugger.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br> <span class="hljs-comment">// 重写 Function 构造函数的 constructor</span><br> <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>; <span class="hljs-comment">// 获取调用栈</span><br>  <span class="hljs-keyword">const</span> callLocation = stackTrace; <span class="hljs-comment">// 保存调用位置</span><br>  <span class="hljs-title function_">log</span>(callLocation); <span class="hljs-comment">// 输出调用信息</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">DEBUG</span>.<span class="hljs-property">deb</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 根据配置决定是否断点</span><br>   <span class="hljs-keyword">debugger</span>;<br>  &#125;<br>  <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;=============== Function constructor end ===============&quot;</span>);<br><br>  <span class="hljs-comment">// 处理所有参数中的 debugger 语句</span><br>  <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/debugger/</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">arguments</span>[i] == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">var</span> temp_length = <span class="hljs-variable language_">arguments</span>[i].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/debugger/g</span>);<br>    <span class="hljs-keyword">if</span> (temp_length != <span class="hljs-literal">null</span>) &#123;<br>     temp_length = temp_length.<span class="hljs-property">length</span>;<br>     <span class="hljs-keyword">while</span> (temp_length) &#123;<br>      <span class="hljs-variable language_">arguments</span>[i] = <span class="hljs-variable language_">arguments</span>[i].<span class="hljs-title function_">replace</span>(reg, <span class="hljs-string">&quot;&quot;</span>);<br>      temp_length--;<br>     &#125;<br>    &#125;<br>   &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">_debugger</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 使用原始 Function 构造函数</span><br> &#125;<br><br> <span class="hljs-comment">// 确保构造函数的原型链正确</span><br> <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="格式化正则检测绕过"><a href="#格式化正则检测绕过" class="headerlink" title="格式化正则检测绕过"></a>格式化正则检测绕过</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">RegExp</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">my_test</span> = <span class="hljs-title class_">RegExp</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">test</span><br><br><span class="hljs-keyword">let</span> my_regex = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">arguments</span></span>) &#123;<br>    <span class="hljs-keyword">debugger</span> ;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">source</span> == <span class="hljs-string">`test`</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">my_test</span>(<span class="hljs-variable language_">arguments</span>)<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;test&#x27;</span>, &#123;<br>    <span class="hljs-attr">value</span>: my_regex<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="格式化检测String-search绕过"><a href="#格式化检测String-search绕过" class="headerlink" title="格式化检测String.search绕过"></a>格式化检测String.search绕过</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> my_search = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">arguments</span></span>) &#123;<br>    <span class="hljs-keyword">debugger</span> ;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span> == <span class="hljs-string">&#x27;(((.+)+)+)+$&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">my_search</span>(<span class="hljs-variable language_">arguments</span>)<br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;search&#x27;</span>, &#123;<br>    <span class="hljs-attr">value</span>: my_search<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unidbg打DirectoryFileIO补丁</title>
      <link href="/2025/10/10/Unidbg%E6%89%93DirectoryFileIO%E8%A1%A5%E4%B8%81/"/>
      <url>/2025/10/10/Unidbg%E6%89%93DirectoryFileIO%E8%A1%A5%E4%B8%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哦~这个密码无效。请检查后再试一次。" data-whm="哎呀，这些解密的内容可能已被更改，但你仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="3e6afd1fc2ff0770dffd5d179130404c0e41531a61c2586a6206da8cb6bdfaa9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章已被作者加密，请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Unidbg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-UV包管理工具安装</title>
      <link href="/2025/10/09/python-UV%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
      <url>/2025/10/09/python-UV%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安裝-uv"><a href="#安裝-uv" class="headerlink" title="安裝 uv"></a>安裝 uv</h1><p>uv 本身並不需要 Python，所以不建議用 pip 或是 pipx 安裝，這樣都會跟特定的 Python 環境綁在一起，Windows 上就直接透過 PowerSehll 安裝即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">powershell -ExecutionPolicy ByPass -c <span class="hljs-string">&quot;irm https://astral.sh/uv/install.ps1 | </span><br></code></pre></td></tr></table></figure><h1 id="scoop-安裝："><a href="#scoop-安裝：" class="headerlink" title="scoop 安裝："></a>scoop 安裝：</h1><blockquote><p>scoop install uv<br>本文都以 Windows 平台在 PowerShell 下操作示範</p></blockquote><h1 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">set</span> Path=D:\MyConfiguration\zichen2.liang\.local\<span class="hljs-built_in">bin</span>;%Path%   (cmd)<br>$env:Path = <span class="hljs-string">&quot;D:\MyConfiguration\zichen2.liang\.local\bin;$env:Path&quot;</span>   (powershell)<br></code></pre></td></tr></table></figure><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有安装及可安装的版本</span><br>uv python list <br><br><span class="hljs-comment"># 最新版安装</span><br>uv python install<br><br><span class="hljs-comment"># 指定版本安装</span><br>uv python install 3.10<br><br><span class="hljs-comment"># 安装多个版本</span><br>uv python install 3.10 3.11<br><br><span class="hljs-comment"># 显示安装的路径</span><br>uv python <span class="hljs-built_in">dir</span><br><br><span class="hljs-comment"># 卸载安装</span><br>uv python uninstall 3.10<br><br><span class="hljs-comment"># 卸载多个版本</span><br>uv python uninstall 3.10 3.11<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSVMP插桩快捷指令</title>
      <link href="/2025/09/30/JSVMP%E6%8F%92%E6%A1%A9%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"/>
      <url>/2025/09/30/JSVMP%E6%8F%92%E6%A1%A9%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>要对JSVMP进行插桩。<br>以下是总结的一些快速复制</p><h1 id="对象序列化（判断window）"><a href="#对象序列化（判断window）" class="headerlink" title="对象序列化（判断window）"></a>对象序列化（判断window）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">jj,<br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(jc,<br><span class="hljs-keyword">function</span>(<span class="hljs-params">k, v</span>) &#123;<br>    <span class="hljs-keyword">if</span> (v === <span class="hljs-variable language_">window</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;window&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> v<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="对象序列化（判断长度以及window）"><a href="#对象序列化（判断长度以及window）" class="headerlink" title="对象序列化（判断长度以及window）"></a>对象序列化（判断长度以及window）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(jc, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> value === <span class="hljs-variable language_">window</span> ? <span class="hljs-string">&#x27;window&#x27;</span>: (value &amp;&amp; <span class="hljs-keyword">typeof</span> value.<span class="hljs-property">length</span> === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">100</span> ? <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>.value &gt; 1000`</span>: value))<br></code></pre></td></tr></table></figure><h1 id="hook-时间保持一致"><a href="#hook-时间保持一致" class="headerlink" title="hook 时间保持一致"></a>hook 时间保持一致</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getTime</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1759243630429</span><br>&#125;;<br><span class="hljs-title class_">Math</span>.<span class="hljs-property">random</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0.466434605063042</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida常用大全</title>
      <link href="/2025/09/28/frida%E5%B8%B8%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
      <url>/2025/09/28/frida%E5%B8%B8%E7%94%A8%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="hook-检测函数"><a href="#hook-检测函数" class="headerlink" title="hook 检测函数"></a>hook 检测函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlopen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>),<br>        &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                <span class="hljs-keyword">var</span> pathptr = args[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">if</span> (pathptr !== <span class="hljs-literal">undefined</span> &amp;&amp; pathptr != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">var</span> path = <span class="hljs-title function_">ptr</span>(pathptr).<span class="hljs-title function_">readCString</span>();<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;load &quot;</span> + path);<br>                &#125;<br>            &#125;<br>        &#125;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>查看所有android_dlopen_ext打开的动态库</p></blockquote><h1 id="修改寄存器"><a href="#修改寄存器" class="headerlink" title="修改寄存器"></a>修改寄存器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib.so&quot;</span>);<br><span class="hljs-keyword">var</span> funcAddr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x121974</span>) <br><br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(funcAddr,&#123;<br>    <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onEnter arg[]: &#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x0</span>)  <span class="hljs-comment">// 32位是r寄存器 this.context.r0</span><br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onEnter arg[]: &#x27;</span>,<span class="hljs-title function_">hexdump</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x0</span>)) <span class="hljs-comment">// 内存才可以 hexdump</span><br><br>        <span class="hljs-comment">// console.log(&#x27;onEnter arg[]: &#x27;,args[0])</span><br>        <span class="hljs-comment">// this.arg0 = args[0]</span><br>    &#125;,<br>    <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onLeave arg[]: &#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onLeave result: &#x27;</span>,retval)<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Hook-webview-页面"><a href="#Hook-webview-页面" class="headerlink" title="Hook webview 页面"></a>Hook webview 页面</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//frida -U &quot;&lt;ProcessName&gt;&quot; -l Android_WebView_inspector.js</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Android_WebView_inspector</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-comment">//实例化一个对象</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>);<br>    <span class="hljs-comment">//重写WebView类的重载方法，因为setWebContentsDebuggingEnabled不是静态方法，所以需要一个对象来调用这个方法</span><br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView.$init is called!1&quot;</span>);<br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.$init(a);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView.$init is called!2&quot;</span>);<br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.$init(a, b);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView.$init is called!3&quot;</span>);<br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.$init(a, b, c);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>    <span class="hljs-comment">//始终设置为true,打开调试</span><br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">setWebContentsDebuggingEnabled</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setWebContentsDebuggingEnabled is called!&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// replace_str_maps();</span><br><br><br><span class="hljs-comment">// setTimeout(Android_WebView_inspector, 3000);</span><br><br><span class="hljs-comment">// console.log(&quot;脚本加载成功&quot;);</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;脚本加载成功&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>);<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;java.util.Map&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d, e);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;java.util.Map&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d, e, f);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br><br><br><span class="hljs-comment">// setTimeout(main, 2000);</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-comment">// Hook WebView 的 loadUrl 方法 (经测试全部用的是这个)</span><br>        <span class="hljs-comment">// var WebView = Java.use(&#x27;android.webkit.WebView&#x27;);</span><br>        <span class="hljs-comment">// WebView.loadUrl.overload(&#x27;java.lang.String&#x27;).implementation = function(url) &#123;</span><br>        <span class="hljs-comment">//     console.log(&quot;WebView loading URL: &quot; + url);</span><br>        <span class="hljs-comment">//     // 打印栈追踪 (调用链)</span><br>        <span class="hljs-comment">//     var stackTrace = Java.use(&#x27;android.util.Log&#x27;).getStackTraceString(Java.use(&#x27;java.lang.Exception&#x27;).$new());</span><br>        <span class="hljs-comment">//     console.log(&quot;调用链: &quot; + stackTrace);</span><br>        <span class="hljs-comment">//     // 继续执行原来的 loadUrl 方法</span><br>        <span class="hljs-comment">//     return this.loadUrl(url);</span><br>        <span class="hljs-comment">// &#125;;</span><br><br>        <span class="hljs-comment">// Hook WebView 的 loadUrl 方法 (经测试全部用的是这个)</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>);<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">setWebContentsDebuggingEnabled</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;boolean&quot;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;强制开启webview调试&quot;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>)<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">loadUrl</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView loading URL: &quot;</span> + url);<br>            <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;javascript:&quot;</span>) &amp;&amp; url.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;window.requestConfig&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 提取Base64字符串</span><br>                <span class="hljs-keyword">var</span> base64EncodedString = url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/&quot;([^&quot;]+)&quot;/</span>)[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 匹配出Base64字符串</span><br>                <span class="hljs-comment">// 解码Base64</span><br>                <span class="hljs-keyword">var</span> decodedBase64 = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.util.Base64&#x27;</span>).<span class="hljs-title function_">decode</span>(base64EncodedString, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">var</span> decodedString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(decodedBase64, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-comment">// 使用Java的replace方法进行转义字符替换</span><br>                decodedString = decodedString.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;\\u0026&quot;</span>), <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;&amp;&quot;</span>));<br>                decodedString = decodedString.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;\\u003d&quot;</span>), <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;=&quot;</span>));<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解码 Base64: &quot;</span> + decodedString)<br>            &#125;<br>            <span class="hljs-comment">// 打印栈追踪 (调用链)</span><br>            <span class="hljs-keyword">var</span> stackTrace = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.util.Log&#x27;</span>).<span class="hljs-title function_">getStackTraceString</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.Exception&#x27;</span>).$new());<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用链: &quot;</span> + stackTrace);<br>            <span class="hljs-comment">// 继续执行原来的 loadUrl 方法</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadUrl</span>(url);<br>        &#125;;<br><br>        <span class="hljs-comment">// 解码Unicode字符串的函数</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">decodeUnicode</span>(<span class="hljs-params">str</span>) &#123;<br>            <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\u[\dA-Fa-f]&#123;4&#125;/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">match</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-built_in">parseInt</span>(match.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\\u&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-number">16</span>));<br>            &#125;);<br>        &#125;<br><br><br>        <span class="hljs-comment">// Hook WebViewClient 的 onPageFinished 方法</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebViewClient</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebViewClient&#x27;</span>);<br>        <span class="hljs-title class_">WebViewClient</span>.<span class="hljs-property">onPageFinished</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">view, url</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView finished loading URL: &quot;</span> + url);<br>            <span class="hljs-comment">// 可以在这里处理更多逻辑，如获取网页内容</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onPageFinished</span>(view, url);<br>        &#125;;<br><br>        <span class="hljs-comment">// Hook WebView 的 WebResourceRequest</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebResourceRequest</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebResourceRequest&#x27;</span>);<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebViewClient2</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebViewClient&#x27;</span>);<br><br>        <span class="hljs-title class_">WebViewClient2</span>.<span class="hljs-property">shouldInterceptRequest</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>, <span class="hljs-string">&#x27;android.webkit.WebResourceRequest&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">view, request</span>) &#123;<br>            <span class="hljs-keyword">var</span> requestUrl = request.<span class="hljs-title function_">getUrl</span>().<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Intercepting WebResourceRequest: &quot;</span> + requestUrl);<br><br>            <span class="hljs-comment">// 在这里可以执行任何自定义逻辑，如修改请求</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">shouldInterceptRequest</span>(view, request);<br>        &#125;;<br>    &#125;);<br>&#125;<br><br><br><span class="hljs-comment">// setTimeout(main2, 3000);</span><br></code></pre></td></tr></table></figure><h1 id="hook-So层的-newStringUTF8"><a href="#hook-So层的-newStringUTF8" class="headerlink" title="hook So层的 newStringUTF8"></a>hook So层的 newStringUTF8</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_NewStringUTF</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> artModule = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libart.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> symbols = artModule.<span class="hljs-title function_">enumerateSymbols</span>();<br>    <span class="hljs-keyword">var</span> newStringUTF = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; symbols.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> symbol = symbols[i];<br>        <span class="hljs-keyword">if</span> (symbol.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;NewStringUTF&quot;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(symbol.<span class="hljs-property">name</span>);<br>            newStringUTF = symbol.<span class="hljs-property">address</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newStringUTF) &#123;<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(newStringUTF, &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                <span class="hljs-keyword">let</span> string = args[<span class="hljs-number">1</span>].<span class="hljs-title function_">readCString</span>()<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[字符串]:&quot;</span>, string);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[调用栈]:&quot;</span>,<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">backtrace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-title class_">Backtracer</span>.<span class="hljs-property">FUZZY</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">DebugSymbol</span>.<span class="hljs-property">fromAddress</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>            &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            &#125;<br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有这个函数&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="hook具体函数地址"><a href="#hook具体函数地址" class="headerlink" title="hook具体函数地址"></a>hook具体函数地址</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlsym</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 获取dlsym函数的地址</span><br>    <span class="hljs-keyword">let</span> dlsymAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libdl.so&quot;</span>,<span class="hljs-string">&quot;dlsym&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dlsymAddr);<br>    <span class="hljs-comment">// hook dlsym</span><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlsymAddr,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">args1</span> = args[<span class="hljs-number">1</span>];<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;<br>            <span class="hljs-keyword">let</span> md= <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByAddress</span>(retval);<br>            <span class="hljs-keyword">if</span>(md==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数：&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">args1</span>.<span class="hljs-title function_">readCString</span>(),<span class="hljs-string">&quot;模块：&quot;</span>+md.<span class="hljs-property">name</span>,<span class="hljs-string">&quot;地址：&quot;</span>+retval,<span class="hljs-string">&quot;偏移：&quot;</span>+retval.<span class="hljs-title function_">sub</span>(md.<span class="hljs-property">base</span>));<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="HashMap或转Json"><a href="#HashMap或转Json" class="headerlink" title="HashMap或转Json"></a>HashMap或转Json</h1><p>方法一：直接打印：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">HashMap</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.util.HashMap&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;map：&quot;</span> + <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(map, <span class="hljs-title class_">HashMap</span>).<span class="hljs-title function_">toString</span>());<br> <br><span class="hljs-comment">// 输出展示：map -&gt; &#123;onlyCanExchange=0, pageSize=5, pageNum=1&#125;</span><br></code></pre></td></tr></table></figure><p>方法二：借助Gson转Json打印（推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Gson</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;com.google.gson.Gson&#x27;</span>).$new();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;map -&gt; &quot;</span> + <span class="hljs-title class_">Gson</span>.<span class="hljs-title function_">toJsonTree</span>(map).<span class="hljs-title function_">getAsJsonObject</span>());<br> <br><span class="hljs-comment">// 输出展示：map -&gt; &#123;&quot;onlyCanExchange&quot;:0,&quot;pageSize&quot;:&quot;5&quot;,&quot;pageNum&quot;:&quot;1&quot;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装Mongodb</title>
      <link href="/2025/09/19/Mac%E5%AE%89%E8%A3%85Mongodb/"/>
      <url>/2025/09/19/Mac%E5%AE%89%E8%A3%85Mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="Homebrew-安装"><a href="#Homebrew-安装" class="headerlink" title="Homebrew 安装"></a>Homebrew 安装</h1><ol><li>更新 brew</li></ol><blockquote><p>brew update</p></blockquote><ol start="2"><li>添加 MongoDB 官方 tap</li></ol><blockquote><p>brew tap mongodb&#x2F;brew</p></blockquote><ol start="3"><li>安装最新稳定版</li></ol><blockquote><p>brew install <a href="mailto:&#x6d;&#111;&#x6e;&#103;&#x6f;&#x64;&#x62;&#45;&#x63;&#111;&#109;&#x6d;&#x75;&#110;&#105;&#x74;&#x79;&#x40;&#x37;&#46;&#48;">mongodb-community@7.0</a><br>（这里我写的是 7.0，如果你需要特定版本可以改，比如 6.0。）</p></blockquote><ol start="4"><li>启动 MongoDB 服务</li></ol><blockquote><p>brew services start <a href="mailto:&#109;&#x6f;&#110;&#103;&#111;&#100;&#x62;&#45;&#99;&#111;&#109;&#x6d;&#x75;&#x6e;&#x69;&#116;&#x79;&#64;&#x37;&#46;&#48;">mongodb-community@7.0</a><br>brew services start mongodb&#x2F;brew&#x2F;<a href="mailto:&#109;&#x6f;&#110;&#103;&#111;&#100;&#x62;&#45;&#x63;&#x6f;&#109;&#109;&#x75;&#x6e;&#105;&#116;&#121;&#x40;&#x37;&#x2e;&#x30;">mongodb-community@7.0</a></p></blockquote><ol start="5"><li>确认 MongoDB 是否启动成功</li></ol><blockquote><p>ps aux | grep -v grep | grep mongod</p></blockquote><ol start="6"><li>连接 MongoDB</li></ol><blockquote><p>mongosh</p></blockquote><p>默认会连到本地 mongodb:&#x2F;&#x2F;localhost:27017</p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wails+svelte开发入门</title>
      <link href="/2025/09/07/Wails-svelte%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
      <url>/2025/09/07/Wails-svelte%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>go install github.com&#x2F;wailsapp&#x2F;wails&#x2F;v2&#x2F;cmd&#x2F;wails@latest</p></blockquote><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><blockquote><p>wails init -n “my-svelte-app” -t “svelte”</p></blockquote><ul><li><p><code>-n</code>：指定项目名称，这里是<code>my-svelte-app</code>。</p></li><li><p><code>-t</code>：指定前端模板，这里我们使用 <code>svelte</code>。</p></li></ul><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>项目创建完成后，进入项目目录并运行：</p><p>Bash</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> my-svelte-<span class="hljs-keyword">app</span><br>wails dev<br></code></pre></td></tr></table></figure><h1 id="Svelte-核心概念"><a href="#Svelte-核心概念" class="headerlink" title="Svelte 核心概念"></a>Svelte 核心概念</h1><p>您好！很高兴能带您快速入门并精通 Svelte。这是一个非常棒的选择，因为它以其简洁和高效而闻名。</p><p>Svelte 的核心理念与您可能听说过的其他框架（如 React 或 Vue）截然不同。与其在浏览器运行时执行大量工作，Svelte 更像一个<strong>编译器</strong>。它在您构建项目时，将您的代码转换成体积小、运行速度快的原生 JavaScript。这意味着最终用户在访问您的应用时，无需加载庞大的框架代码，从而带来<strong>极佳的性能</strong>。</p><h2 id="Svelte-快速入门指南"><a href="#Svelte-快速入门指南" class="headerlink" title="Svelte 快速入门指南"></a>Svelte 快速入门指南</h2><p>要使用 Svelte 快速上手 Wails 项目，您可以按照以下步骤操作：</p><h3 id="1-创建-Wails-Svelte-项目"><a href="#1-创建-Wails-Svelte-项目" class="headerlink" title="1. 创建 Wails + Svelte 项目"></a>1. 创建 Wails + Svelte 项目</h3><p>在终端中，运行以下命令来创建一个新的项目：</p><p>Bash</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">wails init -<span class="hljs-built_in">n</span> <span class="hljs-string">&quot;my-svelte-app&quot;</span> -<span class="hljs-built_in">t</span> <span class="hljs-string">&quot;svelte&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>-n</code>：指定项目名称，这里是 <code>my-svelte-app</code>。</li><li><code>-t</code>：指定前端模板，这里我们使用 <code>svelte</code>。</li></ul><h3 id="2-运行项目"><a href="#2-运行项目" class="headerlink" title="2. 运行项目"></a>2. 运行项目</h3><p>项目创建完成后，进入项目目录并运行：</p><p>Bash</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> my-svelte-<span class="hljs-keyword">app</span><br>wails dev<br></code></pre></td></tr></table></figure><p><code>wails dev</code> 命令将启动 Wails 开发模式，同时运行您的 Go 后端和 Svelte 前端。Svelte 的 Vite 开发服务器会自动为您处理热重载。</p><hr><h2 id="Svelte-核心概念-1"><a href="#Svelte-核心概念-1" class="headerlink" title="Svelte 核心概念"></a>Svelte 核心概念</h2><p>要快速精通 Svelte，您只需掌握几个核心概念。它避免了许多其他框架中常见的样板代码。</p><h3 id="1-组件-Components"><a href="#1-组件-Components" class="headerlink" title="1. 组件 (Components)"></a>1. 组件 (Components)</h3><p>在 Svelte 中，每个 <code>.svelte</code> 文件都是一个组件。一个组件通常包含三部分：</p><ul><li><strong><code>&lt;script&gt;</code> 标签</strong>：用于存放组件的 JavaScript 逻辑。</li><li><strong>HTML 标签</strong>：用于定义组件的模板结构。</li><li><strong><code>&lt;style&gt;</code> 标签</strong>：用于编写组件的 CSS 样式。值得注意的是，<strong>样式默认是作用域化的</strong>，这意味着它们只会影响当前组件，而不会污染全局样式。</li></ul><h3 id="2-响应式-Reactivity"><a href="#2-响应式-Reactivity" class="headerlink" title="2. 响应式 (Reactivity)"></a>2. 响应式 (Reactivity)</h3><p>Svelte 的响应式非常简单。当您想让一个变量成为响应式状态时，只需正常声明它即可。当您改变这个变量时，所有使用它的地方都会自动更新。</p><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;script&gt;<br>let count = 0; // 声明一个响应式变量<br>function increment() &#123;<br>    count++; // 直接修改变量，UI 会自动更新<br>&#125;<br>&lt;/script&gt;<br><br>&lt;button on:click=&#123;increment&#125;&gt;点击了 &#123;count&#125; 次&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="3-响应式声明"><a href="#3-响应式声明" class="headerlink" title="3. 响应式声明 ($:)"></a>3. 响应式声明 (<code>$:</code>)</h3><p>如果您需要从一个或多个响应式变量中派生新值，可以使用 Svelte 独有的 <code>$:</code> 语法。</p><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;script&gt;<br>let count = 0;<br>// total 是一个派生值，当 count 改变时会自动重新计算<br>$: total = count * 2;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4-属性-props"><a href="#4-属性-props" class="headerlink" title="4. 属性 (props)"></a>4. 属性 (<code>props</code>)</h3><p>要将数据从父组件传递给子组件，可以使用 <code>export let</code> 语法。</p><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;!-- ChildComponent.svelte --&gt;<br>&lt;script&gt;<br>export let name; // 声明一个可接受的 prop<br>&lt;/script&gt;<br><br>&lt;h1&gt;你好, &#123;name&#125;!&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;!-- App.svelte (父组件) --&gt;<br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.svelte&#x27;;<br>&lt;/script&gt;<br><br>&lt;ChildComponent name=&quot;Svelte&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="5-逻辑块"><a href="#5-逻辑块" class="headerlink" title="5. 逻辑块"></a>5. 逻辑块</h3><p>Svelte 提供简洁的语法来处理条件渲染和列表渲染：</p><ul><li><strong>条件渲染</strong>：使用 <code>&#123;#if...&#125;</code></li><li><strong>列表渲染</strong>：使用 <code>&#123;#each...&#125;</code></li></ul><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&#123;#if user&#125;<br>    &lt;div&gt;欢迎, &#123;user.name&#125;!&lt;/div&gt;<br>&#123;:else&#125;<br>    &lt;div&gt;请登录&lt;/div&gt;<br>&#123;/if&#125;<br><br>&#123;#each items as item&#125;<br>    &lt;div&gt;&#123;item.name&#125;&lt;/div&gt;<br>&#123;/each&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 一日一库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Svelte </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vaptcha手势验证码分析流程</title>
      <link href="/2025/08/29/%E6%89%8B%E5%8A%BF%E9%AA%8C%E8%AF%81%E7%A0%81%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/08/29/%E6%89%8B%E5%8A%BF%E9%AA%8C%E8%AF%81%E7%A0%81%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>先config 获取信息 再get拿到验证码和order</p><p><img src="https://s2.loli.net/2025/08/25/lRa5dCrwXDiKTqf.png"></p><p>如下图 配置如下</p><p>vi： 固定</p><p>k：返回值</p><p>en： 加密值</p><p><img src="https://s2.loli.net/2025/08/25/trCgI8WO56mpweR.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>n 生成出如下</p><p><img src="https://s2.loli.net/2025/08/25/kZyih3G2oaIRN1K.png"></p><p>第一个en 随便扣扣 就扣出来了。</p><p><img src="https://s2.loli.net/2025/08/25/yWGmVfgKibajRlA.png"></p><p>然后把比较重要的component拿出来</p><p><img src="https://s2.loli.net/2025/08/25/sJ4SVXiojG7RCdZ.png"></p><p>然后抠出来 请求就可以了。中间会遇到很多坑。</p><p>其中指纹需要复制。</p><h2 id="底图还原"><a href="#底图还原" class="headerlink" title="底图还原"></a>底图还原</h2><p>这里请求完之后会获取到图片信息和 图片的order</p><p>但是这个order不是直接还原的order。还需要去js中找到加密的地方。</p><p>（这里为了保持代码一致。我扣下来一版 来找对应位置。所以有些值和网页会有所对应不上）</p><p>还原位置如下：</p><p>搜索关键词：imageOnload 或者 Decrypt</p><p><img src="https://s2.loli.net/2025/08/28/hcDXq6gmKMyJ2Ai.png"></p><p>这里就直接硬扣就完事了。</p><p>Decrypt的算法逻辑如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_0xb05afc</span>(<span class="hljs-params">_0x2b9119, _0x1f3614</span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x431184 = <span class="hljs-string">&quot;&quot;</span>;<br>    _0x431184 = (<span class="hljs-built_in">parseInt</span>(_0x2b9119) - _0x1f3614).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">if</span> (_0x431184.<span class="hljs-property">length</span> &lt; (<span class="hljs-number">983293</span> ^ <span class="hljs-number">983287</span>)) &#123;<br>        _0x431184 = <span class="hljs-string">&quot;0&quot;</span> + _0x431184;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _0x431184;<br>&#125;<br></code></pre></td></tr></table></figure><p>稍微麻烦的也就是传参的这个</p><p><img src="https://s2.loli.net/2025/08/28/MXGf6zUZISOnqgk.png"></p><h2 id="算法还原"><a href="#算法还原" class="headerlink" title="算法还原"></a>算法还原</h2><p>拿到底图链接 即重新拼接成一个完整图片</p><p>算法如下；</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_image</span>(<span class="hljs-params">order: <span class="hljs-built_in">str</span>, image_url: <span class="hljs-built_in">str</span>, output_path: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;image.png&quot;</span></span>):<br>    CANVAS_WIDTH, CANVAS_HEIGHT = <span class="hljs-number">290</span>, <span class="hljs-number">167</span><br>    SOURCE_WIDTH, SOURCE_HEIGHT = <span class="hljs-number">400</span>, <span class="hljs-number">230</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-built_in">len</span>(order) == <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> order.isdigit()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误：排序字符串必须为10位数字&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    response = requests.get(image_url, timeout=<span class="hljs-number">10</span>)<br>    source_image = Image.<span class="hljs-built_in">open</span>(io.BytesIO(response.content))<br><br>    target_canvas = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (CANVAS_WIDTH, CANVAS_HEIGHT), <span class="hljs-string">&#x27;white&#x27;</span>)<br><br>    canvas_block_w, canvas_block_h = CANVAS_WIDTH // <span class="hljs-number">5</span>, CANVAS_HEIGHT // <span class="hljs-number">2</span><br>    source_block_w, source_block_h = SOURCE_WIDTH // <span class="hljs-number">5</span>, SOURCE_HEIGHT // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-comment"># 计算源和目标位置</span><br>        source_x, source_y = (i % <span class="hljs-number">5</span>) * source_block_w, (i // <span class="hljs-number">5</span>) * source_block_h<br>        pos = <span class="hljs-built_in">int</span>(order[i])<br>        target_x, target_y = (pos % <span class="hljs-number">5</span>) * canvas_block_w, (pos // <span class="hljs-number">5</span>) * canvas_block_h<br><br>        <span class="hljs-comment"># 裁剪、缩放并粘贴</span><br>        block = source_image.crop((source_x, source_y, source_x + source_block_w, source_y + source_block_h))<br>        resized_block = block.resize((canvas_block_w, canvas_block_h), Image.Resampling.LANCZOS)<br>        target_canvas.paste(resized_block, (target_x, target_y))<br><br>    target_canvas.save(output_path, <span class="hljs-string">&#x27;PNG&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图像已保存为 <span class="hljs-subst">&#123;output_path&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h2><p>validate的请求中的en </p><p>定位点如下图所示</p><p><img src="https://s2.loli.net/2025/08/28/214CoGMDfOzyub6.png"></p><p>其实这里算法都和你简单随便扣扣就出来了。</p><p>传参这里看看。</p><p><img src="https://s2.loli.net/2025/08/29/xSoBO8wQjnJa1lH.png"></p><p>v： 轨迹</p><p>vi：固定值 和uk差不多</p><p>k：接口返回</p><p>dt： 滑动时间</p><p>ch：heigh 图片高度</p><p>cw：width 图片宽度</p><p><img src="https://s2.loli.net/2025/08/29/DuMCjlp7FWi8nZS.png"></p><p>补充说明：具体值demo如上</p><h1 id="难点与坑"><a href="#难点与坑" class="headerlink" title="难点与坑"></a>难点与坑</h1><p>这里讲完流程大概讲下难点</p><ol><li><p>en有个UA头 前后要保持一致 如下图<img src="https://s2.loli.net/2025/08/28/fe6JKqcagSGP58r.png" alt="image-20250828235814245"></p></li><li><p>GenerateFP。下图其实这里就是运用了 JavaScript 生成器 的特性。.sent 就是接受了上一步吐出来的值。</p><p><img src="https://s2.loli.net/2025/08/29/gSqoDkRuFaJwAxW.png"></p></li><li><p>这里有个异步方法 其实。只需要看他返回值 然后扣下来或者给AI就可以了。</p><p><img src="https://s2.loli.net/2025/08/29/rCMNwedOGS1IWsi.png"></p><p><img src="https://s2.loli.net/2025/08/29/yW5jtdHVxPYDKIG.png"></p><p>当然 这里还有个环境指纹 直接copy下来就好了。</p><p><img src="https://s2.loli.net/2025/08/29/RJe2kpswx6FInQq.png"></p></li><li><p>轨迹 </p><p>这里不应该是坑点。这里打个鼠标断点就能找到轨迹生成的地方。可以对着分析 但是没屌用。具体我也没研究明白。</p><p><img src="https://s2.loli.net/2025/08/29/UNylLinexzOZ6CS.png"></p></li></ol><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>结果就是我也没搞出来。demo站倒是比较松。这个真应用起来好像是划得来不太准就会一直错。</p><p><img src="https://s2.loli.net/2025/08/29/tpiMF2Es3gRIHWS.png"></p><p>代码返回了 103 代表了canvas 指纹不对。</p><p><img src="https://s2.loli.net/2025/08/29/OQLEkjb78H4x3Ti.png"></p><p>代码返回了101 代表了 en生成的值和 knock的值不对。</p><p><img src="https://s2.loli.net/2025/08/29/GhQqWOCVcFsbrud.png"></p><p>代码返回了104 代表了 轨迹的值不对。最终也是卡死在了这一步。</p><p>至于识别的话。这里我使用了CSDN的某位大佬的方案。</p><p>使用cv2 手动的去滑。然后 line 的去模拟轨迹。但是实际下来好像是不太行。</p><p>这里我把代码也开源出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_trajectory</span>(<span class="hljs-params">img_path</span>):<br>    points = []<br>    img = cv2.imread(img_path)<br>    <span class="hljs-keyword">if</span> img <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法加载图片，请检查路径&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br>    cv2.namedWindow(<span class="hljs-string">&#x27;Image Trajectory Recorder&#x27;</span>)<br>    cv2.setMouseCallback(<span class="hljs-string">&#x27;Image Trajectory Recorder&#x27;</span>,<br>                         <span class="hljs-keyword">lambda</span> event, x, y, flags, param:<br>                         (points.append(&#123;<span class="hljs-string">&#x27;x&#x27;</span>: x, <span class="hljs-string">&#x27;y&#x27;</span>: y, <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>)&#125;))<br>                         <span class="hljs-keyword">if</span> event == cv2.EVENT_LBUTTONDOWN <span class="hljs-keyword">or</span> (<br>                                     event == cv2.EVENT_MOUSEMOVE <span class="hljs-keyword">and</span> flags == cv2.EVENT_FLAG_LBUTTON) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;在图片上按住鼠标左键并移动来绘制轨迹，按&#x27;s&#x27;保存并返回，按&#x27;q&#x27;退出&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        clone = img.copy()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(points) &gt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(points) - <span class="hljs-number">1</span>):<br>                cv2.line(clone,<br>                         (points[i][<span class="hljs-string">&#x27;x&#x27;</span>], points[i][<span class="hljs-string">&#x27;y&#x27;</span>]),<br>                         (points[i + <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;x&#x27;</span>], points[i + <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;y&#x27;</span>]),<br>                         (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>        cv2.imshow(<span class="hljs-string">&#x27;Image Trajectory Recorder&#x27;</span>, clone)<br><br>        key = cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span><br><br>        <span class="hljs-comment"># 按&#x27;s&#x27;保存并返回</span><br>        <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;s&#x27;</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> points:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有记录到轨迹点&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-comment"># 计算相对时间并添加偏移量</span><br>            start_time = points[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;time&#x27;</span>]<br>            <span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> points:<br>                point[<span class="hljs-string">&#x27;time&#x27;</span>] = point[<span class="hljs-string">&#x27;time&#x27;</span>] - start_time<br>                point[<span class="hljs-string">&#x27;x&#x27;</span>] += <span class="hljs-number">30</span><br>                point[<span class="hljs-string">&#x27;y&#x27;</span>] += <span class="hljs-number">35</span><br><br>            <span class="hljs-comment"># 返回JSON字符串</span><br>            trajectory_data = json.dumps(points, indent=<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;轨迹已记录，共 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(points)&#125;</span> 个点。&quot;</span>)<br><br>            cv2.destroyAllWindows()<br>            <span class="hljs-keyword">return</span> trajectory_data<br><br>        <span class="hljs-comment"># 按&#x27;q&#x27;退出</span><br>        <span class="hljs-keyword">elif</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已退出，未保存轨迹&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    cv2.destroyAllWindows()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>补环境复制原型属性脚本</title>
      <link href="/2025/08/26/%E8%A1%A5%E7%8E%AF%E5%A2%83%E5%A4%8D%E5%88%B6%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E8%84%9A%E6%9C%AC/"/>
      <url>/2025/08/26/%E8%A1%A5%E7%8E%AF%E5%A2%83%E5%A4%8D%E5%88%B6%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  <span class="hljs-title function_">copyAllProperties</span> =(<span class="hljs-params">obj</span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> result = &#123;&#125;;<br>    <br>    <span class="hljs-comment">// 复制对象自身的属性</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result[key] = obj[key];<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            result[key] = <span class="hljs-string">&#x27;[无法访问]&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 复制不可枚举的属性</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> result)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                result[key] = obj[key];<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                result[key] = <span class="hljs-string">&#x27;[无法访问]&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">const</span> screenProps = <span class="hljs-title function_">copyAllProperties</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA学习</title>
      <link href="/2025/08/22/IDA%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/08/22/IDA%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="还原JNI函数方法名"><a href="#还原JNI函数方法名" class="headerlink" title="还原JNI函数方法名"></a>还原JNI函数方法名</h1><p>如下图所示，输入</p><blockquote><p>JNIEnv <em>a1 或者 JNIEnv</em></p></blockquote><p>找到调用的jni函数名，鼠标选中a1,单击y,弹出如下界面</p><p><img src="https://s2.loli.net/2025/08/22/kSMNzhyvQlTA4G9.png"></p><p>点击OK 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 安卓基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>某蜂窝 zzzghostsigh 补环境+纯算</title>
      <link href="/2025/08/19/%E9%A9%AC%E8%9C%82%E7%AA%9Dunidbg%E8%A1%A5%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9%E5%AF%84%E5%AD%98%E5%99%A8/"/>
      <url>/2025/08/19/%E9%A9%AC%E8%9C%82%E7%AA%9Dunidbg%E8%A1%A5%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9%E5%AF%84%E5%AD%98%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h1><p>首先找到定位点。</p><p>这里直接搜索 zzzghostsigh</p><p><img src="https://s2.loli.net/2025/07/25/IrSbqQZTWa3582Y.png"></p><p>然后找他引用的位置</p><p><img src="https://s2.loli.net/2025/07/25/tdPlEbB5TfHVMye.png"></p><p>继续往下找一下位置。</p><p>这里发现是一个接口的实现。<img src="https://s2.loli.net/2025/07/25/fok8VWFG4ZKDsva.png"></p><p>那没关系。我们继续找下实现的位置。</p><p>这里可以挨个去看。</p><p>这里发现是gh.b()</p><p><img src="https://s2.loli.net/2025/07/25/12ihHAPMaurTSe5.png"></p><p>继续点两下 就找到了 引用的位置。找到so层 是 libmfw.so</p><p><img src="https://s2.loli.net/2025/07/17/uf4tKXM78lDiA13.png"></p><p>然后我们hook一下 看看传餐以及结果值。</p><p><img src="https://s2.loli.net/2025/07/17/KZWTlUqh7pReHLw.png"></p><h1 id="unidbg"><a href="#unidbg" class="headerlink" title="unidbg"></a>unidbg</h1><p>这里直接unidbg补环境</p><p>封装好请求</p><p>直接运行 报错如下</p><p>这里看到 直接就运行了没报错 缺少什么环境</p><p><img src="https://s2.loli.net/2025/07/17/WEcnH5RM1D7la6i.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">[10:49:23 460]  WARN [com.github.unidbg.linux.ARM64SyscallHandler] (ARM64SyscallHandler:410) - handleInterrupt intno=2, NR=-128336, svcNumber=0x1a2, PC=unidbg@0xfffe0ab4, LR=RX@0x1203cbac[libmfw.so]0x3cbac, syscall=null<br>java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0<br></code></pre></td></tr></table></figure><p>直接去看报错的这部分基址。跳过这部分校验</p><p>ida找一下 3cbac</p><p>然后分析下 。这个方法中都是校验。补起来相对还是比较麻烦的。</p><p><img src="https://s2.loli.net/2025/07/18/ebXqKf2xwCvHt1o.png"></p><p>所以这里我们往上看。这个方法</p><p><img src="https://s2.loli.net/2025/07/18/dzFTCv8OJ19it7N.png"></p><p>按x 看下调用的地方。这里就是调用环境的地方。</p><p><img src="https://s2.loli.net/2025/07/18/62MQmob4Zv1Wcqr.png"></p><p>所以这里我们直接跳过这个判断。</p><p>这里直接unibdg 去跳过 这个环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> emulator.attach().addBreakPoint(<span class="hljs-keyword">module</span>.base + <span class="hljs-number">0x3970C</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onHit</span><span class="hljs-params">(Emulator&lt;?&gt; emulator, <span class="hljs-type">long</span> address)</span> &#123;<br><span class="hljs-comment">//                emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_PC,0x3970C+4);</span><br>                emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_PC,address+<span class="hljs-number">4</span>);<br>                emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_X0,<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>这里返回true 即断点不会断住，返回false 即代表断点断住。</p><p>然后直接运行。发现可以出值。</p><p><img src="https://s2.loli.net/2025/08/18/jvhzZ4LywsW3tum.png"></p><p>结果也正如一开始我们frida的值一样。</p><p>接下来就是trace了</p><h1 id="纯算分析"><a href="#纯算分析" class="headerlink" title="纯算分析"></a>纯算分析</h1><p>这里直接搜索 0x4a55</p><p>搜索到了 0x4a55d456 拆成了 8个字节。</p><p><img src="https://s2.loli.net/2025/08/18/dltBqg6FuGAyzOZ.png"></p><p>那我们再搜下 0x9606ba47 果然也有 13个。实际不算结果12个。</p><p><img src="https://s2.loli.net/2025/08/18/58hPl9EorNHMfA6.png"></p><p>那总计下</p><p>4a55d456 9606ba47 87057a46 2b4f926c f9739142</p><p>拆成了 五组。 40位。其实已经可以猜出来是sha256了。</p><p>先找下 0x4a55d456的基址 0x1203f360</p><p>搜索 一下</p><p><img src="https://s2.loli.net/2025/08/18/4xg8jhpFCmzJqAe.png"></p><p>这里先回去看看 ida</p><p>这里把代码丢给gpt。gpt直接告诉我们这是个sha1</p><p><img src="https://s2.loli.net/2025/08/18/ZmBHMtW8OyXKTgz.png"></p><p>但是我们实际上去运算。发现好像对不上啊</p><p><img src="https://s2.loli.net/2025/08/18/IsXb8ujNv3JM5eS.png"></p><p>所以肯定是魔改了一些参数。这里继续回去看010里的trace。</p><p>这里就相对简单了。我们对这源码去看实现就好。</p><p>这里找着入口对着看。</p><p>这里直接找sha1的特征值。</p><p>找一段源码（最好找python的。或者Go的 只要不是JS的,因为我就是js改的。千奇百怪）</p><p>这里我们找下sha1 的轮常数： 1518500249，1859775393，1894007588（-1894007588） </p><p>然后把它转成16进制去trace搜索。</p><p>这里分别为 0x5A827999，0x6ED9EBA1，0x8F1BBCDC</p><p>这里去搜搜</p><p><img src="https://s2.loli.net/2025/08/18/XyrBPNU6wDq97Mb.png"></p><p>这里可以发现trace的地方有703个很明显不合理</p><p>找到 w29&#x3D;0x5A827999 做下切割。</p><p>只拿一段。</p><p><img src="https://s2.loli.net/2025/08/18/lPTn7FCAherIiKu.png"></p><p>这里找到 movk的地方。</p><p>发现一共4轮。</p><p><img src="https://s2.loli.net/2025/08/18/Sc2EayOoZIVuPTH.png"></p><p>但是这这里movk直接就是就是加载常量了 所以得往前看一点。看看谁那些值。</p><p><img src="https://s2.loli.net/2025/08/18/BmbaQcG65uloC2F.png"></p><p><img src="https://s2.loli.net/2025/08/18/BMSzX749xfyrqKc.png"></p><p>具体看看trace中的值。</p><p><img src="https://s2.loli.net/2025/08/18/x74eozQcHSfphYX.png"></p><p>这里可以推断出SHA1的魔值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">v18 = <span class="hljs-number">0x67452301</span><br>v19 = <span class="hljs-number">0xEFCDAB89</span><br>V20 = <span class="hljs-number">0x98BADCFE</span><br>v21 = <span class="hljs-number">0x5E4A1F7C</span><br>v22 = <span class="hljs-number">0x10325476</span><br></code></pre></td></tr></table></figure><p>但是好像和标准值有差别</p><p>标准的 “v21”与“v22”为 “0x10325476” 以及 “0xC3D2E1F0”</p><p>这里虽然改了。但是结果仍然不一致。</p><p>继续往下看吧。</p><p>分析下具体的代码</p><p><img src="https://s2.loli.net/2025/08/18/j1xtAycUY28vLhW.png"></p><p>如下</p><p>以上依次为</p><p>movk、rev、and、add、eor、add、ror、add、ror、add、</p><p>_、字节反转、与、加、异或、右移、加、右移、加</p><p>这里可以看到这里基本和算法都差不多没有魔改。这一段对这去扣。</p><p>剩余是否一致也是一样的。往下看。</p><p>这里只讲差异点吧。</p><p>在开头搜过 0x5a827999 这个值。但是正常这个值。其实标准中应该只参与过16轮。而稳重有36轮。</p><p><img src="https://s2.loli.net/2025/08/18/nFHoXyz3p2WvsKZ.png"></p><p>所以还有20轮肯定是改了轮数。</p><p>所以下文开始就是16轮之后的改的论数</p><p><img src="https://s2.loli.net/2025/08/18/ZgRMS15vFkVp4L9.png"></p><p>对应的伪c如下</p><p><img src="https://s2.loli.net/2025/08/18/y3mxTEOCZh84oQY.png"></p><p>继续问下ai</p><p><img src="https://s2.loli.net/2025/08/18/ANFd4RyGlfKDHIc.png"></p><p>所以代码应该如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">16</span>) &#123;<br>    f = (b &amp; c) | ((~b) &amp; d);<br>    k = <span class="hljs-number">0x5A827999</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">20</span>) &#123;<br>    f = b ^ c ^ d;<br>    k = <span class="hljs-number">0x6ED9EBA1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">40</span>) &#123;<br>    f = (b &amp; c) | (b &amp; d) | (c &amp; d);<br>    k = <span class="hljs-number">0x8F1BBCDC</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">60</span>)&#123;<br>    f = (b &amp; c) | ((~b) &amp; d);<br>    k = <span class="hljs-number">0x5A827999</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    f = b ^ c ^ d;<br>    k = <span class="hljs-number">0xCA62C1D6</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里既是改了 这些值还是对不上。</p><p>走到最后</p><p><img src="https://s2.loli.net/2025/08/18/todO2cb91BnaZ57.png"></p><p>这里对源码看看</p><p><img src="https://s2.loli.net/2025/08/18/RyPmKDgX5Gw9eTv.png"></p><p>那正常 应该是 </p><p>4 3 2 1 0</p><p>而我们的 是</p><p>4 2 3 1 0</p><p>所以这样调转下位置。 然后运行</p><p><img src="https://s2.loli.net/2025/08/18/yGgx1rCKYeIDXkA.png"></p><p>发现终于一模一样了。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>也算搞了好几天。还原了一个比较简单的算法。</p>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>某猫投诉 flutter Signature 逆向</title>
      <link href="/2025/08/15/%E6%9F%90%E7%8C%AB%E6%8A%95%E8%AF%89%20flutter%20Signature%20%E9%80%86%E5%90%91/"/>
      <url>/2025/08/15/%E6%9F%90%E7%8C%AB%E6%8A%95%E8%AF%89%20flutter%20Signature%20%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接说了是 flutter了 那就不必多说了。</p><p>先介绍下 什么是flutter。 这里我直接把AI的回复粘贴过来了。</p><p>Flutter 是谷歌开发的一套 UI 工具包，让你只写一份代码，就能同时为 iOS、Android、Web 和桌面等多个平台创建美观、高性能的应用。</p><p>1、<strong>“万物皆 Widget”：</strong> Flutter 中所有界面元素，包括按钮、文本和布局，甚至应用本身，都是“Widget”（小部件）。它们可以像积木一样组合起来构建复杂的界面。</p><p>2、<strong>自带渲染引擎（Skia）：</strong> Flutter 不依赖操作系统原生的 UI 组件，而是通过自带的高性能图形引擎 Skia 直接将所有 Widget 绘制到屏幕上。这样可以实现极高的渲染速度和流畅的用户体验。</p><p>3、<strong>Dart 语言：</strong> Flutter 使用 Dart 语言开发。</p><ul><li><strong>AOT 编译：</strong> 发布时，Dart 代码会被直接编译成机器码，使应用运行速度极快，性能接近原生。</li><li><strong>JIT 编译 + 热重载：</strong> 开发时，Dart 支持即时编译和“热重载”功能，开发者修改代码后能立即看到效果，大大提高了开发效率。</li></ul><p>4、<strong>响应式 UI：</strong> Flutter 采用声明式 UI 编程。你只需描述界面“长什么样”，而不用关心“如何更新”，当数据变化时，Flutter 会自动高效地更新界面。</p><p>libflutter.so  &#x3D;&#x3D;&#x3D;&gt;  libapp.so</p><p>那这里 AI介绍了 flutter的特点。</p><p>再补充几点</p><p>1、flutter是由Dart开发</p><p>2、 Flutter被编译出来其实就是个So文件</p><p>3、So文件无函数名。基本都是sub_开头，也无JNI绑定方法。</p><p>4、执行是由flutter.so执行</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>抓包可知。需要逆向的参数 是这个 signautre</p><p><img src="https://s2.loli.net/2025/08/05/GYFbhyNRjKrMmic.png"></p><p>这里Java层找不到</p><h1 id="IDA配置"><a href="#IDA配置" class="headerlink" title="IDA配置"></a>IDA配置</h1><p>这里 flutter 反编译 全是一sub 函数。几万个。找不到</p><p>这里使用blutter去做一个函数名还原。</p><p>解压 app 把 libflutter.so 以及 libapp.so 拿出来。</p><p>下载完Blutter。</p><p>这里我是Mac</p><p>使用如下命令</p><p>两个版本 </p><p>macOS Sequoia</p><ul><li>Install XCode</li><li>Install required tools</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>cmake ninja pkg-<span class="hljs-built_in">config</span> icu4c capstone<br>pip3 <span class="hljs-keyword">install </span>pyelftools requests<br></code></pre></td></tr></table></figure><p>macOS Ventura and Sonoma (clang 16)</p><ul><li>Install XCode</li><li>Install clang 16 and required tools</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span><span class="hljs-keyword">llvm@16 </span>cmake ninja pkg-<span class="hljs-built_in">config</span> icu4c capstone<br>pip3 <span class="hljs-keyword">install </span>pyelftools requests<br></code></pre></td></tr></table></figure><p>然后执行下述命令</p><blockquote><p>python3 blutter.py .&#x2F;arm64 .&#x2F;output</p></blockquote><p>如下图位置 即可。</p><p><img src="https://s2.loli.net/2025/08/06/5ETP9exBkbchr6o.png"></p><p>直接讲ida中还原变量名。</p><p><img src="https://s2.loli.net/2025/08/05/HYlOxmtKPojwZqG.png"></p><p>把这个py文件拖进去</p><p><img src="https://s2.loli.net/2025/08/05/ePTuFUOM4KbE1Rg.png"></p><p>中间有错误不用管。然后就发现</p><p>诶。变量名都还原了。</p><p><img src="https://s2.loli.net/2025/08/05/LUf6gPlpmXQ2w4v.png"></p><p>​</p><h1 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h1><p>这里其实我搞过web的 知道这个signature 是 sha256</p><p>这里直接搜索 sha256</p><p><img src="https://s2.loli.net/2025/08/05/XwzYPrNaO6kTVgB.png"></p><p>当然可以把这个Allocate，以及flutter 开头的过滤掉。</p><p>这里点开第一个</p><p><img src="https://s2.loli.net/2025/08/06/Q1yiIzbLJmhtvOk.png"></p><p><img src="https://s2.loli.net/2025/08/06/flcpLsIUG4uogBt.png"></p><p>直接找他函数地址 Hook一下就好了</p><p>这里直接对比。</p><p><img src="https://s2.loli.net/2025/08/05/zkt69FVZ8pMJCOK.png"></p><p>对比</p><p><img src="https://s2.loli.net/2025/08/05/XYCD2Z8As6egTHx.png"></p><p>最后发现是由这段加密而成。</p><p><img src="https://s2.loli.net/2025/08/05/MSbXx621GWeRzq9.png"></p><p>结果一模一样</p><p>看着唬人 实则非常简单。</p><h1 id="具体结果"><a href="#具体结果" class="headerlink" title="具体结果"></a>具体结果</h1><p>最后还需要一点小小改动。<br><img src="https://s2.loli.net/2025/08/15/OSkZxvBtWD7UaCH.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AST_通用插件</title>
      <link href="/2025/08/14/AST-%E9%80%9F%E8%AE%B0/"/>
      <url>/2025/08/14/AST-%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哦~这个密码无效。请检查后再试一次。" data-whm="哎呀，这些解密的内容可能已被更改，但你仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="73666b37e4014140409c0350e3748c44f9ff63a2a69ddb5b0afad37193f627a5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章已被作者加密，请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> AST学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 用Jenv安装多个Java环境</title>
      <link href="/2025/03/26/Mac-%E7%94%A8Jenv%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAJava%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/03/26/Mac-%E7%94%A8Jenv%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAJava%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac使用Jenv-安装多个Java环境"><a href="#Mac使用Jenv-安装多个Java环境" class="headerlink" title="Mac使用Jenv 安装多个Java环境"></a>Mac使用Jenv 安装多个Java环境</h1><h1 id="安装Jenv"><a href="#安装Jenv" class="headerlink" title="安装Jenv"></a>安装Jenv</h1><p>通过Homebrew快速安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install jenv<br></code></pre></td></tr></table></figure><p>配置环境变量到Shell配置文件（如<code>.zshrc</code>或<code>.bash_profile</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h1 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h1><p><a href="https://www.azul.com/core-post-download">https://www.azul.com/core-post-download</a></p><p>选择 自己相应的 版本 一键式安装接口</p><h1 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h1><ul><li><p>下载 <code>.dmg</code> 文件并安装，默认路径为：<br><code>/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home</code></p></li><li><p><strong>添加至 jenv 管理</strong></p><ul><li><pre><code class="language-bash">jenv add /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Homejenv versions  # 验证是否显示 &quot;1.8&quot;</code></pre></li></ul></li></ul><h1 id="安装完成即可"><a href="#安装完成即可" class="headerlink" title="安装完成即可"></a>安装完成即可</h1><p>如下图所示</p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 自定义配置操作</title>
      <link href="/2025/03/24/Vscode-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/"/>
      <url>/2025/03/24/Vscode-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-自定义配置"><a href="#vscode-自定义配置" class="headerlink" title="vscode 自定义配置"></a>vscode 自定义配置</h1><h1 id="必装插件与配置"><a href="#必装插件与配置" class="headerlink" title="必装插件与配置"></a>必装插件与配置</h1><ol><li><p><strong>Go，python</strong>——跟着你要运行代码来</p></li><li><p><strong>Code Runner</strong> ——代码运行工具</p></li><li><p><strong>IntelliJ IDEA Keybindings</strong>——使用IDEA快捷键</p></li><li><p><strong>Pylance</strong>——修正python语法与感知</p></li><li><p><strong>Black Formatter</strong>——代码格式化工具</p></li><li><p><strong>Better Comments</strong> ——美化注释的插件</p></li><li><p><strong>Bracket Pair Colorizer 2</strong>——找大括号 逆向者</p></li><li><p><strong>Material Theme Icons</strong>——文件图标</p></li><li><p><strong>Error Gutters</strong>——错误提示</p></li><li><p><strong>Code Spell Checker</strong> ——代码单词检查</p></li><li><p><strong>open in browser</strong>——可以打开HTML</p></li><li><p><strong>Postcode</strong> ——集成的Postman</p></li><li><p><strong>Project Manager</strong>——项目管理工具</p></li><li><p><strong>koroFileHeader</strong>——自动生成头部注释</p><ol><li><pre><code class="language-js">&quot;fileheader.customMade&quot;: &#123;    &quot;Author&quot;: &quot;一尾流莺&quot;,    &quot;Description&quot;: &quot;&quot;,    &quot;Date&quot;: &quot;Do not edit&quot;,    &quot;LastEditTime&quot;: &quot;Do not edit&quot;,    &quot;FilePath&quot;: &quot;&quot;  &#125;,    &quot;fileheader.cursorMode&quot;: &#123;    &quot;description&quot;: &quot;&quot;,    &quot;param&quot;: &quot;&quot;,    &quot;return&quot;: &quot;&quot;  &#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">15</span>. <br><br># 保存即格式化<br><br>```json<br>&#123;<br>  <span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">true</span>,<br> <span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span>  // 指定默认格式化工具（如Prettier）<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ol></li></ol><p>也可以根据语言</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Mac中自动选择Python环境"><a href="#Mac中自动选择Python环境" class="headerlink" title="Mac中自动选择Python环境"></a>Mac中自动选择Python环境</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;python.condaPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/hybpjx/miniconda3/bin/conda&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.profiles.osx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;bash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-comment">// 加载登录 shell 的环境变量</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;zsh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zsh&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.defaultProfile.osx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zsh&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code-runner.executorMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;javascript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source ~/.nvm/nvm.sh &amp;&amp; node&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;zig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zig run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;objective-c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;python.pythonPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env:CONDA_PREFIX&#125;/bin/python&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;perl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;perl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl6&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ruby&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;powershell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell -ExecutionPolicy ByPass -File&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmd /c&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;shellscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fsharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsi&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;csharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scriptcs&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;vbscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cscript //Nologo&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-node&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;coffeescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffee&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scala&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scala&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;julia&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;crystal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;crystal&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ocaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rscript&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;applescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;osascript&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;clojure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lein exec&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;haxe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rust&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;racket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;racket&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csi -script&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ahk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autohotkey&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;autoit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autoit3&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pascal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;haskell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;runghc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;nim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nim compile --verbosity:0 --hints:off --run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lisp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sbcl --script&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;kit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kitc --run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;v&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass --style expanded&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss --style expanded&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;FortranFreeForm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fortran-modern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fortran_fixed-form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fortran&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; sml $fileName&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;mojo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mojo run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;erlang&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;escript&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;spwn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;spwn build&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pkl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;gleam&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gleam run -m $fileNameWithoutExt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>akamai 某环境参数VMP逆向</title>
      <link href="/2025/03/10/akamai-%E6%9F%90%E7%8E%AF%E5%A2%83%E5%8F%82%E6%95%B0VMP%E9%80%86%E5%90%91/"/>
      <url>/2025/03/10/akamai-%E6%9F%90%E7%8E%AF%E5%A2%83%E5%8F%82%E6%95%B0VMP%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>懂得都懂 直接开干。本文出口入口值会有些许区别 网站值没有固定。<br>仅分析部分算法。</p><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>如下图 断点打在 第一个wPz 生成的地方。看 jsz</p><p><img src="https://s2.loli.net/2025/02/21/C1ixLR67QuHUNWY.png"></p><p>目标: 获取jsz中的mst的dvc。如下图所示</p><p><img src="https://s2.loli.net/2025/02/21/NeacpEFJmfndT4o.png"></p><p>往上找，找到jsz生成的地方 如下图所示</p><p><img src="https://s2.loli.net/2025/02/21/EhTqgQUK6wIDszm.png"></p><p>然后右边看作用域。找到与之匹配的 “dvc”</p><p><img src="https://s2.loli.net/2025/02/21/FtZfD178HqMpSWU.png"></p><p>然后继续往上找 找到jzz的生成处</p><p><img src="https://s2.loli.net/2025/02/21/edLzZA8EvtYb5C2.png"></p><p>经过分析下面这段代码即使生成dvc的位置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">pL</span>(x4, [<br>    <span class="hljs-title function_">VQ</span>()[<span class="hljs-title function_">AJ</span>(xg)](<span class="hljs-title class_">FCz</span>, lE, <span class="hljs-variable constant_">SL</span>),<br>    <span class="hljs-title function_">N8</span>()<br>      [<span class="hljs-title function_">CR</span>(xV)].<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-title class_">Gr</span>, lt, zdz])<br>      [<span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>)](<br>        <span class="hljs-variable constant_">GI</span>,<br>        <span class="hljs-title class_">Jj</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(<span class="hljs-title class_">Rg</span>)], <span class="hljs-title function_">cg</span>(<span class="hljs-title function_">N8</span>()[<span class="hljs-title function_">CR</span>(xV)](nR, lt, zdz), [][[]]))<br>          ? <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(s3)](gCz, vZ, sHz, hR, <span class="hljs-title class_">Bx</span>(<span class="hljs-title class_">Bx</span>(<span class="hljs-variable constant_">F8</span>)))<br>          : <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Lt</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">Cx</span>)<br>      )<br>      [<br>        <span class="hljs-title function_">l8</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(zx)], <span class="hljs-title function_">cg</span>(<span class="hljs-string">&quot;&quot;</span>, [][[]]))<br>          ? <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>)<br>          : <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(wO)].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, bI, bJ)<br>      ](<span class="hljs-title class_">Bh</span>, <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)](<span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Hj</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">St</span>))<br>      [<br>        <span class="hljs-title class_">Jj</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(fZ)], <span class="hljs-string">&quot;undefined&quot;</span>)<br>          ? <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(wO)](<span class="hljs-title class_">PCz</span>, tO)<br>          : <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>)<br>      ](bMz),<br>  ])<br><br></code></pre></td></tr></table></figure><p>然后我们分析下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">VQ</span>()[<span class="hljs-title function_">AJ</span>(xg)](<span class="hljs-title class_">FCz</span>, lE, <span class="hljs-variable constant_">SL</span>) = <span class="hljs-string">&#x27;dvc&#x27;</span><br><span class="hljs-variable constant_">GI</span> = <span class="hljs-string">&quot;a3iea3adfa3eeYe2yi2a&quot;</span><br><br><span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>) = <span class="hljs-string">&#x27;concat&#x27;</span><br><br><span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Lt</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">Cx</span>) = <span class="hljs-string">&quot;,&quot;</span><br><br><span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)](<span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Hj</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">St</span>) = <span class="hljs-string">&quot;,&quot;</span><br><br>bMz = <span class="hljs-string">&#x27;l+h+f+b+i+j+k+a+c+g+e+d+&#x27;</span><br><br></code></pre></td></tr></table></figure><p>这样大概的逻辑就很清楚了</p><p>如下图是入口地方</p><p><img src="https://s2.loli.net/2025/02/21/Jw8WxNpfSvrdQU5.png"></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>这里其实都不用看这个 随便看看 应该就知道哪个地方是重点</p><p>先监控下这个PT里的值</p><p><img src="https://s2.loli.net/2025/02/26/rJposFbmOD436cn.png"></p><p>然后再监控下入口的这个传参值</p><p><img src="https://s2.loli.net/2025/02/26/MumlLrOwC4JQbhe.png"></p><p>还需要看看入口的这个值 是什么</p><p><img src="https://s2.loli.net/2025/02/26/evjRLhFgli5JYBS.png"></p><p>然后就是<strong>重点</strong></p><p><img src="https://s2.loli.net/2025/02/26/sM7GQOLgokEeWNK.png"></p><p>这个值会出来</p><p><strong>先把入参找出来 本文是[2, ‘16|24’, 0, 0]</strong></p><h1 id="第一个值"><a href="#第一个值" class="headerlink" title="第一个值"></a>第一个值</h1><p>刷新完 看看日志。</p><p>挨个分析</p><p><img src="https://s2.loli.net/2025/02/26/wzrCo1cMtY2yN7K.png"></p><p>确定是UA 可以暂时不用分析了。</p><h1 id="第二个值"><a href="#第二个值" class="headerlink" title="第二个值"></a>第二个值</h1><p>如下图</p><p><img src="https://s2.loli.net/2025/02/26/nVIy1mAgx7DeoOc.png"></p><p>不讲了。 但是这个值得记录下来 2482411364</p><p>这里分享个第一个算法吧。 其他的自己努力努力</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">UA</span> =<br>  <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Edg/133.0.0.0&quot;</span>;<br><span class="hljs-keyword">let</span> startTs = <span class="hljs-number">1740487469858</span>;<br><br><span class="hljs-keyword">let</span> frist = <span class="hljs-string">&quot;0&quot;</span> + startTs.<span class="hljs-title function_">toString</span>() + <span class="hljs-variable constant_">UA</span>.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">32</span>) + <span class="hljs-string">&quot;0&quot;</span>;<br><br><span class="hljs-keyword">let</span> r2 = <span class="hljs-number">5381</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; frist.<span class="hljs-property">length</span>; i++) &#123;<br>  r2 = (r2 * <span class="hljs-number">33</span>) ^ frist.<span class="hljs-title function_">charCodeAt</span>(i);<br>&#125;<br>r2 = r2 &gt;&gt;&gt; <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;r2&quot;</span>, r2);<br><br></code></pre></td></tr></table></figure><h1 id="第三个值"><a href="#第三个值" class="headerlink" title="第三个值"></a>第三个值</h1><p>如下图</p><p><img src="https://s2.loli.net/2025/02/26/V52ydgUxzu9pG8o.png"></p><p>不讲了</p><p>把这个值也记录下来 10010011111101101001011101100100</p><h1 id="第四个值"><a href="#第四个值" class="headerlink" title="第四个值"></a>第四个值</h1><p>第四个稍微就有点多了 坑点也增多</p><p><img src="https://s2.loli.net/2025/02/26/UzoDp8QZcbtqHkl.png"></p><p>如下 入参的某个值 charCodeAt了记录下来</p><p><img src="https://s2.loli.net/2025/02/26/q3TJOWcy2BS74tM.png"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[...<span class="hljs-string">&quot;214|160&quot;</span>].<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">char</span>=&gt;</span>char.charCodeAt())<br><br></code></pre></td></tr></table></figure><p>这个 214 和 160是哪来的呢？</p><p>看入参的第二个值</p><p>拼接逻辑如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;16|24&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>][<span class="hljs-number">0</span>].<span class="hljs-title function_">toString</span>() + [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;16|24&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>][<span class="hljs-number">1</span>].<span class="hljs-title function_">toString</span>() + [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;16|24&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>][<span class="hljs-number">2</span>].<span class="hljs-title function_">toString</span>()<br><br></code></pre></td></tr></table></figure><p>继续网上看</p><p>可以发现 有个固定值 split 并且固定值 每次都经过了一些判断 并且 变成了新的一个值。</p><p><img src="https://s2.loli.net/2025/02/26/yRHo7V3seaIFdb4.png"></p><p>这里的逻辑和第四个值没啥关系 但是也还是需要搞出来。</p><p>如下图 得到最终值 以及一些算法 可以反推出来</p><p><img src="https://s2.loli.net/2025/02/26/wiCSps61JcGavYq.png"></p><p>这里细节不多说了 最终值 1588180537</p><h1 id="第五个值"><a href="#第五个值" class="headerlink" title="第五个值"></a>第五个值</h1><p>如下图</p><p><img src="https://s2.loli.net/2025/02/26/3WOINpXVBjAbLsd.png"></p><p>生成如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-number">4070591901</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>重点就是 4070591901 怎么来的</p><p>不讲了 网上看看 有些坑 自己注意下就好了。</p><h1 id="第六个"><a href="#第六个" class="headerlink" title="第六个"></a>第六个</h1><p>这个 是最难的 也是最麻烦的</p><p><img src="https://s2.loli.net/2025/02/26/NE3K2gi6JxwbL9r.png"></p><p>简单说下</p><p>这里分两个 长的字符串+短的字符串</p><h2 id="长"><a href="#长" class="headerlink" title="长"></a>长</h2><p><img src="https://s2.loli.net/2025/02/26/5YWuQ2MhdKFw1TJ.png"></p><p>基于 两个传参的互相相加 然后charAt互相相加</p><h2 id="短"><a href="#短" class="headerlink" title="短"></a>短</h2><p>太麻烦，有空了再说 单开贴 这个要搞的话日志要打全。</p><p>最好挨个跟栈去看控制流。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>最后验证下结果</p><p>传入传参与入参</p><p>这是代码生成的值</p><p><img src="https://s2.loli.net/2025/02/26/mHYfxU75eNzQli1.png"></p><p>这是网站生成的值</p><p><img src="https://s2.loli.net/2025/02/26/M2qpQPHb8fIxE1Y.png"></p><p>教程帮助 感谢我7</p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 基础操作指南</title>
      <link href="/2025/03/10/Mac-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/10/Mac-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="链接Linux"><a href="#链接Linux" class="headerlink" title="链接Linux"></a>链接Linux</h1><p>ssh 用户名@ip地址</p><p>输入密码</p><h1 id="sftp传输文件"><a href="#sftp传输文件" class="headerlink" title="sftp传输文件"></a>sftp传输文件</h1><p>上传</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">sftp&gt; put <span class="hljs-string">&quot;本地绝对路径&quot;</span> linux绝对路径<br></code></pre></td></tr></table></figure><p>下载</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">get <span class="hljs-string">&quot;本地绝对路径&quot;</span> linux绝对路径<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Window Server 激活流程</title>
      <link href="/2025/01/08/Window-Server-%E6%BF%80%E6%B4%BB%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/01/08/Window-Server-%E6%BF%80%E6%B4%BB%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Window-server-激活流程"><a href="#Window-server-激活流程" class="headerlink" title="Window server 激活流程"></a>Window server 激活流程</h1><h1 id="页面窗口激活"><a href="#页面窗口激活" class="headerlink" title="页面窗口激活"></a>页面窗口激活</h1><p>即正常激活 </p><ol><li>断网离线</li><li>输入激活码</li><li>联网</li><li>激活成功</li></ol><h1 id="命令行激活"><a href="#命令行激活" class="headerlink" title="命令行激活"></a>命令行激活</h1><p>输入命令</p><p>1、右键开始按钮，在快捷菜单点击命令提示符(管理员)，或者Windows PowerShell(管理员)；</p><p>2、卸载产品密钥命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slmgr.vbs /upk<br></code></pre></td></tr></table></figure><p>按回车确定，卸载之前的密钥，弹出窗口显示“成功地卸载了产品密钥”；【如果提示找不到密钥，不用管，直接跳到下一步】</p><p>3.安装产品密钥命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slmgr /ipk xxxxxxxxx<br></code></pre></td></tr></table></figure><p>按回车执行，弹出窗口显示“成功地安装了产品密钥”。这个密钥是企业系统用户密钥，家庭版或者专业版请百度搜索；</p><p>4.设置KMS服务器命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slmgr /skms zh.us.to<br></code></pre></td></tr></table></figure><h1 id="报错-0xC004F069"><a href="#报错-0xC004F069" class="headerlink" title="报错 0xC004F069"></a>报错 0xC004F069</h1><p>如果是评估版本，则需要先把评估版本升级为正式版本，才能正确的使用。</p><p>1、右键开始按钮，在快捷菜单点击命令提示符(管理员)，或者Windows PowerShell(管理员)；</p><p>2、输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">DISM /online /Get-CurrentEdition<br><br>DISM /online /Set-Edition:这一步输入上层需要的当前版本 /ProductKey:XXXXX-XXXXX-XXXXX-XXXXX-XXXXX /AcceptEula<br></code></pre></td></tr></table></figure><p>正常应该是如下流程</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">开始升级组件…<br>开始安装产品密钥…<br>产品密钥安装已完成。<br><br>正在删除程序包 Microsoft-Windows-ServerDatacenterEvalEdition31bf3856ad364e35amd64~~<span class="hljs-number">10.0</span><span class="hljs-number">.14393</span><span class="hljs-number">.0</span><br><span class="hljs-string">[100.0%]</span><br>组件升级已完成。<br></code></pre></td></tr></table></figure><p>如果这一步依然不行</p><p>访问如下链接<a href="https://massgrave.dev/">Microsoft Activation Scripts (MAS) | MAS</a></p><ol><li>打开 PowerShell（不是 CMD）。为此，请右键单击 Windows 开始菜单并选择 PowerShell 或终端。</li><li>复制并粘贴下面的代码，然后按 Enter 键</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">irm https://get.activated.win | iex<br></code></pre></td></tr></table></figure><p>选择6 改变版本 </p><p>如下图即成功</p><p><img src="https://s2.loli.net/2025/01/08/MhiwU1Gxrz6WfAj.png"></p><p>后面完成即正常激活即可</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>h5st 5.0逆向分析流程</title>
      <link href="/2025/01/01/%E6%9F%90%E4%B8%9Ch5st5.0%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/01/01/%E6%9F%90%E4%B8%9Ch5st5.0%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="目标网站"><a href="#目标网站" class="headerlink" title="目标网站"></a>目标网站</h1><blockquote><p>aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAwNzcxODA5MTAuaHRtbA&#x3D;&#x3D;</p></blockquote><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>直接搜索ParamsSign 找到这个融合接口的地方</p><p><img src="https://s2.loli.net/2024/12/24/P2dzYbXTEcihjDs.png"></p><p>后续直接搜索这个Psign即可</p><p>这里有很多 可以每个都打上断点。也可以根据搜索自己的接口传参打断点。</p><p>这里可以发现 得到的值应该就是新版的h5st的值。</p><p><img src="https://s2.loli.net/2024/12/24/Uw216GDQZrim4Yq.png"></p><p><del>这里直接反推另辟蹊径 去把这个new ParamsSign给补了。</del></p><p><del>然后给他全扣出来，伪造出来 放到浏览器执行就行了。</del></p><blockquote><p> 这里新版直接扣这个ParamsSign 返回的是null。</p><p>看了下接口校验。校验强的接口，已经改成了最新版，弱的接口仍然还是这个ParamsSign.</p></blockquote><p>如下图所示位置</p><p>可以看到 new 三个实例都可以，分别是ParamsSign、ParamsSignLite、ParamsSignMain</p><p><img src="https://s2.loli.net/2024/12/24/Yp9VyIxOCPbcWin.png"></p><p>这里分别声明，可以发现第一个走的是老的逻辑，第二个返回的是未定义。第三个是一套新的流程。</p><p>这里总结下：</p><ul><li><p>强校验接口的老逻辑代码后续依然会走到新的流程里。</p></li><li><p>弱校验接口会走老流程。估计5.0 最近会改。</p></li></ul><p>这里不管了。直接全部封装好。只不过调用逻辑 改成新的流程。</p><p>改了下 然后跑下发现可以。对比了下长度也是一样的。</p><p><img src="https://s2.loli.net/2024/12/24/14UTQAuRjodzEJn.png"></p><h1 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h1><p>这里我们先补环境吧。先把node伪造出来</p><p>复制上文到node中。</p><p>这里原型挺多的，直接用v-jstools一把梭</p><p><img src="https://s2.loli.net/2024/12/24/D9nX3C8lI2ircuV.png"></p><p>补完然后会报一个 ：  Cannot set property Symbol(Symbol.toStringTag) of #<Object> which has only a getter</p><p>直接给他改了 或者把他重新定义一下</p><p>如下 声明下面添加下列代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(_$MF, <span class="hljs-title function_">_$B4</span>(<span class="hljs-title class_">Et</span>(<span class="hljs-number">0xd7</span>)), &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>然后跑出来应该就有值了</p><p>但是看了下长度  明显对不上。</p><p><img src="https://s2.loli.net/2024/12/24/Gck6KtVaHJDx8fg.png"></p><p>这里就看源码吧。看看是什么没补的。</p><p>这里生成处如下：</p><p><img src="https://s2.loli.net/2024/12/24/3ZryfpYIn8RcqK1.png"></p><p>这个 <strong>_$ms</strong> 是一个switch流。暂时先不管。看看传参。</p><p><strong>浏览器：</strong></p><p><img src="https://s2.loli.net/2024/12/24/VeLwyFXjpHGu3on.png"></p><p><strong>Node：</strong></p><p><img src="https://s2.loli.net/2024/12/24/HlP4hy2aVtLEGFC.png"></p><p>这里发现 传参的这个$clt() 长度对不上。</p><p>这里发现**_$clt()** 也是个swtich流。</p><p><img src="https://s2.loli.net/2024/12/24/gaCLu4HctneMXJm.png"></p><p>那这里我们挨个看吧。</p><h2 id="clt"><a href="#clt" class="headerlink" title="_$clt()"></a>_$clt()</h2><p>这里直接插装吧。</p><p>然后发现这里。collect envCollect 应该就是收集环境值的地方。</p><p><img src="https://s2.loli.net/2024/12/24/9HFKAZlde6Xcki4.png"></p><p>那这里我们再看下node</p><p><img src="https://s2.loli.net/2024/12/24/LhDZqyQevkrnaVW.png"></p><p>这里挨个对比啊 然后修改即可。</p><p>全部修改完毕。然后发现 长度终于一致了。</p><p><img src="https://s2.loli.net/2024/12/24/teKHdi2lY6Co5PS.png"></p><p>然后全部封装请求。</p><p>发现 请求出来 依然是403.</p><p><img src="https://s2.loli.net/2024/12/24/FwBIyZc4DTxEd9r.png"></p><p>虽然长度对了。但是请求好像依然有问题。</p><p>刚刚只看了传参的值没看生成函数的switch流。那这里继续回去看看。</p><h2 id="ms"><a href="#ms" class="headerlink" title="_$ms"></a><strong>_$ms</strong></h2><p>我们插装看看值。</p><p><img src="https://s2.loli.net/2024/12/24/MI38kdg21Pt6ESx.png"></p><p>这段代码还是挺简单的。</p><p>同比，我们对比node中的插装值。</p><p><img src="https://s2.loli.net/2024/12/24/zGZgXIoRLkia1wN.png"></p><p><img src="https://s2.loli.net/2024/12/24/F6pb4hziV9DJM7K.png"></p><p>这里发现 好像node中的是tk04，浏览器中的是 tk03。这个的差别是什么 大家应该都知道。</p><p>这里需要请求request_algo。把tk 还有一些东西 替换 一下再请求看看。</p><p>这里还要看下这个逻辑是从哪进的. 把这个sign也插一波</p><p>执行出来的顺序是[0,5,6,1,2,3] 所以我们去看这个this._$rds();</p><p>后面看到 rds 做了一些检测 逻辑因此走的tk04，这里可以选择直接修改上层。</p><blockquote><p> 后面修改完了之后依然是403 即使抓包直接使用都不行，测试下来原来是tls…  修改下就可以了</p></blockquote><p>最后修改变成tk03就可以用了 </p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://s2.loli.net/2024/12/24/Zdh9H5LebQ8GT6W.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed API使用大全</title>
      <link href="/2024/12/08/Xposed-API%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
      <url>/2024/12/08/Xposed-API%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Xposed常用HOOK方法"><a href="#Xposed常用HOOK方法" class="headerlink" title="Xposed常用HOOK方法"></a>Xposed常用HOOK方法</h1><p>不讲废话</p><h1 id="hook修改静态方法"><a href="#hook修改静态方法" class="headerlink" title="hook修改静态方法"></a>hook修改静态方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.setBooleanField(<span class="hljs-string">&quot;对象&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-literal">false</span>);<br>XposedHelpers.setIntField(<span class="hljs-string">&quot;对象&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-number">1</span>);<br>XposedHelpers.setObjectField(<span class="hljs-string">&quot;对象&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-string">&quot;值&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="hook-构造函数"><a href="#hook-构造函数" class="headerlink" title="hook 构造函数"></a>hook 构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookConstructor(clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>   &#125;<br>&#125;);<br>XposedHelpers.findAndHookConstructor(clazz, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="hook-普通方法"><a href="#hook-普通方法" class="headerlink" title="hook 普通方法"></a>hook 普通方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="hook-复杂函数"><a href="#hook-复杂函数" class="headerlink" title="hook 复杂函数"></a>hook 复杂函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>,<br>        String[][].class,<br>        String.class,<br>        Map.class,<br>        ArrayList.class,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br> <br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>,<br>        <span class="hljs-string">&quot;[[Ljava.lang.String&quot;</span>,<br>        <span class="hljs-string">&quot;java.lang.String&quot;</span>,<br>        Class.forName(<span class="hljs-string">&quot;java.utils.Map&quot;</span>),<br>        Class.forName(<span class="hljs-string">&quot;java.util.ArrayList&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="hook-自定义类参数"><a href="#hook-自定义类参数" class="headerlink" title="hook 自定义类参数"></a>hook 自定义类参数</h1><p>获取类的方式</p><blockquote><ol><li>类名.class  </li><li>对象.getClass()  </li><li>class.forName()  </li><li>xposedHelpers.findClass(“”,””)</li><li>new DexClassLoader(“”,””,””,””).loadClass() .&#x2F;&#x2F; 加载类 用于脱壳加固</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类名.class  对象.getClass()  class.forName()  xposedHelpers.findClass(&quot;&quot;,&quot;&quot;)</span><br>Class&lt;?&gt; JiaZaiClazz = lpparam.classLoader.loadClass(<span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span>);<br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <br>        <span class="hljs-string">&quot;[[Ljava.lang.String&quot;</span>,<br>        <span class="hljs-string">&quot;java.lang.String&quot;</span>,<br>        JiaZaiClazz,<span class="hljs-comment">// 加载的自定义类</span><br>        Class.forName(<span class="hljs-string">&quot;java.utils.Map&quot;</span>),<br>        Class.forName(<span class="hljs-string">&quot;java.util.ArrayList&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><p>或者用上面的前四种的方法。</p><p>简单示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; JiaZaiClazz = Class.forName(<span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span>, <span class="hljs-comment">// 路径类名</span><br>                                     <span class="hljs-literal">false</span>,<span class="hljs-comment">// 是否初始化，一般都是false</span><br>                                     lpparam.classLoader<span class="hljs-comment">// 这个意思是用哪个加载器加载这个类</span><br>                                    );<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; JiaZaiClazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span>,<span class="hljs-string">&quot;lpparam.classLoader&quot;</span>);<br></code></pre></td></tr></table></figure><p>还有一种特殊的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span> <span class="hljs-comment">// 直接输入即可</span><br></code></pre></td></tr></table></figure><h1 id="hook-替换函数"><a href="#hook-替换函数" class="headerlink" title="hook 替换函数"></a>hook 替换函数</h1><p>即改掉整个函数，不在提前或者之后hook</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;替换的函数输出&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="hook内部类"><a href="#hook内部类" class="headerlink" title="hook内部类"></a>hook内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.xxx.类名$内部类名&quot;</span>, lpparam.classLoader),<br>                <span class="hljs-string">&quot;内部类的方法名&quot;</span>,<br>                String.class,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                    &#125;<br>                &#125;<br>        );<br></code></pre></td></tr></table></figure><h1 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.xxx.类名$内部类名&quot;</span>, lpparam.classLoader),<br>        <span class="hljs-string">&quot;内部类的方法名&quot;</span>,<br>        String.class,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                XposedHelpers.callMethod(clazz.newInstance(),<span class="hljs-string">&quot;具体方法&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="打印堆栈"><a href="#打印堆栈" class="headerlink" title="打印堆栈"></a>打印堆栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">log.e(<span class="hljs-string">&quot;标签&quot;</span>,<span class="hljs-string">&quot;打印的数据&quot;</span>,,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;打印的堆栈&quot;</span>));<br></code></pre></td></tr></table></figure><h1 id="Java-反射大法"><a href="#Java-反射大法" class="headerlink" title="Java 反射大法"></a>Java 反射大法</h1><h2 id="反射调用方法"><a href="#反射调用方法" class="headerlink" title="反射调用方法"></a>反射调用方法</h2><blockquote><ol><li>找到类</li><li>找到字段和方法</li><li>修改字段或者调用方法</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>,<span class="hljs-literal">false</span>,ClassLoader);<br>Class.forName(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>)<br>类名.class<br>对象.getClass()<br>Xposed中的findClass<br>classLoader中的LoadClass<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>  lpparam.classLoader.loadClass(<span class="hljs-string">&quot;&quot;</span>);<br><br>XposedHelpers.findClass(<span class="hljs-string">&quot;&quot;</span>,lpparam.classLoader);<br>clazz.getClass();<br>String.class;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> lpparam.classLoader.loadClass(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">DemoClazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;xxx.xxx.xxx&quot;</span>);<br><span class="hljs-comment">// DemoClazz.getMethod(&quot;&quot;);</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">DeclareMethodName</span> <span class="hljs-operator">=</span> DemoClazz.getDeclaredMethod(<span class="hljs-string">&quot;方法名称&quot;</span>);<br>DeclareMethodName.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 给权限</span><br>DeclareMethodName.invoke(clazz.newInstance());<br></code></pre></td></tr></table></figure><h2 id="反射调用属性"><a href="#反射调用属性" class="headerlink" title="反射调用属性"></a>反射调用属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Class</span> clazz = lpparam.<span class="hljs-property">classLoader</span>.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-title class_">Class</span> <span class="hljs-title class_">DemoClazz</span> = <span class="hljs-title class_">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;xxx.xxx.xxx&quot;</span>);<br><span class="hljs-comment">// 获取</span><br><span class="hljs-title class_">Field</span> <span class="hljs-title class_">DeclaredFieldName</span> = <span class="hljs-title class_">DemoClazz</span>.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;对象&quot;</span>);<br><br><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">getType</span>();<span class="hljs-comment">// 获取字段类型</span><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">getName</span>(); <span class="hljs-comment">// 获取字段名称</span><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">getModifiers</span>();<span class="hljs-comment">// 获取访问修饰符</span><br><br><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 给权限</span><br><span class="hljs-title class_">Object</span> insClass = clazz.<span class="hljs-title function_">newInstance</span>();<br><span class="hljs-title class_">Object</span> <span class="hljs-variable constant_">GD</span> = <span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">get</span>(insClass);<br><span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-string">&quot;取值 MSG:&quot;</span> + (<span class="hljs-title class_">String</span>) <span class="hljs-variable constant_">GD</span>);<br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">set</span>(insClass, <span class="hljs-string">&quot;值&quot;</span>);<br><span class="hljs-title class_">Object</span> <span class="hljs-variable constant_">SD</span> = <span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">get</span>(insClass);<br><span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-string">&quot;设置 MSG:&quot;</span> + (<span class="hljs-title class_">String</span>) <span class="hljs-variable constant_">SD</span>);<br></code></pre></td></tr></table></figure><h2 id="遍历所有的方法和字段"><a href="#遍历所有的方法和字段" class="headerlink" title="遍历所有的方法和字段"></a>遍历所有的方法和字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!lpparam.processName.equals(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>))<span class="hljs-keyword">return</span>;<br>    Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;com.xiaojianbang.XposedDemo.demo&quot;</span>, lpparam.classLoader);<br>    Method[] md = clazz.getDeclaredMethods(); <span class="hljs-comment">// 获取方法</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i &lt; md.length;i++)&#123;<br>        Log.d(<span class="hljs-string">&quot;遍历&quot;</span>,md[i].toString());<br>    &#125;<br><br>    Field[] fd = clazz.getDeclaredFields(); <span class="hljs-comment">// 获取字段</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i &lt; fd.length;i++)&#123;<br>        Log.d(<span class="hljs-string">&quot;遍历&quot;</span>,fd[i].toString());<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="遍历所有内部类"><a href="#遍历所有内部类" class="headerlink" title="遍历所有内部类"></a>遍历所有内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">clazz.getDeclaredClasses();  <span class="hljs-comment">// 遍历所有类</span><br>clazz.getDeclaredConstructors();<span class="hljs-comment">// 遍历所有构造函数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;[] cls = clazz.getDeclaredClasses();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cls.length; i++) &#123;<br>      Log.d(TAG, <span class="hljs-string">&quot;正在遍历内部类&quot;</span>);<br>      Method[] innerMDs = clazz.getDeclaredMethods(); <span class="hljs-comment">// 获取方法</span><br>      <span class="hljs-keyword">for</span> (Method innerMD : innerMDs) &#123;<br>          Log.d(<span class="hljs-string">&quot;遍历&quot;</span>, innerMD.toString());<br>      &#125;<br><br>      Field[] innerFDs = clazz.getDeclaredFields(); <span class="hljs-comment">// 获取字段</span><br>      <span class="hljs-keyword">for</span> (Field innerFD : innerFDs) &#123;<br>          Log.d(<span class="hljs-string">&quot;遍历&quot;</span>, innerFD.toString());<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="遍历所有类"><a href="#遍历所有类" class="headerlink" title="遍历所有类"></a>遍历所有类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>ClassLoader.class,<br><span class="hljs-string">&quot;com.xxx.xx&quot;</span>,<br>String.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>      Log.d(TAG, <span class="hljs-string">&quot;loadClass&quot;</span> + clazz.getName());<br><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="hook所有类中的所有方法"><a href="#hook所有类中的所有方法" class="headerlink" title="hook所有类中的所有方法"></a>hook所有类中的所有方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.hookAllConstructors(); <span class="hljs-comment">// hook所有构造函数</span><br>XposedBridge.hookAllMethods(); <span class="hljs-comment">// hook单个类所有函数</span><br>XposedBridge.hookMethod(); <span class="hljs-comment">// hook 所有函数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>ClassLoader.class,<br><span class="hljs-string">&quot;com.xxx.xx&quot;</span>,<br>String.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();<br><br>    Log.d(TAG, <span class="hljs-string">&quot;loadClass&quot;</span> + clazz.getName());<br>    <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;xxx&quot;</span>)) &#123;<br>        <span class="hljs-keyword">for</span> (Method md : clazz.getDeclaredMethods()) &#123;<br>            XposedBridge.hookMethod(md, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                    <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                    Log.d(TAG, <span class="hljs-string">&quot;Hook_Method：&quot;</span> + md.toString());<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>得到了一个方法 如何判断呢？</p><blockquote><p>for (Method md : clazz.getDeclaredMethods()) </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>ClassLoader.class,<br><span class="hljs-string">&quot;com.xxx.xx&quot;</span>,<br>String.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();<br><br>        Log.d(TAG, <span class="hljs-string">&quot;loadClass&quot;</span> + clazz.getName());<br>        <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;xxx&quot;</span>)) &#123;<br>            <span class="hljs-keyword">for</span> (Method md : clazz.getDeclaredMethods()) &#123;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> md.getModifiers();<br>                <span class="hljs-keyword">if</span> (!Modifier.isAbstract(mod)  <span class="hljs-comment">// 是不是一个抽象类 判断</span><br>                        &amp;&amp; !Modifier.isNative(mod)  <span class="hljs-comment">// 是不是一个Native方法 判断</span><br>                        &amp;&amp; !Modifier.isInterface(mod)) <span class="hljs-comment">// 是不是一个Interface接口</span><br>                &#123;<br>                    XposedBridge.hookMethod(md, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                            Log.d(TAG, <span class="hljs-string">&quot;Hook_Method：&quot;</span> + md.toString());<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (md.getName().contains(<span class="hljs-string">&quot;xxxx&quot;</span>)) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; param.args.length; i++) &#123;<br>        Log.d(TAG, param.args[i].getClass().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自吐算法模块开发"><a href="#自吐算法模块开发" class="headerlink" title="自吐算法模块开发"></a>自吐算法模块开发</h1><p>私人仓库： <a href="https://github.com/hybpjx/HookEncryptXposed">https://github.com/hybpjx/HookEncryptXposed</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hybpjx.hookencrypt;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.PublicKey;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.Mac;<br><br><span class="hljs-keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XC_MethodHook;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XposedBridge;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XposedHelpers;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hook_Encrypt&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;Hooking...&quot;</span>);<br><br>        <span class="hljs-comment">// hook md5 Sha 的 digest方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.MessageDigest&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;digest&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> (MessageDigest) param.thisObject; <span class="hljs-comment">// 得到对象</span><br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> md.getAlgorithm(); <span class="hljs-comment">// 获取加密名</span><br>                            <span class="hljs-keyword">if</span> (param.args.length &gt;= <span class="hljs-number">1</span>) &#123;<br>                                <span class="hljs-type">byte</span>[] params = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(params);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">dataHex</span> <span class="hljs-operator">=</span> byteArray2HexString(params);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + data);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + dataHex);<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] res = (<span class="hljs-type">byte</span>[]) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultHex: &quot;</span> + resHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultBase64: &quot;</span> + resBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// hook md5的 update方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.MessageDigest&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;update&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> (MessageDigest) param.thisObject;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> md.getAlgorithm();<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">byte</span>[] params = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">3</span>) &#123;<br>                                offset = <span class="hljs-number">0</span>;<br>                                len = params.length;<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                                len = (Integer) param.args[<span class="hljs-number">2</span>];<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] input = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>                            System.arraycopy(params, offset, input, <span class="hljs-number">0</span>, len);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(input);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">dataHex</span> <span class="hljs-operator">=</span> byteArray2HexString(input);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; update data: &quot;</span> + data);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; update dataHex: &quot;</span> + dataHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;MessageDigest.update Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook mac算法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.Mac&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;doFinal&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-comment">// 获取返回值 要 after, 传参要before</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br>                            <span class="hljs-type">Mac</span> <span class="hljs-variable">mac</span> <span class="hljs-operator">=</span> (Mac) param.thisObject;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> mac.getAlgorithm();<br>                            <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">1</span>) &#123;<br>                                <span class="hljs-type">byte</span>[] params = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(params);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">dataHex</span> <span class="hljs-operator">=</span> byteArray2HexString(params);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + data);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + dataHex);<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] res = (<span class="hljs-type">byte</span>[]) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultHex: &quot;</span> + resHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultBase64: &quot;</span> + resBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;crypto.Mac.doFinal Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook 密钥 可以是 DES，3Des，Aes,Mac算法</span><br>        <span class="hljs-comment">// 构造函数 SecretKeySpec 这个方法   https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/index.html?index-filesindex-4.html</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.SecretKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] secretkey = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">2</span>) &#123;<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                                size = (Integer) param.args[<span class="hljs-number">2</span>];<br>                                algoritm = (String) param.args[<span class="hljs-number">3</span>];<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                size = secretkey.length;<br>                                algoritm = (String) param.args[<span class="hljs-number">1</span>];<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] keybyte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>                            System.arraycopy(secretkey, offset, keybyte, <span class="hljs-number">0</span>, size);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyHex</span> <span class="hljs-operator">=</span> byteArray2HexString(keybyte);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(keybyte, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; SecretKey: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(keybyte));<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; SecretKeyHex: &quot;</span> + keyHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; SecretKeyBase64: \n&quot;</span> + keyBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;SecretKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook des的 密钥 https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/index.html?index-filesindex-4.html</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.DESKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] desKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>                            <span class="hljs-type">byte</span>[] deskeybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">1</span>)<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                            System.arraycopy(deskeybyte, offset, desKey, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyHex</span> <span class="hljs-operator">=</span> byteArray2HexString(desKey);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(desKey, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;DESKey: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(desKey));<br>                            Log.d(TAG, <span class="hljs-string">&quot;DESKeyHex: &quot;</span> + keyHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;DESKeyBase64: \n&quot;</span> + keyBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;DESKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook IV向量 AES DES 3DES, Java 加密体系中的一个类，用于提供初始化向量（IV），主要应用于对称加密算法中的分组加密模式，如 CBC、CFB、OFB 等</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.IvParameterSpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] ivbyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">1</span>) &#123;<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                                size = (Integer) param.args[<span class="hljs-number">2</span>];<br>                            &#125; <span class="hljs-keyword">else</span> size = ivbyte.length;<br>                            <span class="hljs-type">byte</span>[] iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>                            System.arraycopy(ivbyte, offset, iv, <span class="hljs-number">0</span>, size);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">IVHex</span> <span class="hljs-operator">=</span> byteArray2HexString(iv);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">IVBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(iv, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;IvParameter: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(iv));<br>                            Log.d(TAG, <span class="hljs-string">&quot;IvParameterHex: &quot;</span> + IVHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;IvParameterBase64: \n&quot;</span> + IVBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;IvParameterSpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook Cipher(RSA,DES,3DES,AES)  https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/index.html?index-filesindex-4.html</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.Cipher&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;doFinal&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-comment">// 只hook了 返回值非int的</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">0</span> &amp;&amp; param.args.length != <span class="hljs-number">1</span> &amp;&amp; param.args.length != <span class="hljs-number">3</span>)<br>                                <span class="hljs-keyword">return</span>;<br>                            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> (Cipher) param.thisObject;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> cipher.getAlgorithm(); <span class="hljs-comment">// 返回算法名称</span><br>                            <span class="hljs-type">byte</span>[] dataAll = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">3</span>) &#123;<br>                                <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (Integer) param.args[<span class="hljs-number">1</span>];<br>                                <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> (Integer) param.args[<span class="hljs-number">2</span>];<br>                                <span class="hljs-type">byte</span>[] dataByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>                                System.arraycopy(dataAll, offset, dataByte, <span class="hljs-number">0</span>, size);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dataByte));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + byteArray2HexString(dataByte));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataBase64: \n&quot;</span> + Base64.encodeToString(dataByte, <span class="hljs-number">0</span>));<br>                            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">1</span>) &#123;<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dataAll));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + byteArray2HexString(dataAll));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataBase64: \n&quot;</span> + Base64.encodeToString(dataAll, <span class="hljs-number">0</span>));<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] res = (<span class="hljs-type">byte</span>[]) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultHex: &quot;</span> + resHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultBase64: \n&quot;</span> + resBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;crypto.Cipher.doFinal Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// Hook 3Des 算法 除了密钥 其他都一样 </span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.DESedeKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] keybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">1</span>)<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                            <span class="hljs-type">byte</span>[] desedeKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">24</span>];<br>                            System.arraycopy(keybyte, offset, desedeKey, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">desedeKeyHex</span> <span class="hljs-operator">=</span> byteArray2HexString(desedeKey);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">desedeKeyBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(desedeKey, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;3DESKey: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(desedeKey));<br>                            Log.d(TAG, <span class="hljs-string">&quot;3DESKeyHex: &quot;</span> + desedeKeyHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;3DESKeyBase64: \n&quot;</span> + desedeKeyBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;DESedeKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook RSA的Base64密钥</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.X509EncodedKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] keybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(keybyte, <span class="hljs-number">0</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteHex</span> <span class="hljs-operator">=</span> byteArray2HexString(keybyte);<br>                            Log.d(TAG, <span class="hljs-string">&quot;X509KeyHex: &quot;</span> + keybyteHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;X509KeyBase64: \n&quot;</span> + keybyteBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;X509EncodedKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook RSA 16进制的密钥</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.PKCS8EncodedKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] keybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(keybyte, <span class="hljs-number">0</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteHex</span> <span class="hljs-operator">=</span> byteArray2HexString(keybyte);<br>                            Log.d(TAG, <span class="hljs-string">&quot;PKCS8KeyHex: &quot;</span> + keybyteHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;PKCS8KeyBase64: \n&quot;</span> + keybyteBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;PKCS8EncodedKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook生成生成公钥对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.KeyFactory&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;generatePublic&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack Dump&quot;</span>));<br>                            <span class="hljs-type">PublicKey</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> (PublicKey) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res.getEncoded());<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">ResBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res.getEncoded(), <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAKey Result:&quot;</span> + res);<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAKey ResultHex:&quot;</span> + resHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAKey ResultBase64:&quot;</span> + ResBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;KeyFactory Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook RSA 16进制的密钥</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.RSAPublicKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">1</span>];<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPublicKey N : &quot;</span> + N.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPublicKey E : &quot;</span> + E.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;RSAPublicKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.RSAPrivateKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">D</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">1</span>];<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPrivateKey N : &quot;</span> + N.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPrivateKey D : &quot;</span> + D.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;RSAPrivateKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byteArray2HexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-type">char</span>[] HEX = &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[bytes.length * <span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> ele : bytes) &#123;<br>            str[j++] = HEX[(ele &amp; <span class="hljs-number">0xF0</span>) &gt;&gt;&gt; <span class="hljs-number">4</span>]; <span class="hljs-comment">//无符号左移</span><br>            str[j++] = HEX[(ele &amp; <span class="hljs-number">0x0F</span>)];<br>        &#125;<br>        <span class="hljs-keyword">return</span> String.valueOf(str);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapyd简易食用教程</title>
      <link href="/2024/12/02/Scrapyd%E7%AE%80%E6%98%93%E9%A3%9F%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/02/Scrapyd%E7%AE%80%E6%98%93%E9%A3%9F%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapyd安装"><a href="#Scrapyd安装" class="headerlink" title="Scrapyd安装:"></a>Scrapyd安装:</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#服务端</span><br>pip install scrapyd  <br><span class="hljs-comment">#客户端</span><br>pip install scrapyd-client<br></code></pre></td></tr></table></figure><p>打开命令行，输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scrapyd</span><br></code></pre></td></tr></table></figure><p>访问 127.0.0.1:6800 即可看到web界面</p><h1 id="部署scrapy项目"><a href="#部署scrapy项目" class="headerlink" title="部署scrapy项目"></a>部署scrapy项目</h1><p>在scrapy项目目录下，有一个scrapy.cfg的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Automatically created by: scrapy startproject</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information about the [deploy] section see:</span><br><span class="hljs-comment"># https://scrapyd.readthedocs.io/en/latest/deploy.html</span><br><br>[settings]<br>default = xxx.settings<br><br>[deploy:<span class="hljs-built_in">test</span>]<br>url = http://localhost:6800/<br>project = xxx<br></code></pre></td></tr></table></figure><p>test——项目名 （随便）</p><p>project 工程名 （你创建 项目时使用的名字）</p><h2 id="windows环境下配置："><a href="#windows环境下配置：" class="headerlink" title="windows环境下配置："></a>windows环境下配置：</h2><p>到python虚拟环境下找到 Scripts&#x2F;scrapyd-deploy</p><p>新建scrapyd-deploy.bat</p><p>这里路径需要自己修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;E:\python_venv\envTest\Scripts\python.exe&quot; &quot;E:\python_venv\envTest\Scripts\scrapyd-deploy&quot; %1 %2 %3 %4 %5 %6 %7 %8 %9<br></code></pre></td></tr></table></figure><p>然后，进入到我们爬虫的根目录，运行scrapyd-deploy</p><h1 id="把爬虫项目上传到服务端"><a href="#把爬虫项目上传到服务端" class="headerlink" title="把爬虫项目上传到服务端"></a>把爬虫项目上传到服务端</h1><p>准备工作：查看当前目录下的 spider</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) $ scrapy list<br>xxxx1  xxxx2<br></code></pre></td></tr></table></figure><ul><li>执行打包命令<br>  <code>scrapyd-deploy 部署名称 -p 项目名称</code><br>  如<code>scrapyd-deploy bushu -p test</code><br>  可以去网页中127.0.0.1:6800查看爬虫运行状态</li><li>停止爬虫<br>  <code>curl http://localhost:6800/cancel.json -d project=scrapy项目名称 -d job=运行ID</code> </li><li>删除scrapy项目<br>  curl <a href="http://localhost:6800/delproject.json">http://localhost:6800/delproject.json</a> -d project&#x3D;scrapy项目名称 </li><li>查看有多少个scrapy项目在api中<br>  curl <a href="http://localhost:6800/listprojects.json">http://localhost:6800/listprojects.json</a> </li><li>查看指定的scrapy项目中有多少个爬虫<br>  curl <a href="http://localhost:6800/listspiders.json?project=scrapy%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0">http://localhost:6800/listspiders.json?project=scrapy项目名称</a><br>  总结几个请求url</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs text">1、获取状态<br>http://127.0.0.1:6800/daemonstatus.json<br><br>2、获取项目列表<br>http://127.0.0.1:6800/listprojects.json<br><br>3、获取项目下已发布的爬虫列表<br>http://127.0.0.1:6800/listspiders.json?project=myproject<br><br>4、获取项目下已发布的爬虫版本列表<br>http://127.0.0.1:6800/listversions.json?project=myproject<br><br>5、获取爬虫运行状态<br>http://127.0.0.1:6800/listjobs.json?project=myproject<br><br>6、启动服务器上某一爬虫（必须是已发布到服务器的爬虫）<br>http://127.0.0.1:6800/schedule.json <br>（post方式，data=&#123;&quot;project&quot;:myproject,&quot;spider&quot;:myspider&#125;）<br><br>7、删除某一版本爬虫<br>http://127.0.0.1:6800/delversion.json<br>（post方式，data=&#123;&quot;project&quot;:myproject,&quot;version&quot;:myversion&#125;）<br><br>8、删除某一工程，包括该工程下的各版本爬虫<br>http://127.0.0.1:6800/delproject.json（post方式，data=&#123;&quot;project&quot;:myproject&#125;）<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小技巧</title>
      <link href="/2024/11/26/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2024/11/26/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="引包方式"><a href="#引包方式" class="headerlink" title="引包方式"></a>引包方式</h1><p>在引包 部署时 总会出现路径问题，包括execjs的路径</p><h2 id="万能导入引包"><a href="#万能导入引包" class="headerlink" title="万能导入引包"></a>万能导入引包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>sys.path.append(os.path.join(os.path.dirname(__file__), <span class="hljs-string">&quot;..&quot;</span>))<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>script_path = os.path.abspath(os.path.dirname(__file__) + <span class="hljs-string">&quot;./..&quot;</span>)<br><span class="hljs-keyword">if</span> script_path <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sys.path:<br>  sys.path.append(script_path)<br><br></code></pre></td></tr></table></figure><h2 id="万能路径"><a href="#万能路径" class="headerlink" title="万能路径"></a>万能路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-comment"># 获取当前工作目录</span><br>current_path = Path.cwd()<br>file_path = current_path / <span class="hljs-string">&quot;aaaa&quot;</span> / <span class="hljs-string">&quot;bbb.js&quot;</span><br></code></pre></td></tr></table></figure><h1 id="提取json"><a href="#提取json" class="headerlink" title="提取json"></a>提取json</h1><p>类似于下文这样的JSON提取出JSON</p><blockquote><p>VaptchaJsonp1756106013582({“code”: “0103”,”data”: {“knock”:”1756107661vbymKE2e12d”,”cdn_servers”:[“static-cn.vaptcha.net”],”css_version”:”2.9.12”,”js_path”:”verify.2.2.4.js”,”help”:true,”is_vip”:-1,”guideVersion”:”3.1.0”,”sdk_ver”:”vaptcha-sdk.1.2.35.669f69e6.js”,”net_way”:-1,”node”:”CN”,”server”:”<a href="https://0.vaptcha.com/verify%22%7D,%22msg%22:%22%22%7D">https://0.vaptcha.com/verify&quot;},&quot;msg&quot;:&quot;&quot;}</a>)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">extract_json = <span class="hljs-keyword">lambda</span> s: json.loads(s[s.find(<span class="hljs-string">&#x27;&#123;&#x27;</span>):s.rfind(<span class="hljs-string">&#x27;&#125;&#x27;</span>) + <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">proxies = <span class="hljs-keyword">lambda</span> authKey=<span class="hljs-string">&quot;xxx&quot;</span>, password=<span class="hljs-string">&quot;xxx&quot;</span>, proxyAddr=<span class="hljs-string">&quot;xxxx:xxx&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;authKey&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>@<span class="hljs-subst">&#123;proxyAddr&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;authKey&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>@<span class="hljs-subst">&#123;proxyAddr&#125;</span>&quot;</span>,<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="lambda-时间戳"><a href="#lambda-时间戳" class="headerlink" title="lambda 时间戳"></a>lambda 时间戳</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">timestamp_to_date = <span class="hljs-keyword">lambda</span> ts: datetime.fromtimestamp(<span class="hljs-built_in">int</span>(ts) / <span class="hljs-number">1000</span>).strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(ts)) == <span class="hljs-number">13</span> <span class="hljs-keyword">else</span> datetime.fromtimestamp(<span class="hljs-built_in">int</span>(ts)).strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testab 逆向流程分析</title>
      <link href="/2024/11/22/testab/"/>
      <url>/2024/11/22/testab/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好久不更新,就随便水一下. 感觉这个东西也比较烂大街. 大佬路过的直接跳过</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>逆向如下参数，哪个网站就不说了。懂得都懂</p><p><img src="https://s2.loli.net/2024/07/17/blTAj1k2QHNmdgM.png"></p><h1 id="断点分析"><a href="#断点分析" class="headerlink" title="断点分析"></a>断点分析</h1><p>这里就直接搜索 然后断点 断在这个地方 就OK了。</p><p><img src="https://s2.loli.net/2024/11/05/Uthiv1CBoMejKLa.png"></p><p>然后就发现进到了一个JSVMP里面</p><p><img src="https://s2.loli.net/2024/11/05/AF7ubjtTSJzmIch.png"></p><p>剩下的就是直接分析。</p><p>PS： 细节部分动态的 就不多说了。就是一个请求里返回出来的VM代码</p><h1 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h1><p>这里找到apply调用处</p><p><img src="https://s2.loli.net/2024/11/21/FHmMed1AgxIzi8J.png"></p><p>在这里打印下 args 输出一下传参的值。</p><p>对比上面的64位大数组 和浏览器中的大数组 值一致 就代表补OK了。</p><p>然后直接打印日志。</p><p>发现日志点还是太少了。这里就得找运算过程中产生的一些信息了。</p><p>日志打印这里。输出val的值。</p><p><img src="https://s2.loli.net/2024/11/21/RApbSwDYmj9eK7h.png"></p><p>这里打印出来  val有一堆异常的值。</p><p>这里说下 手补的话 要保证环境不能跑错。一步错 步步错。</p><p>第一步就是要赋值</p><p>self &#x3D; top &#x3D; window;</p><p>window.self &#x3D; window.top &#x3D; window;</p><p>到这一步就能生成一个错误的值了。</p><p>然后往下走就能看到一堆环境 也全部补上。</p><p><img src="https://s2.loli.net/2024/11/21/spzmiRLS32Ix4BV.png"></p><p><strong>Process检测</strong></p><p>如下图还有process检测。所以在开头也要删除掉process。这里可以把global buffer的一些Node检测全部删除。</p><p><img src="https://s2.loli.net/2024/11/21/zsKiVTHxy8QCfd4.png"></p><p>继续往下看。</p><p>appendChild检测</p><p>这里就是appendChild先后的问题。如果这个不会补。可以不补。你实现的乱七八糟可能不一定对。反正最后都是false.</p><p><img src="https://s2.loli.net/2024/11/21/Dof1q6AGQjuFvpi.png"></p><p>继续往下追。</p><p><strong>Createlement</strong></p><p>这里应该也是创建一个标签 拿到css的标签值。</p><p>这里也要对比。</p><p><img src="https://s2.loli.net/2024/11/08/IQWXOx7srVUYMwA.png"></p><p>继续走 也是</p><p><img src="https://s2.loli.net/2024/11/08/iYbgluAkcJ4xp7D.png"></p><p>到这里 如果还是不成功。可以额外多插一插</p><p>如下图所示位置。这里的话 逻辑打印的很全 即使纯算 也可以以这个为参考 然后去上层取值打断点。</p><p><img src="https://s2.loli.net/2024/11/08/rEIlO7hfJ5QBLAN.png"></p><p>简单说下 还有一堆的原型链的检测 和 toString()检测 其中包含 Image Screen HTML WINDOW等…</p><p>更方便的方法 直接用v-jstools 吐一下 改一下process 还有一些其他的环境值。 一会儿就出来了。</p><p>改完如下图所示，一模一样 就代表成功了.</p><p>对比值一样的就行了</p><p><img src="https://s2.loli.net/2024/11/21/ogeAEsZRunlwktx.png"></p><h1 id="纯算"><a href="#纯算" class="headerlink" title="纯算"></a>纯算</h1><p>如下图位置打好断点</p><p>直接单步入栈</p><p><img src="https://s2.loli.net/2024/11/06/wEtSmiHeZu7pKbG.png"></p><p>这里搜索下apply调用函数</p><p>然后瞎GG插装一波</p><p><img src="https://s2.loli.net/2024/11/06/BP4ySvqJKaxjYoV.png"></p><p>这里我们从下往上去看</p><p><img src="https://s2.loli.net/2024/11/21/NZrvyeco3YS2pHx.png"></p><p>可以看到 生成的最后一个值 用来 .join 拼接</p><p>然后这个数组的生成 我们就可以简易的还原一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> last_arr = [<br>    <span class="hljs-number">51</span>, <span class="hljs-number">50</span>, <span class="hljs-number">98</span>, <span class="hljs-number">50</span>, <span class="hljs-number">56</span>, <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">56</span>, <span class="hljs-number">54</span>, <span class="hljs-number">52</span>,<br>    <span class="hljs-number">51</span>, <span class="hljs-number">97</span>, <span class="hljs-number">55</span>, <span class="hljs-number">51</span>, <span class="hljs-number">97</span>, <span class="hljs-number">48</span>, <span class="hljs-number">56</span>, <span class="hljs-number">49</span>, <span class="hljs-number">97</span>, <span class="hljs-number">49</span>, <span class="hljs-number">101</span>, <span class="hljs-number">101</span>,<br>    <span class="hljs-number">100</span>, <span class="hljs-number">51</span>, <span class="hljs-number">53</span>, <span class="hljs-number">102</span>, <span class="hljs-number">99</span>, <span class="hljs-number">56</span>, <span class="hljs-number">54</span>, <span class="hljs-number">53</span>, <span class="hljs-number">49</span>, <span class="hljs-number">55</span>, <span class="hljs-number">100</span>, <span class="hljs-number">51</span>,<br>    <span class="hljs-number">54</span>, <span class="hljs-number">52</span>, <span class="hljs-number">52</span>, <span class="hljs-number">54</span>, <span class="hljs-number">48</span>, <span class="hljs-number">102</span>, <span class="hljs-number">53</span>, <span class="hljs-number">97</span>, <span class="hljs-number">52</span>, <span class="hljs-number">56</span>, <span class="hljs-number">48</span>, <span class="hljs-number">53</span>,<br>    <span class="hljs-number">97</span>, <span class="hljs-number">52</span>, <span class="hljs-number">55</span>, <span class="hljs-number">99</span>, <span class="hljs-number">57</span>, <span class="hljs-number">102</span>, <span class="hljs-number">101</span>, <span class="hljs-number">54</span>, <span class="hljs-number">57</span>, <span class="hljs-number">99</span>, <span class="hljs-number">49</span>, <span class="hljs-number">53</span>,<br>    <span class="hljs-number">48</span>, <span class="hljs-number">99</span>, <span class="hljs-number">49</span>, <span class="hljs-number">100</span><br>]<br><br><span class="hljs-keyword">const</span> testab = last_arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(val)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(testab)<br></code></pre></td></tr></table></figure><p>然后继续网上看</p><p><img src="https://s2.loli.net/2024/11/21/wuLyaoCiS3A4OJR.png"></p><p>这里发现永远是外面一层大数组 包着一个最后的一个值。</p><p>然后把最后一个值 添加到里面的这个数组。</p><p>这里再细细观察 可以发现 他是又好几个数组生成。然后最终再生成这个testab</p><p>其实这里有个很简单 却 很笨的方法。</p><ol><li>先找出生成的某个值。然后去看逻辑。</li><li>然后把逻辑处持续插装打值。</li><li>基于值分析。</li></ol><p>这里简单说下定位和分析的流程吧。</p><p>找到定位点。 然后挨个追栈 基于返回的指令集的索引去挨个对。</p><p>如下图所示</p><p><img src="https://s2.loli.net/2024/11/21/fSbsWxRGThY67lo.png"></p><p><strong>生成数组</strong></p><p>如下图位置。</p><p><img src="https://s2.loli.net/2024/11/21/3rMJ26d7eLxZInl.png"></p><p><strong>第一组</strong></p><p><img src="https://s2.loli.net/2024/11/21/YCnmrZqpM1y6Sc7.png"></p><p><strong>第二组</strong></p><p><img src="https://s2.loli.net/2024/11/21/D7WoQ4MYrZXt9Fv.png"></p><p><strong>第三组</strong></p><p><img src="https://s2.loli.net/2024/11/21/mOhYIPwoULju7Ac.png"></p><p>转置</p><p><img src="https://s2.loli.net/2024/11/21/SbGKzpOFh1xqs4i.png"></p><p><strong>最后</strong></p><p><img src="https://s2.loli.net/2024/11/21/HXxIzROqhAm1dGM.png"></p><p>fromcharcode</p><p><strong>结果</strong></p><p><img src="https://s2.loli.net/2024/11/21/FfQIXqz9hyaeg1d.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requests请求封装以及API</title>
      <link href="/2024/11/04/Requests%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E4%BB%A5%E5%8F%8AAPI/"/>
      <url>/2024/11/04/Requests%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E4%BB%A5%E5%8F%8AAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://xxx:xxx&amp;@xxx.xxx.xxx.cn&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;http://xxx:xxx&amp;@xxx.xxx.xxx.cn&quot;</span>,<br>&#125;<br><br>res = requests.get(<span class="hljs-string">&quot;http://127.0.0.1:8110&quot;</span>, proxies=proxies)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h1 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> requests.adapters <span class="hljs-keyword">import</span> HTTPAdapter<br><span class="hljs-keyword">from</span> urllib3.util.retry <span class="hljs-keyword">import</span> Retry<br><br>session = requests.session()<br><br>retry = Retry(<br>            total=<span class="hljs-number">5</span>,<br>            read=<span class="hljs-number">5</span>,<br>            connect=<span class="hljs-number">5</span>,<br>            backoff_factor=<span class="hljs-number">0.3</span>,<br>            status_forcelist=(<span class="hljs-number">500</span>, <span class="hljs-number">502</span>, <span class="hljs-number">504</span>),<br>        )<br>adapter = HTTPAdapter(max_retries=retry)<br>session.mount(<span class="hljs-string">&quot;http://&quot;</span>, adapter)<br>session.mount(<span class="hljs-string">&quot;https://&quot;</span>, adapter)<br></code></pre></td></tr></table></figure><h1 id="添加Cookie"><a href="#添加Cookie" class="headerlink" title="添加Cookie"></a>添加Cookie</h1><h2 id="常规添加"><a href="#常规添加" class="headerlink" title="常规添加"></a>常规添加</h2><p><strong>headers</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;test=111;test1=2222&quot;</span>&#125;<br>res = requests.get(<span class="hljs-string">&quot;https://xxxx-xxx.xxxx/get&quot;</span>,headers=headers)<br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p><strong>cookies</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br>cookies = &#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;test1&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>&#125;<br>res = requests.get(<span class="hljs-string">&quot;https://xxxx-xxx.xxxx/get&quot;</span>,cookies=cookies)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="session添加"><a href="#session添加" class="headerlink" title="session添加"></a>session添加</h2><ol><li><strong>自动设置</strong></li><li><strong>直接赋值</strong>（一般情况不好用 不推荐）</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">session.cookies[<span class="hljs-string">&quot;test&quot;</span>]=<span class="hljs-string">&quot;111&quot;</span><br>session.cookies[<span class="hljs-string">&quot;test2&quot;</span>]=<span class="hljs-string">&quot;222&quot;</span><br></code></pre></td></tr></table></figure><p>  or<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">session.cookies.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>,path=<span class="hljs-string">&quot;/&quot;</span>,domain=<span class="hljs-string">&quot;xxx.xxx.cn&quot;</span>)<br></code></pre></td></tr></table></figure><br>3. <strong>add_dict_to_cookiejar</strong> (推荐)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>session = requests.session()<br>cookies = &#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;test1&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>&#125;<br>requests.utils.add_dict_to_cookiejar(session.cookies,cookie_dict=cookie_dict)<br><br>res = session.get(<span class="hljs-string">&quot;https://xxx-xxx.xxx/get&quot;</span>)<br><br><span class="hljs-built_in">print</span>(session.cookies)<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>RequestsCookieJar 对象设置</strong></li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>session = requests.session()<br><br>test = requests.sessions.RequestsCookieJar()<br>test.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, path=<span class="hljs-string">&#x27;/&#x27;</span>, domain=<span class="hljs-string">&#x27;xxx-xxx.cn&#x27;</span>)<br>session.cookies.update(test)<br><br>res = session.get(<span class="hljs-string">&quot;https://xxx-xxx.cn/get&quot;</span>)<br><span class="hljs-built_in">print</span>(session.cookies)<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>cookiejar_from_dict</strong></li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>session = requests.session()<br>cookie_dict = &#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;test2&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>&#125;<br>test = requests.utils.cookiejar_from_dict(cookie_dict=cookie_dict)<br>session.cookies.update(test)<br><br>res = session.get(<span class="hljs-string">&quot;https://xxx-xxx.cn/get&quot;</span>)<br><span class="hljs-built_in">print</span>(session.cookies)<br></code></pre></td></tr></table></figure><h1 id="忽略SSL证书以及错误警告"><a href="#忽略SSL证书以及错误警告" class="headerlink" title="忽略SSL证书以及错误警告"></a>忽略SSL证书以及错误警告</h1><p>报错SSL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>requests.get(<span class="hljs-string">&quot;https://xxx.xxx.com&quot;</span> , verify=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>此时会报错警告</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings<br>  InsecureRequestWarning)<br></code></pre></td></tr></table></figure><p>全局添加以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">requests.packages.urllib3.disable_warnings()<br></code></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>requests.get(<span class="hljs-string">&quot;https://xxx.xxx.com&quot;</span> , allow_redirects=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>allow_redirects</p><p>为False ： 禁止重定向<br>为True： 允许重定向</p><p>一般返回的response.url 为正确URL</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>剩下的params | data | cookies | files | auth | timeout | hooks | stream | cert | json<br>要不就是太简单 要不就是很少用。这里不讲了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pm2之运行Hexo方案</title>
      <link href="/2024/10/25/Pm2%E4%B9%8B%E8%BF%90%E8%A1%8CHexo%E6%96%B9%E6%A1%88/"/>
      <url>/2024/10/25/Pm2%E4%B9%8B%E8%BF%90%E8%A1%8CHexo%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>pm2是一个管理nodejs process的工具，它可以让我们用简单的指令启动nodejs进程(多为web前端)并管理之。<br>详情可以参考pm2的官方文档，这里只是用到了start&#x2F;stop&#x2F;logs几个常用的命令</p><h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><p>这里直接安装会报错。并且会报错找不到</p><p>这里直接如下安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> npm install -g pm2<br></code></pre></td></tr></table></figure><p>这里一定要加sudo</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>vim hexo_run.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(error)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start hexo_run.js<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向基础之Java</title>
      <link href="/2024/10/18/APP%E9%80%86%E5%90%91%E4%B9%8BJava%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2024/10/18/APP%E9%80%86%E5%90%91%E4%B9%8BJava%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>相同的语法，例如：静态成员无需实例就可以调用这些共同性不写</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>类成员描述符：<br>public:只要有权访问类，在任意情况下都可以调用<br>private:只允许自己类调用，在其他类中无法调用到<br>default:只允许自己家族(即包内成员)调用<br>protected:允许自己家族(即包内成员)调用，子类也可以访问(继承,不是一个包)</p><p>返回值：<br>void:无返回值<br>int:返回一个整数<br>String:返回一个字符串<br>boolean:返回一个布尔值</p><p>变量:<br>变量类型 变量名 &#x3D; 变量值</p><p>输入与输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>system.out.println(<span class="hljs-string">&quot;请输入一个字符串：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.nextLine(); <span class="hljs-comment">// 将输入的类型转换</span><br>system.out.println(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;输入的字符串是：%s,输入的整数是：%d&quot;</span>,str,num);<br>system.out.println(message);<br><br>基本数据类型:<br><span class="hljs-type">byte</span>:<span class="hljs-number">1</span>个字节 -<span class="hljs-number">128</span>——-<span class="hljs-number">127</span><br><span class="hljs-type">short</span>:<span class="hljs-number">2</span>个字节<br><span class="hljs-type">int</span>:<span class="hljs-number">4</span>个字节<br><span class="hljs-type">long</span>:<span class="hljs-number">8</span>个字节<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>       <span class="hljs-type">byte</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br>       <span class="hljs-type">short</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">v3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2222131</span>;<br>       <span class="hljs-type">long</span> <span class="hljs-variable">v4</span> <span class="hljs-operator">=</span> <span class="hljs-number">554534353424L</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>强制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>       <span class="hljs-type">short</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br>       <span class="hljs-comment">// 强制类型转换</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)v1;<br>        System.out.println(v2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java python字节数组转换python</p><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">byte_list = [-<span class="hljs-number">50</span>, -<span class="hljs-number">28</span>, -<span class="hljs-number">59</span>, -<span class="hljs-number">26</span>, -<span class="hljs-number">58</span>, -<span class="hljs-number">21</span>]<br><br>bs = <span class="hljs-built_in">bytearray</span>()<br><span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> byte_list:<br>    <span class="hljs-keyword">if</span> byte &lt; <span class="hljs-number">0</span>:<br>        byte = byte + <span class="hljs-number">256</span><br>    bs.append(byte)<br>str_data = bs.decode(<span class="hljs-string">&quot;gbk&quot;</span>)<br><span class="hljs-built_in">print</span>(str_data)<br></code></pre></td></tr></table></figure><p>基础不记录了</p><h1 id="逆向中的问题"><a href="#逆向中的问题" class="headerlink" title="逆向中的问题"></a>逆向中的问题</h1><h2 id="接口中常见的方法"><a href="#接口中常见的方法" class="headerlink" title="接口中常见的方法"></a>接口中常见的方法</h2><p>找到接口中的方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRequest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String URL)</span>;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">public</span> IRequest req;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(IRequest req)</span> &#123;<br>        <span class="hljs-built_in">this</span>.req = req;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/click/android2/&quot;</span>;<br>        <span class="hljs-built_in">this</span>.req.send(url);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路1：寻找实现IRequest 接口的类</p><p>思路2：谁传入了Req？ 找到调用栈。</p><h2 id="隐藏的字节"><a href="#隐藏的字节" class="headerlink" title="隐藏的字节"></a>隐藏的字节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">v4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;-<span class="hljs-number">26</span>,-<span class="hljs-number">83</span>,-<span class="hljs-number">90</span>,-<span class="hljs-number">26</span>,-<span class="hljs-number">78</span>,-<span class="hljs-number">101</span>,-<span class="hljs-number">23</span>,-<span class="hljs-number">67</span>,-<span class="hljs-number">122</span>&#125;);<br></code></pre></td></tr></table></figure><p>隐藏的字符串 要注意</p><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>抖音UUID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        System.out.println(uuid);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="随机值"><a href="#随机值" class="headerlink" title="随机值"></a>随机值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">v4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-number">80</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>());<br>        <span class="hljs-comment">// 让字节以16进制展示</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> v4.toString(<span class="hljs-number">16</span>);<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>python中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><br>open_uid = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> random.randbytes(<span class="hljs-number">10</span>)])<br><span class="hljs-built_in">print</span>(open_uid)<br></code></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(String.valueOf(System.currentTimeMillis()/<span class="hljs-number">1000</span>));<br>        System.out.println(String.valueOf(System.currentTimeMillis()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十六进制字符串"><a href="#十六进制字符串" class="headerlink" title="十六进制字符串"></a>十六进制字符串</h2><p>转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我叫大帅哥&quot;</span>;<br>        <span class="hljs-type">byte</span>[] nameBytes = name.getBytes();<br>        <span class="hljs-comment">// [-26, -120, -111, -27, -113, -85, -27, -92, -89, -27, -72, -123, -27, -109, -91]</span><br>        System.out.println(Arrays.toString(nameBytes));<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nameBytes.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> nameBytes[i] &amp; <span class="hljs-number">255</span>; <span class="hljs-comment">// 负数转换成正数</span><br>            <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">16</span>) &#123;<br>                sb.append(<span class="hljs-number">0</span>);<br>            &#125;<br>            sb.append(Integer.toHexString(val));<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> sb.toString();<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我是大帅哥&quot;</span>;<br>Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br><span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> encoder.encodeToString(name.getBytes());<br>System.out.println(res);<br><br>Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> Base64.getDecoder();<br><span class="hljs-type">byte</span>[] origin = decoder.decode(res);<br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(origin);<br>System.out.println(data);<br></code></pre></td></tr></table></figure><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md5</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br><span class="hljs-type">byte</span>[] digest = md5.digest(str.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>hexStr = ByteUtils.toHexString(digest);<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">v5</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;-<span class="hljs-number">50</span>,-<span class="hljs-number">28</span>,-<span class="hljs-number">59</span>,-<span class="hljs-number">26</span>,-<span class="hljs-number">58</span>,-<span class="hljs-number">21</span>&#125;,<span class="hljs-string">&quot;GBK&quot;</span>);<br>System.out.println(v5);<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>sb.append(<span class="hljs-string">&quot;name&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;=&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;lzc&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;and&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;you&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">v6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(sb);<br>System.out.println(v6);<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组类型 [] 数组名 &#x3D; {em1,em2,em3,…,emN};&#x2F;&#x2F;声明数组的时候初始化，一共N个元素，</p><p>例如：<br>int[] array &#x3D; {3,5,4,8,12,5};&#x2F;&#x2F;一共六个元素</p><p>数组类型[] 数组名 &#x3D; new 数组类型[N]&#x2F;&#x2F;用new关键字声明数组的同时指定数组长度，</p><p>例如：<br>String[] str &#x3D; new String[6]; 数组长度为6，即数组有六个元素</p><p>数组类型[] 数组名 &#x3D; new 数组类型[] {em1,em2,em3,…,emN};用new关键字声明数组的同时初始化数组，</p><p>例如：<br>int[] array &#x3D; new int[] {2,4,5,6,8,9};array数组一共五个元素。</p><p>数组一旦声明，数组长度就已经确定。每个数组都有一个length属性，不可改变。可以改变数组元素。</p><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试数据&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fd6b639dbcff0c2a1b03b389ec763c4b&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;77b07a672d57d64c&quot;</span>;<br>        <span class="hljs-comment">// 加密</span><br>        <span class="hljs-type">byte</span> [] raw = key.getBytes();<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">skeySpec</span>  <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(raw,<span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(iv.getBytes());<br><br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        cipher.init(Cipher.ENCRYPT_MODE,skeySpec,ivSpec);<br>        <span class="hljs-type">byte</span> [] encrypted = cipher.doFinal(data.getBytes());<br>        System.out.println(Arrays.toString(encrypted));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP逆向之Frida基础教程</title>
      <link href="/2024/09/18/APP%E9%80%86%E5%90%91%E4%B9%8BFrida%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2024/09/18/APP%E9%80%86%E5%90%91%E4%B9%8BFrida%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">Frida 代码自动补全<br>```bash<br>npm install --save @types/frida-gum<br></code></pre></td></tr></table></figure><p>安装Frida</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install frida-tools<br>pip install objection<br></code></pre></td></tr></table></figure><p>找到相应版本的Frida 推送到设备中</p><p><a href="https://github.com/frida/frida/releases/tag/16.5.1">https://github.com/frida/frida/releases/tag/16.5.1</a></p><p><img src="https://s2.loli.net/2024/09/18/yqCbzJ1QaZfipFn.png"></p><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push frida-server16.5.1 /data/local/frida-server16.5.1<br></code></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>frida-tools里面还提供了五个实用工具<br>frida-discover、<br>frida-kill、<br>frida-ls-devices、<br>frida-ps以及<br>frida-trace<br>在 shims下面</p><p><strong>获取可用设备列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">frida-ls-devices<br></code></pre></td></tr></table></figure><p><strong>获取设备进程列表</strong><br>frida-ps [options] </p><p>● -U：连接到USB设备。<br>● -D：如果有多个USB设备，可以用该选项指定设备的UDID。<br>● -R&#x2F;-H：连接到远程frida-server，主要用于远程调试。<br>● -a：仅显示正在运行的应用。<br>● -i：显示所有已安装的应用（包括App Store应用和系统应用）。 </p><p>具体demo:</p><ul><li>连接到USB设备查看进程列表  frida-ps -U </li><li>连接到USB设备查看正在运行的应用  frida-ps -U -a </li><li>连接到USB设备查看所有安装的应用  frida-ps -U -a -i  </li><li>指定查看某个设备  frida-ps -D xxxx -a</li></ul><p>遇到的坑：</p><ol><li>windows上frida环境配置出现Waiting for USB device to appear…<br>解决：<br>运行下面代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb forward tcp:27042 tcp:27042<br>frida-ps -H 127.0.0.1:27042<br></code></pre></td></tr></table></figure><p><strong>结束设备的某个进程</strong><br>frida-kill工具用来结束设备上的某个进程，它的使用规则如下:  </p><ul><li>frida-kill -U <PID>&#x2F;<Name> </li><li>frida-kill -D <DEVICE-ID> <PID>&#x2F;<NAME></li></ul><p>例如用frida-ps获取了微信的PID为1815，</p><p>则可以用如下命令结束它：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">frida-kill -U 1815  <br>frida-kill -U 微信  <br>frida-kill -D xxxx 1815  <br>frida-kill -D xxxx 微信<br></code></pre></td></tr></table></figure><p><strong>frida 追踪</strong></p><blockquote><p><a href="https://frida.re/docs/frida-trace/">https://frida.re/docs/frida-trace/</a></p></blockquote><p>frida-trace工具用于跟踪函数或方法的调用，其功能非常强大，使用“-h”选项来查看帮助信息。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs elixir">// 设备相关<br>-D  连接到指定的设备，多个设备时使用。示例<span class="hljs-symbol">:frida-trace</span> -D <span class="hljs-number">555315</span>d66cac2d5849408f53da9eea514a90547e -F <br>-U  连接到<span class="hljs-title class_">USB</span>设备，只有一个设备时使用。示例fria-trace -U -F<br><br>// 应用程序相关<br>-f  目标应用包名。spawn模式。示例<span class="hljs-symbol">:frida-trace</span> -U -f com.apple.www<br>-F  当前正在运行的程序。attach模式示例。示例<span class="hljs-symbol">:frida-trace</span> -U -F或frida-trae -<span class="hljs-title class_">UF</span><br>-n  正在运行的程序的名字。attach模式。示例<span class="hljs-symbol">:frida-trace</span> -U -n <span class="hljs-title class_">QQ</span><br>-N  正在运行的程序的包名。attach模式。示例<span class="hljs-symbol">:frida-trace</span> -U -N com.apple.www<br>-p  正在运行的程序的pid。attach模式。示例<span class="hljs-symbol">:frida-trace</span> -U -p <span class="hljs-number">2302</span><br>  <br>// 方法相关，以下参数在一条跟踪命令中可重复使用<br>-I  包含模块。示例<span class="hljs-symbol">:frida-trace</span> -<span class="hljs-title class_">UF</span> -I <span class="hljs-string">&quot;libcommonCrypto*&quot;</span><br>-X  不包含模块。示例<span class="hljs-symbol">:frida-trace</span> -<span class="hljs-title class_">UF</span> -X <span class="hljs-string">&quot;libcommonCrypto*&quot;</span><br>-i   包含c函数。示例<span class="hljs-symbol">:frida-trace</span> -<span class="hljs-title class_">UF</span> -i <span class="hljs-string">&quot;strtsr&quot;</span><br>-x   不包名c函数。示例<span class="hljs-symbol">:frida-trace</span> -<span class="hljs-title class_">UF</span> -i <span class="hljs-string">&quot;*MD5&quot;</span> -x <span class="hljs-string">&quot;CC_MD5&quot;</span><br>-a   包含模块+偏移跟踪。示例<span class="hljs-symbol">:frida-trace</span> -<span class="hljs-title class_">UF</span> -a 模块名\!<span class="hljs-number">0x7B7D48</span> <br>-j  包含某个<span class="hljs-title class_">Java</span>方法 实列frida-trace -<span class="hljs-title class_">UF</span>  -j <span class="hljs-string">&#x27;*!*tesucanshu*/isu&#x27;</span><br> !用来分隔<span class="hljs-title class_">MODULE</span>和<span class="hljs-title class_">OFFSET</span>，例如<span class="hljs-string">&quot;gdi32full.dll!ExtTextOutW&quot;</span><br> *代表匹配任意内容<br><br>-J  包含某个<span class="hljs-title class_">Java</span>方法 实列frida-trace -<span class="hljs-title class_">UF</span>  -J <span class="hljs-string">&#x27;*!*tesucanshu*/isu&#x27;</span><br><br>  <br>// 日志相关<br>-o  日志输出到文件。示例<span class="hljs-symbol">:frida-trace</span> -<span class="hljs-title class_">UF</span> -j <span class="hljs-string">&#x27;*!*tesucanshu*/isu&#x27;</span> -o run.log<br></code></pre></td></tr></table></figure><p>附加的两种方式</p><p>1.Attach模式</p><blockquote><p> 前台打开APP: </p><p> frida -UF -l 脚本.js</p></blockquote><p>2.Spwan模式</p><blockquote><pre><code>frida -U -f 包名 %resume可以加 --no-pause但是在 16的版本已经取消 --no-pause 具体命令自行研究</code></pre></blockquote><p>另外需要一点JS和python语法基础</p><h1 id="Hook-构造函数"><a href="#Hook-构造函数" class="headerlink" title="Hook 构造函数"></a>Hook 构造函数</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API:"></a>常用API:</h2><blockquote><p>​是一个非常重要的对象，在里面有许多的API。在对Java层进行hook时，是必须要写Java.perform的。</p></blockquote><h3 id="Java-perform"><a href="#Java-perform" class="headerlink" title="Java.perform"></a>Java.perform</h3><blockquote><p><code>Java.perform（fn）</code>主要用于当前线程附加到<code>Java VM</code>并且调用<code>fn</code>方法</p></blockquote><h3 id="Java-available"><a href="#Java-available" class="headerlink" title="Java.available"></a>Java.available</h3><blockquote><p>该函数一般用来判断当前进程是否加载了<code>JavaVM，Dalvik</code>或<code>ART</code>虚拟机   通俗一点讲是否在Java代码空间</p></blockquote><h3 id="Java-androidVersion"><a href="#Java-androidVersion" class="headerlink" title="Java.androidVersion"></a>Java.androidVersion</h3><blockquote><p>显示android系统版本号</p></blockquote><h3 id="Java-use"><a href="#Java-use" class="headerlink" title="Java.use"></a>Java.use</h3><blockquote><p><code>Java.use(className)，</code>动态获取<code>className</code>的类定义  类似于xposed里面的获取Class   可以直接点到源代码看他的定义</p></blockquote><h3 id="Java-use-类名-方法名-implementation"><a href="#Java-use-类名-方法名-implementation" class="headerlink" title="Java.use(类名).方法名.implementation"></a>Java.use(类名).方法名.implementation</h3><blockquote><p>获取方法的实现</p></blockquote><h3 id="overload"><a href="#overload" class="headerlink" title="overload"></a>overload</h3><blockquote><p>重载参数</p></blockquote><h3 id="init"><a href="#init" class="headerlink" title=".$init()"></a>.$init()</h3><blockquote><p>拦截构造函数时候使用</p></blockquote><h3 id="立即注入或者延迟注入"><a href="#立即注入或者延迟注入" class="headerlink" title="立即注入或者延迟注入"></a>立即注入或者延迟注入</h3><blockquote><p>setImmediate(test);<br>setInterval(test,1000);</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Java</span>.<span class="hljs-property">available</span>) &#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">Person</span>_class = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.hookdemo.Person&quot;</span>);<br><br>            <span class="hljs-comment">//hook构造函数</span><br>            <span class="hljs-title class_">Person</span>_class.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a1, a2, a3</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1, a2, a3);<br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a1, a2, a3);<br>                <span class="hljs-keyword">return</span> result;<br><br>            &#125;<br><br>            <span class="hljs-comment">//查看参数</span><br>            <span class="hljs-title class_">Person</span>_class.<span class="hljs-property">setAddress</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">address</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;address=&gt;&quot;</span>, address);<br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setAddress</span>(<span class="hljs-string">&quot;address&quot;</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;result=&gt;&quot;</span>, result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><br>            <span class="hljs-comment">//查看返回值</span><br>            <span class="hljs-title class_">Person</span>_class.<span class="hljs-property">getName</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getName</span>();<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;result=&gt;&quot;</span>, result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><br><br>            <span class="hljs-comment">//重载函数</span><br>            <span class="hljs-title class_">Person</span>_class.<span class="hljs-property">print</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a1, a2, a3</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1, a2, a3);<br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">print</span>(a1, a2, a3);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(main)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APP逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某团新版Web mtgsig1.2 算法分析</title>
      <link href="/2024/09/11/%E6%9F%90%E5%9B%A2%E6%96%B0%E7%89%88Web%20mtgsig/"/>
      <url>/2024/09/11/%E6%9F%90%E5%9B%A2%E6%96%B0%E7%89%88Web%20mtgsig/</url>
      
        <content type="html"><![CDATA[<h1 id="某团新版Web-mtgsig1-2-算法解析"><a href="#某团新版Web-mtgsig1-2-算法解析" class="headerlink" title="某团新版Web mtgsig1.2 算法解析"></a>某团新版Web mtgsig1.2 算法解析</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算法和环境更新了一下。某些接口请求几次就强校验了。今天简单来看看。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>首先AST解混淆，把代码中b函数给解出来就行了。非常简单。</p><p>后面解完之后发现 环境代码非常之多。</p><p>这里算了。我补了一天最后还差了200多位。这里正常应该是476位。</p><p>这里就不多B了。之间开撸。</p><p>这里其实就是一个VMP。</p><p>层层入栈 直接插桩</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ki+<span class="hljs-number">1</span>,kg[<span class="hljs-string">&quot;getUint8&quot;</span>](ki+<span class="hljs-number">1</span>),kb<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/09/01/FoCdXHZzsxeMQA7.png"></p><p>保存打印的日志。</p><p>​</p><h1 id="a3"><a href="#a3" class="headerlink" title="a3"></a>a3</h1><p><img src="https://s2.loli.net/2024/09/01/Fn5MoQSGdZvkrtj.png"></p><p><img src="https://s2.loli.net/2024/09/01/fwsNncSl2CTHtqp.png"></p><p>之间搜索dfpID的位置。</p><p><img src="https://s2.loli.net/2024/09/01/lNhYBAeDIGUnup9.png"></p><p>扣完 a3 即生成。</p><h1 id="a5"><a href="#a5" class="headerlink" title="a5"></a>a5</h1><p>然后找到位置再插一波</p><p>如下图</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">kR[<span class="hljs-string">&quot;apply&quot;</span>](kS, kP)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/09/01/iyFhOoZCx6mupGj.png"></p><p>这里 可以看见 数组转换成字符串。那我们两个断点一起打着看看。</p><p><img src="https://s2.loli.net/2024/09/01/DFLAk84clR2UyYt.png"></p><p>这里重新插一下一开始的位置</p><p><img src="https://s2.loli.net/2024/09/01/nvcAzBQ8jCUlI4t.png"></p><p>单步进栈。发现又是一个 switch 流程</p><p>那继续插</p><p><img src="https://s2.loli.net/2024/09/01/fPR7Yy3ZDo1uKxO.png"></p><p>OK。那就继续插</p><p><img src="https://s2.loli.net/2024/09/01/Nzx85qjJWCT9sym.png"></p><p>定位到下图位置 单步调试跟栈</p><p><img src="https://s2.loli.net/2024/09/01/J2hiGVuks4QKzo5.png"></p><p>如下图 扣下来即可。后面就是考虑动态数组的问题了。</p><p><img src="https://s2.loli.net/2024/09/01/k8ZtdMx7Rs6zfuW.png"></p><p>即lI，lJ,lK 三个值。那又要插装。</p><p>这里重新插装要打印全部值。</p><p>这里找到 0,1,2,3,4 …256的地方。</p><p>重新插</p><p><img src="https://s2.loli.net/2024/09/01/rM3msoDkWTb7njy.png"></p><p>这里动态数组。我们JSON.stringify 来分析下。</p><p>这里分析如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">origin_arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>, <span class="hljs-number">103</span>, <span class="hljs-number">104</span>, <span class="hljs-number">105</span>, <span class="hljs-number">106</span>, <span class="hljs-number">107</span>, <span class="hljs-number">108</span>, <span class="hljs-number">109</span>, <span class="hljs-number">110</span>, <span class="hljs-number">111</span>, <span class="hljs-number">112</span>, <span class="hljs-number">113</span>, <span class="hljs-number">114</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">117</span>, <span class="hljs-number">118</span>, <span class="hljs-number">119</span>, <span class="hljs-number">120</span>, <span class="hljs-number">121</span>, <span class="hljs-number">122</span>, <span class="hljs-number">123</span>, <span class="hljs-number">124</span>, <span class="hljs-number">125</span>, <span class="hljs-number">126</span>, <span class="hljs-number">127</span>, <span class="hljs-number">128</span>, <span class="hljs-number">129</span>, <span class="hljs-number">130</span>, <span class="hljs-number">131</span>, <span class="hljs-number">132</span>, <span class="hljs-number">133</span>, <span class="hljs-number">134</span>, <span class="hljs-number">135</span>, <span class="hljs-number">136</span>, <span class="hljs-number">137</span>, <span class="hljs-number">138</span>, <span class="hljs-number">139</span>, <span class="hljs-number">140</span>, <span class="hljs-number">141</span>, <span class="hljs-number">142</span>, <span class="hljs-number">143</span>, <span class="hljs-number">144</span>, <span class="hljs-number">145</span>, <span class="hljs-number">146</span>, <span class="hljs-number">147</span>, <span class="hljs-number">148</span>, <span class="hljs-number">149</span>, <span class="hljs-number">150</span>, <span class="hljs-number">151</span>, <span class="hljs-number">152</span>, <span class="hljs-number">153</span>, <span class="hljs-number">154</span>, <span class="hljs-number">155</span>, <span class="hljs-number">156</span>, <span class="hljs-number">157</span>, <span class="hljs-number">158</span>, <span class="hljs-number">159</span>, <span class="hljs-number">160</span>, <span class="hljs-number">161</span>, <span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">164</span>, <span class="hljs-number">165</span>, <span class="hljs-number">166</span>, <span class="hljs-number">167</span>, <span class="hljs-number">168</span>, <span class="hljs-number">169</span>, <span class="hljs-number">170</span>, <span class="hljs-number">171</span>, <span class="hljs-number">172</span>, <span class="hljs-number">173</span>, <span class="hljs-number">174</span>, <span class="hljs-number">175</span>, <span class="hljs-number">176</span>, <span class="hljs-number">177</span>, <span class="hljs-number">178</span>, <span class="hljs-number">179</span>, <span class="hljs-number">180</span>, <span class="hljs-number">181</span>, <span class="hljs-number">182</span>, <span class="hljs-number">183</span>, <span class="hljs-number">184</span>, <span class="hljs-number">185</span>, <span class="hljs-number">186</span>, <span class="hljs-number">187</span>, <span class="hljs-number">188</span>, <span class="hljs-number">189</span>, <span class="hljs-number">190</span>, <span class="hljs-number">191</span>, <span class="hljs-number">192</span>, <span class="hljs-number">193</span>, <span class="hljs-number">194</span>, <span class="hljs-number">195</span>, <span class="hljs-number">196</span>, <span class="hljs-number">197</span>, <span class="hljs-number">198</span>, <span class="hljs-number">199</span>, <span class="hljs-number">200</span>, <span class="hljs-number">201</span>, <span class="hljs-number">202</span>, <span class="hljs-number">203</span>, <span class="hljs-number">204</span>, <span class="hljs-number">205</span>, <span class="hljs-number">206</span>, <span class="hljs-number">207</span>, <span class="hljs-number">208</span>, <span class="hljs-number">209</span>, <span class="hljs-number">210</span>, <span class="hljs-number">211</span>, <span class="hljs-number">212</span>, <span class="hljs-number">213</span>, <span class="hljs-number">214</span>, <span class="hljs-number">215</span>, <span class="hljs-number">216</span>, <span class="hljs-number">217</span>, <span class="hljs-number">218</span>, <span class="hljs-number">219</span>, <span class="hljs-number">220</span>, <span class="hljs-number">221</span>, <span class="hljs-number">222</span>, <span class="hljs-number">223</span>, <span class="hljs-number">224</span>, <span class="hljs-number">225</span>, <span class="hljs-number">226</span>, <span class="hljs-number">227</span>, <span class="hljs-number">228</span>, <span class="hljs-number">229</span>, <span class="hljs-number">230</span>, <span class="hljs-number">231</span>, <span class="hljs-number">232</span>, <span class="hljs-number">233</span>, <span class="hljs-number">234</span>, <span class="hljs-number">235</span>, <span class="hljs-number">236</span>, <span class="hljs-number">237</span>, <span class="hljs-number">238</span>, <span class="hljs-number">239</span>, <span class="hljs-number">240</span>, <span class="hljs-number">241</span>, <span class="hljs-number">242</span>, <span class="hljs-number">243</span>, <span class="hljs-number">244</span>, <span class="hljs-number">245</span>, <span class="hljs-number">246</span>, <span class="hljs-number">247</span>, <span class="hljs-number">248</span>, <span class="hljs-number">249</span>, <span class="hljs-number">250</span>, <span class="hljs-number">251</span>, <span class="hljs-number">252</span>, <span class="hljs-number">253</span>, <span class="hljs-number">254</span>, <span class="hljs-number">255</span>]<br><br><br><span class="hljs-comment">// 需要与之运算的16位数组</span><br>encrypt_arr = [<span class="hljs-number">152</span>, <span class="hljs-number">232</span>, <span class="hljs-number">186</span>, <span class="hljs-number">109</span>, <span class="hljs-number">125</span>, <span class="hljs-number">188</span>, <span class="hljs-number">249</span>, <span class="hljs-number">229</span>, <span class="hljs-number">95</span>, <span class="hljs-number">58</span>, <span class="hljs-number">250</span>, <span class="hljs-number">230</span>, <span class="hljs-number">169</span>, <span class="hljs-number">75</span>, <span class="hljs-number">115</span>, <span class="hljs-number">56</span>]<br><br><br><span class="hljs-comment">// 第一个</span><br><span class="hljs-comment">// 152+0 = 152   152 = 152+0  232 第一个数组</span><br><span class="hljs-number">152</span> + <span class="hljs-number">31</span><br><br><span class="hljs-number">1</span><br><span class="hljs-comment">// 结果</span><br><span class="hljs-number">183</span><br><br><span class="hljs-comment">// 第二个</span><br><span class="hljs-comment">// 184+232 = 416   184 = 183+1  232 第二个数组</span><br><span class="hljs-number">416</span> + <span class="hljs-number">31</span><br><span class="hljs-number">447</span> - <span class="hljs-number">256</span> || <span class="hljs-number">447</span> % <span class="hljs-number">256</span><br><span class="hljs-comment">// 结果</span><br><span class="hljs-number">191</span><br><br><br><span class="hljs-comment">// 第三个</span><br><span class="hljs-comment">// 193+186   191+2  186 第三个数组</span><br><span class="hljs-number">379</span> + <span class="hljs-number">31</span><br><span class="hljs-number">410</span> - <span class="hljs-number">256</span> || <span class="hljs-number">410</span> % <span class="hljs-number">256</span><br><span class="hljs-comment">// 结果</span><br><span class="hljs-number">154</span><br><br><br><span class="hljs-comment">// 第四个</span><br><span class="hljs-comment">// 157 + 109  154+3    109 第四个数组</span><br><span class="hljs-number">266</span> + <span class="hljs-number">31</span><br><span class="hljs-number">297</span> - <span class="hljs-number">256</span> || <span class="hljs-number">297</span> * <span class="hljs-number">256</span><br><span class="hljs-comment">// 结果</span><br><span class="hljs-number">41</span><br><br><span class="hljs-comment">// ==== ..... 一组轮询完毕</span><br><br><span class="hljs-comment">// 第16个</span><br><span class="hljs-comment">// 231 + 56   216 + 15  56 第15个数组</span><br><span class="hljs-number">287</span> + <span class="hljs-number">31</span><br><span class="hljs-number">318</span> - <span class="hljs-number">256</span> || <span class="hljs-number">318</span> % <span class="hljs-number">256</span><br><span class="hljs-comment">// 结果</span><br><span class="hljs-number">62</span><br><br><span class="hljs-comment">// 第17个</span><br><span class="hljs-comment">// 78+152     62+16   152 第1个数组</span><br><span class="hljs-number">230</span> + <span class="hljs-number">31</span><br><br><span class="hljs-number">261</span> - <span class="hljs-number">256</span> || <span class="hljs-number">318</span> % <span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><p>这里直接保姆级教学了。</p><p>然后就可以整合算法了。</p><p>这里有个小坑~~~ 留着先自己弄弄</p><p>这里还有个地方 就是与之运算的16位数组了。</p><p>这个地方继续如下图插装</p><p><img src="https://s2.loli.net/2024/09/12/B5OXj82IoEUzFqe.png"></p><p>然后插装 13 39 </p><p><img src="https://s2.loli.net/2024/09/12/kJyH6KYDROt9pPC.png"></p><p>然后发现 这一层是上一层kr &#x3D; kR[&quot;apply”](kS, kP) 生成的。</p><p>所以继续插装 这个位置的length</p><p>最后走到这个位置。</p><p>这里发现。有传参的两个值。第一个 是一串类似于hash加密的。</p><p>第二端是把这个值转换成数组。这个直接抠出来就可以。</p><p><img src="https://s2.loli.net/2024/09/13/G3NVyLHx5uzZIiX.png"></p><p>这里继续回去看最外层的日志。</p><p>这里直接贴3张图。一眼就能看懂</p><p><img src="https://s2.loli.net/2024/09/13/qF9vdimx8ycJHlQ.png"></p><p><img src="https://s2.loli.net/2024/09/13/FvWiS4u8zRQ2Lkl.png"></p><p><img src="https://s2.loli.net/2024/09/13/zuXo78ephOGHZNi.png"></p><p>至此的话。a5就算是搞定了。</p><h1 id="a6"><a href="#a6" class="headerlink" title="a6"></a>a6</h1><p>直接老样子 根据日志 去插装</p><p><img src="https://s2.loli.net/2024/09/13/bGpDuJynCiHgANw.png"></p><p>最后瞎JB一顿乱找 和 乱猜</p><p>定位点如下图所示</p><p><img src="https://s2.loli.net/2024/09/13/5cadXL6VWbYZAke.png"></p><p>OK 这个函数直接缺啥扣啥。确实感觉没什么写的。</p><p>至此 a3 a5 a6 全部搞定。</p><p><img src="https://s2.loli.net/2024/09/14/GRQLv68qbyUgEY3.png"></p><p>后面拼出来就行了。</p><p>然后找几个关键校验的接口 这里我用的是某Boking 去测试的。至于 还有a8 和 d1 。。 只能说待续</p><p><img src="https://s2.loli.net/2024/09/14/DkvWtXI8MrfYKR2.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Linux 安装node</title>
      <link href="/2024/09/09/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%20%E5%AE%89%E8%A3%85node/"/>
      <url>/2024/09/09/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%20%E5%AE%89%E8%A3%85node/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在Linux-安装node"><a href="#如何在Linux-安装node" class="headerlink" title="如何在Linux 安装node"></a>如何在Linux 安装node</h1><p>之前说过 NVM安装node 非常方便。但是在某些环境上 安装NVM 会一直卡住不动。非常头疼。</p><p>这里直接安装Node</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a></p><p>选择 文中的 <strong>Linux 二进制文件 (x64)</strong></p><p>右击 复制链接 </p><p><img src="https://s2.loli.net/2024/09/09/3d8jFrSKDNvs5pa.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>直接 wget 下载链接</p><p> <img src="https://s2.loli.net/2024/09/09/vnRrQaoEWYFbZjs.png"></p><p>然后 执行如下命令</p><p>-C 是指定目录解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf node-v20.17.0-linux-x64.tar.xz -C /usr/local/bin<br></code></pre></td></tr></table></figure><p>重命名一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> node-v20.17.0-linux-x64/ node-v20<br></code></pre></td></tr></table></figure><p>建立软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -sf /usr/local/bin/node-v20/bin/node /usr/local/bin/node<br><br><span class="hljs-built_in">ln</span> -sf /usr/local/bin/node-v20/bin/npm /usr/local/bin/npm<br></code></pre></td></tr></table></figure><p>如果报错就</p><p>把 <strong>-s</strong> 命令修改成 <strong>-sf</strong> 命令；<strong>-f</strong> 命令的意思是强制执行，也就意味着如果不存在就执行创建，存在就执行覆盖掉</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>编译环境文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/profile<br></code></pre></td></tr></table></figure><p>新增如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NODE_HOME=/usr/local/bin/node-v20/bin<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>:/usr/local/bin/<br></code></pre></td></tr></table></figure><p>然后刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>然后执行Node ~ 直接大功告成。 怎么说~~</p><p><img src="https://s2.loli.net/2024/09/09/VtXqJUNWaY1lekQ.png"></p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plasmo框架</title>
      <link href="/2024/09/07/plasmo%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/09/07/plasmo%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>plasmo 是一个用于构建浏览器扩展的框架，它基于 React 和 TypeScript，提供了一套简单易用的 API，可以帮助开发者快速构建功能丰富的浏览器扩展。<br>plasmo 的主要特点包括：跨平台支持、模块化开发、丰富的插件系统等。通过使用 plasmo，开发者可以轻松地创建出具有强大功能的浏览器扩展，例如：广告拦截器、密码管理器、翻译工具等。</p><h2 id="安装器安装"><a href="#安装器安装" class="headerlink" title="安装器安装"></a>安装器安装</h2><p>这里使用 pnpm 安装</p><p>pnpm安装<br>在powershell中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Invoke-WebRequest https://get.pnpm.io/install.ps1 -UseBasicParsing | Invoke-Expression<br></code></pre></td></tr></table></figure><p>直接拉github 可能比较慢</p><p>也可以在npm中安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g pnpm<br><span class="hljs-comment"># 或者</span><br>npm install -g @pnpm/exe<br></code></pre></td></tr></table></figure><p>兼容性<br>以下是各版本 pnpm 与各版本 Node.js 之间的兼容性表格。</p><table><thead><tr><th>Node.js</th><th>pnpm 7</th><th>pnpm 8</th><th>pnpm 9</th></tr></thead><tbody><tr><td>Node.js 12</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Node.js 14</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>Node.js 16</td><td>✔️</td><td>✔️</td><td>❌</td></tr><tr><td>Node.js 18</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>Node.js 20</td><td>✔️</td><td>✔️</td><td>✔️</td></tr></tbody></table><h2 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm create plasmo<br><br>yarn create plasmo<br><br>npm create plasmo<br></code></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plasmo create plasmo_study<br></code></pre></td></tr></table></figure><p>这里创建项目 输入自己的项目名 |描述|作者名</p><p><img src="https://s2.loli.net/2024/09/07/GSxYd87LOMf2P4k.png"></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plasmo dev<br></code></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://s2.loli.net/2024/09/07/75IHzpOoKDyJLmN.png"></p><h2 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;My Extension&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A simple extension&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default_popup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;popup/index.html&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;storage&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;activeTab&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 权限  </span><br>  <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;service_worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;background/index.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;content_scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;matches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;all_urls&gt;&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;content/index.js&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>background 脚本用于处理扩展的后台逻辑，例如：监听浏览器事件、与浏览器通信等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Plasmo</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@plasmo/core&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Plasmo</span>.<span class="hljs-title function_">registerBackground</span>(&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">onInstall</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Extension installed&quot;</span>);<br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">onUpdated</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Extension updated&quot;</span>);<br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">onMessage</span>(<span class="hljs-params"><span class="hljs-attr">message</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">sender</span>: <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Message received:&quot;</span>, message);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Message received&quot;</span>;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="content"><a href="#content" class="headerlink" title="content"></a>content</h2><p>content 脚本用于在网页中注入代码，例如：修改网页内容、添加事件监听等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Plasmo</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@plasmo/core&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Plasmo</span>.<span class="hljs-title function_">registerContent</span>(&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">onDOMReady</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;DOM ready&quot;</span>);<br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">onMessage</span>(<span class="hljs-params"><span class="hljs-attr">message</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">sender</span>: <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Message received:&quot;</span>, message);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Message received&quot;</span>;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="popup"><a href="#popup" class="headerlink" title="popup"></a>popup</h2><p>popup 脚本用于创建扩展的弹出窗口，例如：显示扩展的界面、与用户交互等。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Plasmo</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@plasmo/core&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Plasmo</span>.<span class="hljs-title function_">registerPopup</span>(&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, Plasmo!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&quot;Hello, Plasmo!&quot;)&#125;&gt;Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>plasmo.config.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PlasmoConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@plasmo/core&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PlasmoConfig</span>(&#123;<br>  <span class="hljs-comment">// 配置项</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>plasmo 是一个功能强大的浏览器扩展开发框架，它提供了丰富的 API 和插件系统，可以帮助开发者快速构建出具有强大功能的浏览器扩展。通过使用 plasmo，开发者可以轻松地实现广告拦截、密码管理、翻译工具等功能，为用户提供更加便捷、安全的浏览体验。</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器插件开发</title>
      <link href="/2024/09/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2024/09/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>本文参考文档:  <a href="https://www.yuque.com/tuntun-nozomi/gurht0">浏览器插件开发教程文档 (yuque.com)</a> </p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><ul><li>manifest.json</li><li>service worker</li><li>content scripts</li><li>插件页面</li></ul><h1 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 必须的</span><br>  <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;插件名称&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;版本&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// 常用</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;插件描述&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;作者名&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 配置service worker</span><br>  <span class="hljs-attr">&quot;service_worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;background.js&quot;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;options_ui&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 配置options页面</span><br>  <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;options.html&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;open_in_tab&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;content_scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 配置content scripts</span><br>  <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;matches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;*://www.baidu.com/*&quot;</span><br>   <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;test.js&quot;</span><br>   <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;all_frames&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;web_accessible_resources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 配置Web可访问资源</span><br>  <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;matches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;*://www.baidu.com/*&quot;</span><br>   <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;resources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;test.css&quot;</span><br>   <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;host_permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 与主机权限相关，推荐使用同样的设置</span><br>  <span class="hljs-string">&quot;https://*/*&quot;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 配置插件所使用的api权限</span><br>  <span class="hljs-string">&quot;storage&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;contextMenus&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;cookies&quot;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 使用action api配置插件工具栏中图标、弹出页面等内容</span><br>  <span class="hljs-attr">&quot;default_icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon16.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;32&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon32.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;48&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon48.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;64&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon64.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;128&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon128.png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default_popup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;popup.html&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon16.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;32&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon32.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;48&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon48.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;64&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon64.png&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;128&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon128.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="content-scripts"><a href="#content-scripts" class="headerlink" title="content scripts"></a>content scripts</h2><p>文档如下: <a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/">https://developer.chrome.com/docs/extensions/mv3/content_scripts/</a></p><p>content scripts只能使用部分的浏览器api，最常用的api为storage与runtime两个api。</p><table><thead><tr><th>配置项</th><th>详情</th><th></th></tr></thead><tbody><tr><td>matches</td><td>指定此内容脚本将被注入到哪些页面，详见<a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/">match_patterns</a></td><td></td></tr><tr><td>js</td><td>要注入匹配页面的 JavaScript 文件列表。它们按照它们在此数组中出现的顺序注入。</td><td></td></tr><tr><td>css</td><td>要注入匹配页面的 CSS 文件列表。在为页面构造或显示任何 DOM 之前，它们按照它们在此数组中出现的顺序注入。</td><td></td></tr><tr><td>all_frames</td><td>默认为<code>false</code>，表示仅匹配顶部框架。 如果指定<code>true</code>，它将注入所有框架，即使该框架不是选项卡中最顶层的框架。每个框架都独立检查 URL 要求，如果不满足 URL 要求，它不会注入子框架。</td><td></td></tr><tr><td>run_at</td><td>document_idle</td><td>参考：<a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#run_time">运行</a></td></tr><tr><td>document_start</td><td></td><td></td></tr><tr><td>document_end</td><td></td><td></td></tr></tbody></table><h2 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h2><p>一个插件只能有一个service worker，可以在manifest配置type来使service worker声明为<code>ES Module</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;<span class="hljs-attribute">background</span>&quot;: &#123;<br>  &quot;service_worker&quot;: <span class="hljs-string">&quot;background.js&quot;</span>,<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;module&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在background.js 中 设置如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">chrome.<span class="hljs-property">action</span>.<span class="hljs-property">onClicked</span>.<span class="hljs-title function_">addListener</span>(<span class="hljs-title function_">async</span> (tab) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tab);<br>    <span class="hljs-keyword">if</span> (tab.<span class="hljs-property">url</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;www.baidu.com&quot;</span>)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this is baidu page&quot;</span>);<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123; <span class="hljs-attr">tabId</span>: tab.<span class="hljs-property">id</span> &#125;,<br>            <span class="hljs-attr">files</span>: [<span class="hljs-string">&#x27;exec.js&#x27;</span>],<br>            <span class="hljs-attr">world</span>:<span class="hljs-string">&quot;MAIN&quot;</span> <span class="hljs-comment">// 设置主环境</span><br>        &#125;);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this is not baidu page&quot;</span>); <br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上文意思是。点击这个图标 代表着 执行下面这个js 并且主环境</p><h2 id="Ul-elements"><a href="#Ul-elements" class="headerlink" title="Ul elements"></a>Ul elements</h2><p><a href="https://developer.chrome.com/docs/extensions/develop/ui?hl=zh-cn#additional_features">界面组件  | Chrome Extensions  | Chrome for Developers</a></p><p>样式很多 自己看</p><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p><a href="https://developer.chrome.com/docs/extensions/develop/ui?hl=zh-cn#additional_features">界面组件  | Chrome Extensions  | Chrome for Developers</a></p><p>由于content_scripts运行在网页中，而不是浏览器插件的环境，所以它需要一些特殊的方式来和浏览器插件的内容进行通信。</p><p>通信的方式包括用于一次性请求的简单通信和用于长期连接的长连接通信。</p><p>挨个传递通信</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯天御滑块流程逆向</title>
      <link href="/2024/09/05/%E8%85%BE%E8%AE%AF%E5%A4%A9%E5%BE%A1%E6%BB%91%E5%9D%97%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91/"/>
      <url>/2024/09/05/%E8%85%BE%E8%AE%AF%E5%A4%A9%E5%BE%A1%E6%BB%91%E5%9D%97%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="目标网站"><a href="#目标网站" class="headerlink" title="目标网站"></a>目标网站</h1><blockquote><p>aHR0cHM6Ly90ZnoubWFveWFuLmNvbS95YW1haGEvdmVyaWZ5P3JlcXVlc3RDb2RlPThkMDQ3MThlODRmNjE4ZTU1ZDA1N2ZjMDNiODNjY2FkdWUycGImcmVkaXJlY3RVUkw9aHR0cHMlM0ElMkYlMkZ3d3cubWFveWFuLmNvbSUyRmNpbmVtYSUyRjE2MTE5JTNGcG9pJTNEMTA4NDQ5MTYxIy8&#x3D;</p></blockquote><h1 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h1><p>这里先全流程过一下。</p><p>在做这种验证码方面的东西。从后往上看。</p><p>这里滑块走的接口是 cap_union_new_verify</p><p>这个接口负载主要有5个参数类似或者是疑似加密的地方。</p><p>分别为</p><ol><li><strong>ua</strong></li><li><strong>sess</strong></li><li><strong>collect</strong></li><li><strong>eks</strong></li><li><strong>vData</strong></li></ol><p>这里经过分析可知</p><p>UA是由base64加密useragent生成的。</p><p>sess 是由接口返回的</p><p>collect加密 ——&gt; 需要分析</p><p>eks——&gt; 需要分析</p><p>vData——&gt; 需要分析</p><p>这里我们肯定知道大体的流程是</p><p><strong>返回接口值——&gt; 获取背景图片和缺口图片——&gt; 识别获得距离——&gt; 利用算法获取轨迹——&gt; 轨迹加密——&gt; 完成请求。</strong></p><p>那这里我们就来找一下图片</p><p>可以看到 这个图片也需要返回的sess。 继续网上找</p><p><img src="https://s2.loli.net/2024/06/10/EN74CSauDv1jRMV.png"></p><p>这里发现 两次请求的sess 还不一样。那就继续去看</p><p><img src="https://s2.loli.net/2024/06/10/ApVO2NFZJSsCzoG.png"></p><p><img src="https://s2.loli.net/2024/06/10/mSIuD13V5szChav.png"></p><p>这里重新调用下代码。补一下 yamaha&#x2F;verify 接口的JS</p><p>拼接得到 背景图和缺口图。进而得到距离。</p><p>然后就是考虑几个加密参数如何 生成了。</p><h1 id="参数生成分析"><a href="#参数生成分析" class="headerlink" title="参数生成分析"></a>参数生成分析</h1><p>如下图位置 。进JS网上找栈点。</p><p><img src="https://s2.loli.net/2024/06/10/cmatQ9yihK7DTjr.png"></p><p>然后如图位置打断点。看下生成值</p><p><img src="https://s2.loli.net/2024/06/10/RXpVfdETeugbYCD.png"></p><p>如图 就是collect生成位置。</p><p><img src="https://s2.loli.net/2024/06/10/lq9QXiEh7ZrkyBY.png"></p><p>这里先记住这个地方。先来分析下Vdata 和 eks</p><p><strong>eks生成处</strong></p><p><img src="https://s2.loli.net/2024/06/10/QN1gwKPE2W5Bofp.png"></p><p>追栈找。发现这个是l方法的info</p><p><img src="https://s2.loli.net/2024/06/10/5yBasUpnmFH4hto.png"></p><p>后经过多次单步调试。发现走的都是同一个接口</p><p>而这个接口 也是JSVMP的入口函数。包括collect的生成。</p><p><img src="https://s2.loli.net/2024/06/10/IUFjwsP4oQu56Hc.png"></p><p><strong>collect</strong></p><p>这里回头再来看看这个collect </p><p>单步调试进栈</p><p><img src="https://s2.loli.net/2024/06/10/TIAGX7obJ4nHxSw.png"></p><p>可以发现和上面的eks 走的同一个入口。</p><p><img src="https://s2.loli.net/2024/06/10/f9Xs1G2HqBx46bw.png"></p><p>这里话不多说。直接开补。</p><p>第一步：复制JS到浏览器 看看能否出值。</p><p>直接调用 window.TDC.getData(!0)</p><p><img src="https://s2.loli.net/2024/06/10/wcbACN84iEKDypR.png"></p><p>第二步： 去github 找个趁手的开源补环境框架（很重要，简单的确实补的不行。）</p><p>第三步： 复制到node 开补。</p><p>缺啥补啥。但是其中包含了</p><ol><li>对原型链的检测。</li><li>对dom链式调用的检测</li><li>对canvas 以及其原型链的调用</li><li>还有body以及div的一些检测。</li></ol><p>过掉这些 基本就能正确出值了。</p><p>但是正确出值 也只是不包含轨迹以及其他特定检测的出值。</p><p>这里我们补环境得到值。需要使用Dom去监听鼠标事件。</p><p>打开mouseup断点。然后单步进栈</p><p>如图位置打上日志断点。</p><p><img src="https://s2.loli.net/2024/06/10/5LO2NxbzpPyge63.png"></p><p>后面根据a.type 判断轨迹走向。</p><p>然后伪造轨迹 通过事件喂给JS。最终拿到最终的collect 以及其他的值。</p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现JSVMP</title>
      <link href="/2024/08/23/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0JSVMP/"/>
      <url>/2024/08/23/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0JSVMP/</url>
      
        <content type="html"><![CDATA[<!--toc--><hr><h1 id="从零JSVMP"><a href="#从零JSVMP" class="headerlink" title="从零JSVMP"></a>从零JSVMP</h1><p>JSCode ——&gt; Ast——&gt; 指令 ——&gt; 执行指令</p><h1 id="简单的解释器"><a href="#简单的解释器" class="headerlink" title="简单的解释器"></a>简单的解释器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>*<span class="hljs-number">5</span>+<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><ol><li>2*5</li><li>10+8</li><li>console.log(18)</li></ol><p>mul 2,5</p><p>add 10,8</p><p>print 18</p><p><strong>栈的形式</strong></p><blockquote><ol><li>push 2</li><li>push 5</li><li>mul</li><li>push 8</li><li>add</li><li>print</li></ol></blockquote><p>**栈： 先进后出 **</p><blockquote><ol><li>push</li><li>mul</li><li>add</li><li>print</li></ol></blockquote><p>得到指令集 &gt; [1,2,1,5,2,1,8,3,4]</p><p>2*5*8+2*3</p><p>得到指令集 &gt;  [1,2,1,5,2,1,8,2,1,2,1,3,2,3,4]</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 反爬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团ebooking登录爬取流程</title>
      <link href="/2024/08/23/%E7%BE%8E%E5%9B%A2ebooking%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/08/23/%E7%BE%8E%E5%9B%A2ebooking%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="目标网站"><a href="#目标网站" class="headerlink" title="目标网站"></a>目标网站</h1><blockquote><p><a href="https://ebooking.meituan.com/ebk/login/login.html?redirect=https://ebooking.meituan.com/ebooking/new-workbench/index.html">登录 | 美团酒店EBooking (meituan.com)</a></p></blockquote><h1 id="cookie传入流程"><a href="#cookie传入流程" class="headerlink" title="cookie传入流程"></a>cookie传入流程</h1><ol><li>获取cookie [ebbsid] 这个值  直接hook到session中。</li><li>请求ebooking&#x2F;common&#x2F;basicinfo 这个请求 拿到酒店信息</li><li>根据返回的酒店信息拿到UserID和partnerId 当作 【_mtsi_eb_u 】【 _mtsi_eb_p 】【 optimus_uuid】</li><li>伪造请求orders&#x2F;auto&#x2F;poiList 拿到酒店ID</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSVMP逆向流程——QQ音乐</title>
      <link href="/2024/08/23/QQ%E9%9F%B3%E4%B9%90/"/>
      <url>/2024/08/23/QQ%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h1 id="目标网站"><a href="#目标网站" class="headerlink" title="目标网站"></a>目标网站</h1><blockquote><p>aHR0cHM6Ly95LnFxLmNvbS8&#x3D;</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>补环境 直接秒，搞过的可以划走\x7e，没事水一篇文章，很简单，只是自己确实算法搞得一般 就写个文章记录下。</p><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>搜索sign:</p><p><img src="https://s2.loli.net/2024/08/25/edug9TaOszxbSlE.png"></p><p>进入n(350).default 这个栈</p><p><img src="https://s2.loli.net/2024/08/25/p2NFem5YHvJVEn1.png"></p><p>然后打日志点 &gt;&gt;&gt; 【”index&gt;&gt;&gt;&gt;&gt;&gt;”,g+1,”n[g+1]&gt;&gt;&gt;&gt;”,n[g+1],”d&gt;&gt;&gt;”,d】</p><p><img src="https://s2.loli.net/2024/08/25/k7CUu1A43jQ9ecT.png"></p><p><img src="https://s2.loli.net/2024/08/25/DXNxBie16gE2Rlp.png"></p><p>然后就可以保存日志去分析了。</p><p>保存几次日志+分析可知</p><p>这段加密代码分为三段</p><p><img src="https://s2.loli.net/2024/09/25/5beuFHifPSTBRvl.png"></p><ol><li>zzc是写死的</li><li>CBE27B5与 75DF5672算法一致</li><li>中间的这段fE0xfaKRxUTKwTNXZSbMCFWXVaA是分析的重点</li></ol><h1 id="头尾两段"><a href="#头尾两段" class="headerlink" title="头尾两段"></a>头尾两段</h1><p>我们先来看首位吧 这个比较简单</p><p>先找到第一处 往上一直走</p><p><img src="https://s2.loli.net/2024/09/25/bMJVmX5jO3NY1zg.png"></p><p>然后就看到了 这样的栈。可谓是非常简单了。</p><p><img src="https://s2.loli.net/2024/09/25/rIPKSdCLGfbt7N8.png"></p><p>直接还原。</p><p>最后一段 也是一样的逻辑</p><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> encrypt_str = <span class="hljs-string">&quot;********************************&quot;</span> <span class="hljs-comment">// 脱敏展示</span><br><br><br><span class="hljs-keyword">let</span> first_index = [<span class="hljs-number">23</span>, 脱敏展示, <span class="hljs-number">6</span>, 脱敏展示, <span class="hljs-number">16</span>, 脱敏展示, <span class="hljs-number">7</span>, 脱敏展示];<br><span class="hljs-keyword">let</span> last_index = [<span class="hljs-number">16</span>, 脱敏展示, <span class="hljs-number">32</span>, 脱敏展示, <span class="hljs-number">19</span>, 脱敏展示, <span class="hljs-number">8</span>, 脱敏展示];<br><br><span class="hljs-keyword">let</span> first_encrypt = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">let</span> last_encrypt = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">// 第一段加密</span><br><br>first_index.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;<br>    first_encrypt += encrypt_str.<span class="hljs-title function_">charAt</span>(index);<br>&#125;);<br><br><span class="hljs-comment">// 最后一段</span><br>last_index.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;<br>    last_encrypt += encrypt_str.<span class="hljs-title function_">charAt</span>(index);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(first_encrypt)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(last_encrypt)<br></code></pre></td></tr></table></figure><h1 id="中间"><a href="#中间" class="headerlink" title="中间"></a>中间</h1><p>老样子 找到第一段生成处。网上一直找</p><p><img src="https://s2.loli.net/2024/09/25/2nUVolAjfde4R8h.png"></p><p>可以看到 如图 上面是replace 去除掉 源生成出的一些符号 &#x2F; 和 + 以及一些其他符号。</p><p>这里继续往上看。如下图所示</p><p>然后我们发现这样一个 地方。</p><p>每次生成值的时候都有一堆的操作。</p><p>然后再陆续吐值，那是不是代表着 这段空白没有生成值的地方。就是生成的呢？</p><p><img src="https://s2.loli.net/2024/09/25/zZeJ8MYC7Vyiv9m.png"></p><p>这里回网页去看  下文中的case例</p><p><img src="https://s2.loli.net/2024/09/25/4KNCpA9cjaPG6hu.png"></p><p>那这里就看看case 21 打下断点，在78的位置传入日志断点。</p><p>这里为了方便调试。我们直接在网页去看了。其他的日志断点关闭。</p><p>经过反复调试，这里我们打印下这个189位 因为只有这样 最后我们才知道生成了没有。</p><p><img src="https://s2.loli.net/2024/09/25/aYB4DPRMJQv7W98.png"></p><p>并且多次调试可以发现这个数组和 之前头尾两端一样，数组是写死的。</p><p><img src="https://s2.loli.net/2024/09/25/43NHOurVfBi5jlq.png"></p><p>那这样。我们就可以重新插装 然后去分析了</p><p>如下图插装，基本上逻辑已经很清楚了。</p><p><img src="https://s2.loli.net/2024/09/25/CREqM7vG9rhftJV.png"></p><p>这里步骤应该很清楚了。如下图所示</p><p><img src="https://s2.loli.net/2024/09/25/6PwYfJoxdKyCEpW.png"></p><p>那这个难点 其实就是如何s生成这个  数组。我们继续往上追。</p><p>如下图 可以看到。这个数组必定是由 89. 这个数组生成的。</p><p><img src="https://s2.loli.net/2024/09/25/XpB38UKCurtPzx5.png"></p><p>结合之前打的断点。</p><p>向上可以发现。这个数组遍历了20次。然后 遍历到结束。这个新数组就生成了。</p><p>这里 呢 插装 在 case 21开始 即生成的位置。并在返回的位置打上断点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">n[g+<span class="hljs-number">1</span>],g+<span class="hljs-number">1</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(d, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> value === <span class="hljs-variable language_">window</span> || !value || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1000</span> ? <span class="hljs-literal">undefined</span> : value)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/09/26/cUenJaf86SV79mO.png"></p><p>然后找到分析的地方 逐步跟栈分析算法即可。</p><p>这里贴两张图。</p><p><img src="https://s2.loli.net/2024/09/26/JIvtCH5ED7KB8or.png"></p><p><img src="https://s2.loli.net/2024/09/26/mBhEqTNJUxdnzGP.png"></p><p>到这里 算法基本上一目了然 这里简单概括下</p><ol><li>获取hash值 然后通过算法 然后用parseint转换为数组</li><li>和固定数组 [89,39 …] 异或取余得到一个又一个数组。</li><li>把这个数组转换为base64</li><li>将最终值格式化拼接。</li></ol><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>然后就OK。请求下</p><p><img src="https://s2.loli.net/2024/09/26/16Dsoxq9TNEetrF.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫&amp;反爬&amp;反反爬&amp;风控</title>
      <link href="/2024/08/23/%E7%88%AC%E8%99%AB&amp;%E5%8F%8D%E7%88%AC&amp;%E5%8F%8D%E5%8F%8D%E7%88%AC&amp;%E9%A3%8E%E6%8E%A7/"/>
      <url>/2024/08/23/%E7%88%AC%E8%99%AB&amp;%E5%8F%8D%E7%88%AC&amp;%E5%8F%8D%E5%8F%8D%E7%88%AC&amp;%E9%A3%8E%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="基于反爬系统和浏览安全体系"><a href="#基于反爬系统和浏览安全体系" class="headerlink" title="基于反爬系统和浏览安全体系"></a>基于反爬系统和浏览安全体系</h1><p>相比逆向更加有亲和力，逆向只有最后一刻才能得到成就感</p><p>所有反爬的手段只有两个</p><ol><li>鉴权阻止进入（开发端拦截）</li><li>高频组织数据大面积泄露 &#x2F; 防止服务器崩溃（风控层面）</li></ol><p>app 和 web 整体的思想和逻辑是不变的</p><ol><li><p>最开始的本质只是采集数据  &gt;&gt;&gt; 因为我们在获取数据的时候 人为采集太费时间</p></li><li><p>采集数据 （招投标 工商信息。外卖 等等） 转变&gt;&gt;&gt;&gt; 采购 | 抢票 | 模拟登录 | 自动渗透| 刷票| 黄牛| &gt;&gt;&gt; 转变鉴权时期  (没有意识到数据的价值)</p></li><li><p>协议采集 逆向成本高 资源低 性能好 ＞让采集成本高 第一优先级 鉴权 高频拦截</p></li><li><p>真机采集  逆向成本低 资源高 性能低 ＞  高频拦截</p></li><li><p>web自动化 指纹浏览器 rpc rpa</p></li><li><p>app 真机 改机 沙箱 群控 rpc</p></li></ol><p>所谓的反爬的原理 就是利用 浏览器和协议爬虫脚本之间的区别去拦截流量</p><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><p>明文 ——&gt; 加密——&gt; 密文——&gt; 解密——&gt; 明文</p><p>密码学的研究领域可分为密码编码学（cryptography）和密码分析学（cryptanalysis）两个分支</p><p>类似于反爬与爬虫 前者负责加密  后者负责加密</p><p>举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">code_book = &#123;<br>    <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br>    <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>&#125;<br><br>def <span class="hljs-title function_">encrypt</span>(t):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">join</span>([code_book[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t])<br><br>name = <span class="hljs-string">&quot;bccba&quot;</span><br><span class="hljs-title function_">print</span>(<span class="hljs-title function_">encrypt</span>(name))<br></code></pre></td></tr></table></figure><p>这就完成了 bccba 到 23321的过程</p><p>常用加密算法</p><ol><li>对称加密算法： AES 、DES、 3DES、</li><li>国密 SM1234</li><li>非对称加密算法：RSA、DCC、DSA</li><li>哈希摘要算法：MD5、Sha系列、</li></ol><h1 id="基于GRPC的反爬虫"><a href="#基于GRPC的反爬虫" class="headerlink" title="基于GRPC的反爬虫"></a>基于GRPC的反爬虫</h1><p>PB的技术实现。序列化和反序列化</p><p><a href="https://github.com/protocolbuffers/protobuf">https://github.com/protocolbuffers/protobuf</a></p><p>原理就是读取 proto文件从而解析 获取里面的pack 和 message </p><p>进而创建一个数据载荷。然后把这个数据载荷去发送</p><p>要明白攻击者的方式。这很重要。没有攻击何谈防御？</p><h1 id="一、鉴权绕过"><a href="#一、鉴权绕过" class="headerlink" title="一、鉴权绕过"></a>一、鉴权绕过</h1><p>以web为例 常见的鉴权绕过有以下几种</p><ol><li>攻击者以鉴权去猜测实现逻辑和原理<ol><li>适用场景：鉴权很容易，基本一眼或者是hook一下就能搞出来的逆向，常见：base64 md5  hash等</li><li>对抗方法：提升加密的强度，把简单的加密更换掉（des）</li></ol></li><li>攻击者通过JS逆向，复现前端的加密，改写为爬虫程序能够运行加密方法（即，纯算，在爬虫圈使用纯算绕过强校验鉴权）<ol><li>适用场景：防御者使用的加密简单且标准，通常为标准的AES等算法，或者虽然是防御自设算法，但是算法长度很短（纯逻辑仅几百或者几十行）</li><li>对抗方式：提升鉴权的加密强度，使用魔改标准算法或者更强的自研算法</li></ol></li><li>攻击者通过JS逆向，将前端的核心加密代码剥离出来，利用Node 或者其他引擎模拟执行JS<ol><li>适用场景：防御者的加密较为复杂，但是代码相对来说容易读懂，能够大致或者相对容易找到核心代码，并且扣除玻璃代码部分相对容易。</li><li>对抗方式：增加反渗透能力（包括但不局限于：控制台检测，JS代码混淆，逻辑VMP，wasm，鼠标指纹融合）</li></ol></li><li>攻击者通过JS逆向和开发能力，将前端的大部分核心函数全部获取，利用Node去模拟执行——补环境。<ol><li>适用场景：JS执行引擎的时候，不管难度如何，只要锁定核心代码，直接执行即可。</li><li>对抗方式：在鉴权的时候，加入设备指纹，环境指纹（1.可以对抗补环境，2. 可以为后续流量风控收集数据）</li></ol></li><li>攻击者使用RPA&#x2F;RPC&#x2F;指纹浏览器&#x2F;自动化&#x2F;真机&#x2F;进行实时采集。指纹与真实浏览器相差无几。<ol><li>适用场景：逆向难度高，破解鉴权难度大，数据量小，且需求为一次性需求。</li><li>对抗方式：利用大数据风控与业务侧相结合。增加对方采集成本，比如账号 IP 、</li></ol></li></ol><p>整个Web主流的手段路径就是这些 冷门的暂时不记录了。逆向是挖洞绕过门，反爬是造门。防止大部分进入就行了。永远记住，反爬只是拦截流量 而不是锁死流量。</p><p>少部分进入 再通过风控分析 逐步封死</p><p>APP端：算法方面能精通且能稳定爬取已经是人中龙凤。更多的还是针对设备指纹方面的对抗，大部分都是基于对端的hook以及防护检测。</p><h1 id="二、鉴权引入方式"><a href="#二、鉴权引入方式" class="headerlink" title="二、鉴权引入方式"></a>二、鉴权引入方式</h1><table><thead><tr><th></th><th><strong>Cookie</strong></th><th><strong>Header</strong></th><th><strong>params-get</strong></th><th><strong>params-post</strong></th></tr></thead><tbody><tr><td><strong>持久性</strong></td><td>自由设置</td><td>仅支持一次请求</td><td>仅支持一次请求</td><td>仅支持一次请求</td></tr><tr><td><strong>兼容性</strong></td><td>良好</td><td>优秀</td><td>优秀</td><td>优秀</td></tr><tr><td><strong>自由度</strong></td><td>高</td><td>低</td><td>低</td><td>低</td></tr><tr><td><strong>长度限制</strong></td><td>4k</td><td>64k</td><td>2k</td><td>理论上无限制</td></tr><tr><td><strong>业务对接</strong></td><td>方便</td><td>一般</td><td>一般</td><td>较差</td></tr></tbody></table><p>某些引入方式很简单 不同公司和业务选型不同 可以同时选择多种</p><p>某些头部尤其是国外设计。会多种整合到一起。</p><h1 id="三、设备指纹挖掘和设计"><a href="#三、设备指纹挖掘和设计" class="headerlink" title="三、设备指纹挖掘和设计"></a>三、设备指纹挖掘和设计</h1><ol><li><p>挖掘路线</p><ol><li>工作量大 推进难度大 也是最能体现价值的地方对于特性的挖掘越深入，兼容性就会处理的越好。最后的 结果就越好，整体难度防守就高。</li></ol></li><li><p>在鉴权检测中渗入设备指纹的主要目的</p><ol><li>对抗补环境（主要功能） </li><li>为大数据流量风控提供数据基础（主要功能 ）</li><li>为加密提供更多的原始数据，增加破解难度</li></ol></li><li><p>植入设备指纹的注意事项</p><ol><li>多版本浏览器的兼容性</li><li>低端 配置客户端的执行效率与兼容性</li><li>需要对指纹进行合理的分配（即合理搭配植入的方式）</li></ol></li><li><p>植入常见方式（通常下面几个方式会综合出现）</p><ol><li>将植入的指纹以明文加密形式传输给解密服务器</li><li>将植入的指纹以映射压缩的形式传输给解密服务器</li><li>将植入的指纹以破坏性压缩（hash 等摘要算法）再加密或者直接传输给解密服务器</li><li>将指纹合法性提前计算，并传输给解密服务器</li></ol></li><li><p>关于语言特性问题</p><p>这部分严格来说，不算设备指纹，但是一般情况下，在攻击者视角与设备指纹的拦截成都是类似的，所以勉强可以划分进来。在某些不同浏览器 中有众多神奇的特性，可以用来判断段明文来源是否符合浏览器特征</p></li></ol><h1 id="四、TLS检测的具体设计"><a href="#四、TLS检测的具体设计" class="headerlink" title="四、TLS检测的具体设计"></a>四、TLS检测的具体设计</h1><ol><li><p>tls检测设计</p><ol><li>不同网络环境下，不同的浏览器&#x2F;系统，都对应着不同的tls指纹，但是 所有的请求库在没有进行过魔改过下 即改底层请求的逻辑与监测点，几乎都是一致的。</li></ol></li><li><p>黑名单检测</p><ol><li>通过简单实验，将市面上大部分常用的请求库的特征都测试出来，然后封禁入黑名单即可。检测到黑名单就直接杀掉</li></ol></li><li><p>白名单检测（web） </p><p>难度MAX级别</p><p>目前为止没有产品能实现，但是海外防火墙对此方向的识别的精度就非常高。改检测方案的实现难度与工作量非常大。从三个步骤来说</p><ol><li>进行大量的的人工测试，将大部分系统(主流系统)&#x2F;浏览器（大版本即可）&#x2F;网络环境（含不同运营商）&#x2F; 平台（微信浏览器等） 指定拦截规则。</li><li>进行灰度测试，结合现有风控系统&#x2F; 设备指纹（UA,显卡，机器性能，网络状态..）进行策略分析，判断误杀率</li><li>调整拦截方案，重复进行灰度测试，直到误杀率降低至可接受范围。进而上线</li><li>紧盯各个版本浏览器的状态，随时判断误杀情况，避免造成生产事故。</li></ol></li><li><p>白名单检测 （APP）</p><p>由于IOS&#x2F; 安卓 发送请求时。Tls指纹不会发生改变，所以白名单很好设置。只需要把开发时设置的请求库Tls指纹设置为白名单。一般就不会出现明显异常。但是移动端爬虫还是谨慎点。策略非必要不上</p></li></ol><h1 id="五、请求拦截引入设计"><a href="#五、请求拦截引入设计" class="headerlink" title="五、请求拦截引入设计"></a>五、请求拦截引入设计</h1><ol><li><p>特点</p><ol><li>有点类似于无感验证码引入的感觉（其实就是无交互式的验证码 即无感验证码）</li></ol></li><li><p>优与劣</p><p>优势</p><ul><li>易于集成，可以通过简单的配置和嵌入代码块快速集成到现有代码中，无需参与业务代码</li><li>维护方便，可由专人维护，减少业务</li><li>维护成本低，只需要维护单JS即可</li><li>低耦合，符合代码规范</li><li>灵活性良好，业务修改与拦截无关</li></ul><p>劣势</p><ul><li>与业务代码难以绑定，安全性 会在一定程度大打折扣，可以结合验证码</li><li>可操作内容有限，无法与页面元素与其他参数鉴权所融合。</li></ul></li><li><p>适用范围</p><ol><li>业务范围广</li><li>所有业务均有安全性规范</li><li>安全性要求不高</li></ol></li></ol><h1 id="六、关于鉴权总结"><a href="#六、关于鉴权总结" class="headerlink" title="六、关于鉴权总结"></a>六、关于鉴权总结</h1><ol><li><p>概念明晰</p><p>描述反爬领域实现异常拦截的一种形式， 所谓鉴权就是鉴定权限。通过客户端传输过来的密文进行分析，确定本次请求是否合理的一种防止，而这个方式的整个过程被称之鉴权检测过程。换言之，鉴权是一个动词，针对于密文进行但请求合法性检测的整个过程。他是一个整体概念</p></li><li><p>关于数据流量风控与鉴权的关系</p><p>不再是单一请求，而是整体请求。 在鉴权没有办法拦截的情况而采集的一种更加强力的措施（真机对抗），所以通过鉴权过程，虽然是合法的内容，但是会留下很多设备指纹。利用这种痕迹，从宏观再去进行身份识别，确定哪些请求是同一个身份。再去拦截这个身份的过程。所以她和鉴权还是有一点差距的。反爬的目的不是拦截所有请求，而是过滤乃至增加对方的成本。彻底拦截是不显示的一件事。</p></li><li><p>一个正常的鉴权系统的要求</p><ol><li>兼容性（业务要求满足）</li><li>加密方案（魔改算法&#x2F;自研算法&#x2F;实验室算法）</li><li>反渗透方案（混淆，测试拦截，格式化检测）</li><li>性能</li><li>设备指纹 环境的挖掘</li><li>鉴权检测系统</li><li>蜜罐埋点设计</li><li>格式与传值内容规范</li><li>传值多样性 接口多样性</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 反爬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序webview调试</title>
      <link href="/2024/08/09/%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E8%B0%83%E8%AF%95/"/>
      <url>/2024/08/09/%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>链接手机远程Debug调试</p><ol><li>手机用usb连接至电脑</li><li>手机微信内点击 <a href="http://debugxweb.qq.com/?inspector=true">http://debugxweb.qq.com/?inspector=true</a> （只要跳转过微信首页就是开启了调试）</li><li>微信内打开所需调试网址, 例如 <a href="http://weixin.qq.com/">weixin.qq.com</a> </li><li>chrome浏览器打开 chrome:&#x2F;&#x2F;inspect&#x2F;#devices 会看到我们打开的网页 <a href="http://weixin.qq.com/">weixin.qq.com</a> </li><li>在点击chrome里的inspect 直接调试 (可以直接用鼠标进行操作)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin_gorm时间格式化模型类重写</title>
      <link href="/2023/10/26/Gin-gorm%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B%E7%B1%BB%E9%87%8D%E5%86%99/"/>
      <url>/2023/10/26/Gin-gorm%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B%E7%B1%BB%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<!--toc--><hr><p>问题：</p><blockquote><p>在使用GORM中 如果我们使用到了CreateAt 和UpdateAt 就会发现 这个时间的类型是time.Time 而其数据是<br>“2022-10-13T10:14:02.973528+08:00” 这样的,<br>然而这样的数据你说能用确实能用 ，但是一旦写入数据库中就变成了<br>0001-01-01 00:00:00.000000 +00:00</p></blockquote><h1 id="重写数据类型"><a href="#重写数据类型" class="headerlink" title="重写数据类型"></a>重写数据类型</h1><p>话不多说 直接上代码<br>并且此代码通用【小弟也是copy学习视频上的】</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;database/sql/driver&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> timeFormat = <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span><br><span class="hljs-keyword">const</span> timezone = <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br><br><span class="hljs-keyword">type</span> Time time.Time<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> MarshalJSON() ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br>    b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(timeFormat)+<span class="hljs-number">2</span>)<br>    b = <span class="hljs-built_in">append</span>(b, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>    b = time.Time(t).AppendFormat(b, timeFormat)<br>    b = <span class="hljs-built_in">append</span>(b, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> b, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span></span> UnmarshalJSON(data []<span class="hljs-type">byte</span>) (err <span class="hljs-type">error</span>) &#123;<br>    now, err := time.ParseInLocation(<span class="hljs-string">`&quot;`</span>+timeFormat+<span class="hljs-string">`&quot;`</span>, <span class="hljs-type">string</span>(data), time.Local)<br>    *t = Time(now)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> String() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> time.Time(t).Format(timeFormat)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> local() time.Time &#123;<br>    loc, _ := time.LoadLocation(timezone)<br>    <span class="hljs-keyword">return</span> time.Time(t).In(loc)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> Value() (driver.Value, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">var</span> zeroTime time.Time<br>    <span class="hljs-keyword">var</span> ti = time.Time(t)<br>    <span class="hljs-keyword">if</span> ti.UnixNano() == zeroTime.UnixNano() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ti, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span></span> Scan(v <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-type">error</span> &#123;<br>    value, ok := v.(time.Time)<br>    <span class="hljs-keyword">if</span> ok &#123;<br>        *t = Time(value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;can not convert %v to timestamp&quot;</span>, v)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>至于调用就更简单了 如下代码所示</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs golang"><br><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">type</span> Category <span class="hljs-keyword">struct</span> &#123;<br> <span class="hljs-comment">//*gorm.Model</span><br> ID       <span class="hljs-type">uint</span>      <span class="hljs-string">`json:&quot;id&quot; gorm:&quot;primary key&quot;`</span><br> Name     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;name&quot; gorm:&quot;type:varchar(50); not null;unique&quot;`</span><br> CreatedAt Time     <span class="hljs-string">`json:&quot;create_at&quot;`</span><br> UpdatedAt Time     <span class="hljs-string">`json:&quot;update_at&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gin速用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ja3指纹学习</title>
      <link href="/2023/06/26/Ja3%E6%8C%87%E7%BA%B9%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/26/Ja3%E6%8C%87%E7%BA%B9%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!-- toc --><hr><h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>在当今互联网时代，保护通信数据的安全性变得至关重要。为了建立安全的通信连接，TLS（Transport Layer Security）协议被广泛应用于Web浏览器、移动应用和其他网络应用程序中。而与此同时，识别和分析这些TLS通信也成为网络安全研究和威胁情报分析的重要任务之一。JA3指纹作为一种独特的指纹识别技术，为我们提供了一种有效的手段来识别和分析TLS通信。</p><h1 id="JA3指纹的概述"><a href="#JA3指纹的概述" class="headerlink" title="JA3指纹的概述"></a>JA3指纹的概述</h1><h2 id="什么是JA3指纹？"><a href="#什么是JA3指纹？" class="headerlink" title="什么是JA3指纹？"></a>什么是JA3指纹？</h2><p>JA3指纹（JA3 fingerprint）是一种用于网络流量分析的技术，旨在识别和分类不同的TLS（Transport Layer Security）客户端。TLS是一种常用于加密互联网通信的协议，它提供了安全的数据传输和身份验证机制。</p><p>JA3指纹通过分析TLS握手阶段中客户端和服务器之间交换的握手消息来创建一个唯一的指纹。在TLS握手期间，客户端和服务器交换一系列的握手消息，包括支持的TLS版本、密码套件、压缩算法和TLS扩展等信息。JA3指纹将这些消息中的特定字段进行哈希处理，生成一个字符串来表示客户端的TLS配置。</p><p>由于不同的TLS客户端在握手消息中的字段值可能会有所不同，因此它们生成的JA3指纹也会有所不同。这使得JA3指纹可以用于识别和区分不同类型的TLS客户端，例如Web浏览器、移动应用程序、恶意软件等。</p><p>通过分析网络流量中的JA3指纹，安全分析人员和网络管理员可以检测和识别异常的TLS行为、恶意软件的活动或者潜在的网络攻击。然而，值得注意的是，JA3指纹并非绝对可靠，因为攻击者可以通过更改TLS</p><h2 id="JA3指纹的组成和格式"><a href="#JA3指纹的组成和格式" class="headerlink" title="JA3指纹的组成和格式"></a>JA3指纹的组成和格式</h2><p>JA3指纹由TLS握手消息中的特定字段值组成，并使用逗号进行分隔。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li><p>JA3_HASH,JA3_SSLVersion,JA3_CipherSuites,JA3_Extensions</p></li><li><p>JA3_HASH：这是根据TLS握手消息中的客户端Hello消息计算得出的哈希值，通常使用MD5或SHA256算法生成。JA3_HASH用于唯一标识TLS客户端的配置。</p></li><li><p>JA3_SSLVersion：这是客户端支持的TLS版本号。例如，TLS 1.2的版本号是0x0303，TLS 1.3的版本号是0x0304。</p></li><li><p>JA3_CipherSuites：这是客户端支持的加密套件列表。加密套件指定了用于加密通信的加密算法和密钥交换协议。每个加密套件都有一个唯一的标识号。在JA3指纹中，多个加密套件由逗号分隔。</p></li><li><p>JA3_Extensions：这是客户端在TLS握手消息中发送的TLS扩展列表。TLS扩展提供了额外的功能和安全性选项。常见的扩展包括Server Name Indication (SNI)、Supported Elliptic Curves、Supported Point Formats等。在JA3指纹中，多个扩展由逗号分隔。</p></li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>以下是一个示例JA3指纹的格式：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">eb<span class="hljs-number">6</span>f<span class="hljs-number">49e8</span>db<span class="hljs-number">7</span>ad<span class="hljs-number">1809</span>f<span class="hljs-number">885</span>d<span class="hljs-number">12232</span>f<span class="hljs-number">4855</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x0303</span><span class="hljs-punctuation">,</span><span class="hljs-number">0xc02c</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>b<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>f<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">00</span>a<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">009</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">013</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">014</span><span class="hljs-punctuation">,</span><span class="hljs-number">0xff01</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x0000</span><br></code></pre></td></tr></table></figure><p>在上述示例中，</p><ol><li>JA3_HASH为<code>eb6f49e8db7ad1809f885d12232f4855</code>，</li><li>JA3_SSLVersion为<code>0x0303（表示TLS 1.2）</code>，</li><li>JA3_CipherSuites包括多个加密套件</li><li>JA3_Extensions为空。</li></ol><h2 id="JA3握手指纹和JA3S指纹的区别"><a href="#JA3握手指纹和JA3S指纹的区别" class="headerlink" title="JA3握手指纹和JA3S指纹的区别"></a>JA3握手指纹和JA3S指纹的区别</h2><p>JA3指纹和JA3S指纹是两种相关但略有不同的TLS指纹技术。</p><ol><li><p>JA3指纹（Just Another SSL&#x2F;TLS Fingerprint）：它是根据客户端发送的TLS握手消息中的字段值生成的指纹。这些字段包括SSL&#x2F;TLS版本、加密套件、TLS扩展等信息。JA3指纹用于识别和分类不同的TLS客户端。</p></li><li><p>JA3S指纹（Just Another SSL&#x2F;TLS Signature）：它是基于服务器在TLS握手过程中发送的服务器Hello消息中的字段值生成的指纹。与JA3指纹不同，JA3S指纹用于识别和分类不同的TLS服务器。</p></li></ol><p>JA3指纹和JA3S指纹的生成方法类似，都是通过计算握手消息中的字段值的哈希值来生成唯一的指纹。它们的区别在于指纹生成的消息来源不同：JA3指纹是基于客户端Hello消息，而JA3S指纹是基于服务器Hello消息。</p><p>这两种指纹技术在网络安全领域中被广泛应用，可以用于检测异常的TLS行为、识别恶意软件和网络攻击等。同时，它们也有一定的局限性，因为攻击者可以伪造或篡改握手消息中的字段值，以逃避指纹识别。因此，在使用JA3和JA3S指纹进行分析时，需要结合其他技术和方法进行验证和确认。</p><p>JA3和JA3S工具现在已经开源<br>下载地址： <a href="https://github.com/salesforce/ja3">https://github.com/salesforce/ja3</a></p><h1 id="JA3指纹的工作原理"><a href="#JA3指纹的工作原理" class="headerlink" title="JA3指纹的工作原理"></a>JA3指纹的工作原理</h1><h2 id="TLS握手过程的关键信息"><a href="#TLS握手过程的关键信息" class="headerlink" title="TLS握手过程的关键信息"></a>TLS握手过程的关键信息</h2><p>TLS握手过程中包含了多个关键信息，这些信息对于建立安全连接和进行身份验证非常重要。以下是TLS握手过程中的一些关键信息：</p><ol><li><p>客户端支持的TLS版本：客户端在ClientHello消息中指定其支持的TLS版本，例如TLS 1.2或TLS 1.3。服务器会根据客户端支持的版本选择适当的协议版本进行通信。</p></li><li><p>加密套件（Cipher Suite）：加密套件定义了在通信过程中使用的加密算法和密钥交换算法。它包括对称加密算法（如AES、DES）、密钥交换算法（如RSA、Diffie-Hellman）和消息认证算法（如HMAC）等。</p></li><li><p>随机数（Random）：客户端和服务器都会生成一个随机数，用于生成对称加密算法的密钥、初始化向量（IV）和计算消息认证码（MAC）。随机数的目的是增加通信的随机性和安全性。</p></li><li><p>数字证书（Digital Certificate）：服务器在ServerHello消息中会发送数字证书，证书用于验证服务器的身份。证书包含服务器的公钥和证书颁发机构（CA）的签名，客户端可以使用该公钥验证服务器的身份和建立安全通信。</p></li><li><p>客户端密钥交换（Client Key Exchange）：在握手过程中，客户端可能需要发送密钥交换相关的信息，用于与服务器协商会话密钥。这可以是一个PreMaster Secret（预主密钥）或Diffie-Hellman交换的公钥。</p></li><li><p>会话标识符（Session Identifier）：服务器可以为成功建立的会话分配一个唯一的会话标识符，以便在后续的握手过程中快速恢复会话状态，从而提高性能。</p></li><li><p>TLS扩展（TLS Extensions）：TLS扩展提供了额外的功能和安全性选项。常见的扩展包括Server Name Indication（SNI，用于指定服务器的域名）、支持的加密算法、应用层协议协商（ALPN）等。</p></li></ol><p>这些关键信息在TLS握手期间的交换和协商，确保了通信的机密性、完整性和身份验证，从而建立了安全的TLS连接。</p><h2 id="通过TLS握手信息生成JA3指纹"><a href="#通过TLS握手信息生成JA3指纹" class="headerlink" title="通过TLS握手信息生成JA3指纹"></a>通过TLS握手信息生成JA3指纹</h2><p>生成JA3指纹需要从TLS握手信息中提取关键字段，并对这些字段进行哈希处理。以下是生成JA3指纹的一般步骤：</p><ol><li><p>提取TLS握手消息中的关键字段：从客户端Hello消息中提取以下字段值：</p><pre><code>   - 支持的TLS版本（SSLVersion）   - 加密套件（CipherSuites）   - TLS扩展（Extensions）</code></pre></li><li><p>将提取的字段值组合成一个字符串：将上述字段值按照特定的顺序连接起来，使用逗号进行分隔。例如：SSLVersion,CipherSuites,Extensions。</p></li><li><p>对组合的字符串进行哈希处理：使用特定的哈希算法，例如MD5或SHA256，对上述组合的字符串进行哈希处理，生成一个哈希值。</p></li><li><p>将哈希值作为JA3指纹：将生成的哈希值作为最终的JA3指纹。</p></li></ol><p>需要注意的是，不同的实现和工具可能对字段的顺序和格式有所不同。为了确保一致性，建议使用广泛接受的规范来提取字段和生成JA3指纹。</p><p><strong>示例</strong><br>假设提取的字段值为：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">SSLVersion: <span class="hljs-number">0x0303</span><br>CipherSuites: <span class="hljs-keyword">c</span><span class="hljs-number">02</span><span class="hljs-keyword">c</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>b<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>f<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">00</span>a<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">009</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">013</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">014</span><br>Extensions: <span class="hljs-number">0xff01</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x0000</span><br></code></pre></td></tr></table></figure><p>组合的字符串为：<code>0x0303,c02c,c02b,c02f,c00a,c009,c013,c014,0xff01,0x0000</code><br>通过MD5哈希处理上述字符串得到哈希值：<code>eb6f49e8db7ad1809f885d12232f4855</code><br>最终的JA3指纹为：<code>eb6f49e8db7ad1809f885d12232f4855</code></p><p>实际实现中可能会有一些细微的差异。</p><h2 id="JA3指纹的可变性和唯一性"><a href="#JA3指纹的可变性和唯一性" class="headerlink" title="JA3指纹的可变性和唯一性"></a>JA3指纹的可变性和唯一性</h2><p>JA3指纹具有一定的可变性和唯一性，这取决于TLS客户端的配置和握手消息中的字段值。</p><ol><li>可变性：</li></ol><ul><li><p>不同的TLS客户端可能支持不同的TLS版本、加密套件和TLS扩展，因此它们的JA3指纹会有所不同。</p></li><li><p>特定的TLS客户端可能会在不同的环境或配置下生成不同的JA3指纹。例如，同一款Web浏览器在不同的操作系统、版本或插件配置下生成的JA3指纹可能会有差异。</p></li></ul><ol start="2"><li>唯一性：</li></ol><ul><li><p>在大多数情况下，每个TLS客户端的配置会生成一个唯一的JA3指纹。由于握手消息中的字段值是在握手期间由客户端动态生成的，因此不同的配置通常会产生不同的JA3指纹。</p></li><li><p>JA3指纹的哈希算法（如MD5或SHA256）通常能够保证较低的碰撞概率，即不同的配置生成相同的指纹的可能性较低。</p></li></ul><p>然而，需要注意的是，JA3指纹并不是绝对唯一和确定性的标识符，也存在一些限制和局限性：</p><ol><li><p>攻击者可以通过修改握手消息中的字段值来更改JA3指纹，从而规避指纹识别。</p></li><li><p>同一款TLS客户端的不同版本或补丁更新可能会导致生成不同的JA3指纹，因此在比较和匹配JA3指纹时需要考虑版本和细微差异。</p></li><li><p>由于新的TLS版本、加密套件和扩展的发布，TLS客户端的配置也可能会发生变化，进而影响JA3指纹的唯一性。</p></li></ol><p>综上所述，JA3指纹在识别和分类TLS客户端方面提供了一种有用的方法，但在实际应用中需要综合考虑其他因素并进行进一步验证，以确保准确性和可靠性。</p><h1 id="JA3指纹的应用"><a href="#JA3指纹的应用" class="headerlink" title="JA3指纹的应用"></a>JA3指纹的应用</h1><p>具体分为两部分</p><p><strong>网络安全领域的应用</strong></p><ol><li><p>威胁情报分析</p></li><li><p>恶意软件检测</p></li><li><p>流量分析和监测</p></li></ol><p><strong>应用领域的应用</strong></p><ol><li><p>应用识别和版本检测</p></li><li><p>通信指纹的对比和识别</p></li><li><p>数据包的分类和过滤</p></li></ol><h1 id="JA3指纹的实例和实用技巧"><a href="#JA3指纹的实例和实用技巧" class="headerlink" title="JA3指纹的实例和实用技巧"></a>JA3指纹的实例和实用技巧</h1><p>JA3指纹：eb6f49e8db7ad1809f885d12232f4855</p><p>实用技巧：</p><ol><li><p>JA3指纹的比对：通过收集和比对网络流量中的JA3指纹，可以检测和识别不同类型的TLS客户端。例如，您可以建立一个JA3指纹数据库，并与实时的网络流量进行比对，以发现异常或恶意的TLS行为。</p></li><li><p>恶意软件识别：JA3指纹可用于检测和分类恶意软件的通信行为。通过比对已知恶意软件的JA3指纹，您可以快速识别并阻止类似指纹的流量，以提高网络安全性。</p></li><li><p>威胁情报分析：JA3指纹可以与威胁情报平台进行集成，以获取有关特定指纹的更多信息。这样，您可以了解该指纹是否与已知的恶意活动、攻击或特定组织相关联。</p></li><li><p>异常检测：通过监视网络流量中的JA3指纹变化，您可以识别到不寻常的TLS行为。例如，当某个JA3指纹频繁变化或与正常流量有明显差异时，可能表明存在潜在的安全问题或攻击行为。</p></li><li><p>风险评估和访问控制：在安全环境中，根据JA3指纹可以评估客户端的安全性，并采取相应的访问控制策略。如果某个客户端的JA3指纹与高风险的配置相关，可以采取额外的安全措施，例如强制进行多因素身份验证或限制其访问权限。</p></li><li><p>安全事件响应：JA3指纹可以用于网络安全事件的响应和调查。在检测到安全事件后，可以使用JA3指纹追踪相关的TLS客户端，并识别受影响的系统或用户，从而进行进一步的分析和应对。</p></li></ol><p>注意，JA3指纹仅作为一种辅助工具和指标，应与其他安全技术和方法相结合使用，以全面评估和提高网络安全性。</p><h1 id="JA3指纹的限制和隐私考虑"><a href="#JA3指纹的限制和隐私考虑" class="headerlink" title="JA3指纹的限制和隐私考虑"></a>JA3指纹的限制和隐私考虑</h1><p>JA3指纹具有隐私保护和加密协议选择以及JA3指纹的可变性和易受干扰性</p><p>以下是常见的限制和隐私考虑：</p><ol><li><p>配置和环境的影响：JA3指纹受到TLS客户端的配置和环境影响。不同的配置和环境可能导致不同的JA3指纹，这可能增加了误报或漏报的风险。</p></li><li><p>版本和升级的影响：TLS客户端的版本和升级可能导致JA3指纹的变化。对于同一款TLS客户端的不同版本，其生成的JA3指纹可能会有差异。这需要在分析和比对JA3指纹时考虑版本和细微差异。</p></li><li><p>隐私泄露风险：JA3指纹可以泄露关于客户端的一些信息，例如所使用的TLS版本、加密套件和扩展。这些信息可能被用于识别和追踪特定的客户端，从而对隐私造成风险。特别是在面对具有大规模网络流量的环境时，JA3指纹的唯一性可能导致识别个体用户。</p></li><li><p>指纹伪造：攻击者有可能通过修改TLS握手消息中的字段值来伪造JA3指纹，以规避指纹识别和防御措施。这可能降低JA3指纹的可靠性和准确性，因此在使用JA3指纹时需要谨慎验证和结合其他信息进行分析。</p></li><li><p>数据采集和存储：收集和存储大量的JA3指纹数据可能需要相应的资源和隐私保护措施。确保合规性和数据安全性非常重要，包括数据保护、加密和访问控制等方面的考虑。</p></li></ol><h1 id="抓包展示"><a href="#抓包展示" class="headerlink" title="抓包展示"></a>抓包展示</h1><p>用下某网站做测试 且此网站也有有Ja3指纹加密的</p><blockquote><p>aHR0cHM6Ly9nZ3p5LmppYW5neGkuZ292LmNuL3h3ZHQvMDAxMDAyL3NlYzEuaHRtbA&#x3D;&#x3D;</p></blockquote><h2 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h2><p>!注意 fiddler要想抓Ja3-tls指纹 包<br>要把CONNECTS选项取消勾选，不然抓不到指纹包<br><img src="https://s2.loli.net/2024/08/26/MaLQRDKgSeZ2cl3.png"></p><p>然后我们抓到了很多指纹包，然后我们挨个打开看看<br><img src="https://s2.loli.net/2024/08/26/4xZ839vospTAODV.png"></p><p><img src="https://s2.loli.net/2024/08/26/T3Gb2qZphFXnM8k.png"><br>然后我们看到很多的加密算法，还有加密方式<br><strong>其实这种包其实本质上就是加入黑名单</strong></p><p>已经tls的版本也有<br><img src="https://s2.loli.net/2024/08/26/xRbPZY8wMdE2TU9.png"></p><h2 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h2><p>相比较fiddler charles抓到的包就很有限了。<br>但是操作也更加的简单了<br>我们直接打开charles 然后刷新网站<br><img src="https://s2.loli.net/2024/08/26/FKg6wTEQYM8vtV4.png"><br>这里直接就显示了tls的信息<br><img src="https://s2.loli.net/2024/08/26/e3WR9zNDuijZdV7.png"><br>我们接着点开详细信息 这里显示了tls的加密方式 已经加密的两种方式.</p><p>这两种抓包方式终究还是图一乐，真要抓包还得看wireshark</p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>步骤如下</p><ol><li><p>查询网站IP地址 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; cmd &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; ping xxx.com &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 复制IP地址</p></li><li><p>打开wireShark抓包，选择抓取的网卡</p></li><li><p>刷新浏览器</p></li><li><p>在过滤器中输入 ip.addr &#x3D;&#x3D; 你要查看的ip地址 具体如下图<br><img src="https://s2.loli.net/2024/08/26/EpSkUnq1PbNuc9Y.png"></p></li><li><p>找到一个Client hello的包<br><img src="https://s2.loli.net/2024/08/26/ayHqf3cUi9Jo7tv.png"></p></li><li><p>查看详细信息<br><img src="https://s2.loli.net/2024/08/26/1NDKZ7xSRrPycoe.png"></p></li></ol><p>最下面的是hash指纹 和详细指纹信息<br><img src="https://s2.loli.net/2024/08/26/8SlE1ZWzpYFyod6.png"></p><p>把这个指纹fullstring复制出来<br><code>771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</code><br>这个指纹信息就是网站可以运行的指纹信息</p><h1 id="指纹分析"><a href="#指纹分析" class="headerlink" title="指纹分析"></a>指纹分析</h1><p>指纹信息分析其实很简单，<br>我们接下来用三种方式去获取这个指纹信息<br>也就是上文的<code>771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</code></p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>这里我们选择直接用上文抓包抓到的指纹<br>还有一种方式<br><a href="https://tls.browserleaks.com/json">https://tls.browserleaks.com/json</a> 直接去网站看自己的浏览器指纹也是可以的</p><p>由于上面已经获取了浏览器的指纹了，我们直接就拿来用了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0<br></code></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>接着我们使用requests原生库，即正常访问，携带基本的参数去请求即可<br>我们使用代码去访问下这个网站<a href="https://tls.browserleaks.com/json">https://tls.browserleaks.com/json</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>r = requests.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, verify=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>  <span class="hljs-string">&quot;ja3_hash&quot;</span>: <span class="hljs-string">&quot;8d9f7747675e24454cd9b7ed35c58707&quot;</span>,<br>  <span class="hljs-string">&quot;ja3_text&quot;</span>: <span class="hljs-string">&quot;771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_hash&quot;</span>: <span class="hljs-string">&quot;a790a1e311289ac1543f411f6ffceddf&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_text&quot;</span>: <span class="hljs-string">&quot;771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-10-11-13-16-21-22-23-43-45-49-51,29-23-30-25-24,0-1-2&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_hash&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_text&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所以这个指纹是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2<br></code></pre></td></tr></table></figure><h2 id="python-魔改库"><a href="#python-魔改库" class="headerlink" title="python 魔改库"></a>python 魔改库</h2><p>我们再试试 Python有关SSL的魔改库<br>其实这类库有很多<br>简单举例两个吧 一个是 <code>curl_cffi</code> 一个是 <code>tls_client</code></p><ul><li><p>tls_client : <a href="https://pypi.org/project/tls-client/">https://pypi.org/project/tls-client/</a></p></li><li><p>curl_cffi: <a href="https://pypi.org/project/curl-cffi/">https://pypi.org/project/curl-cffi/</a></p></li></ul><p>我们这里使用curl_cffi 去访问一下看看这个指纹是什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> curl_cffi <span class="hljs-keyword">import</span> requests<br><br>r = requests.get(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>, impersonate=<span class="hljs-string">&quot;chrome101&quot;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>  <span class="hljs-string">&quot;ja3_hash&quot;</span>: <span class="hljs-string">&quot;cd08e31494f9531f560d64c695473da9&quot;</span>,<br>  <span class="hljs-string">&quot;ja3_text&quot;</span>: <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_hash&quot;</span>: <span class="hljs-string">&quot;aa56c057ad164ec4fdcb7a5a283be9fc&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_text&quot;</span>: <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-5-10-11-13-16-18-21-23-27-35-43-45-51-17513-65281,29-23-24,0&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_hash&quot;</span>: <span class="hljs-string">&quot;4f04edce68a7ecbe689edce7bf5f23f3&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_text&quot;</span>: <span class="hljs-string">&quot;1:65536;3:1000;4:6291456;6:262144|15663105|0|m,a,s,p&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而这个指纹是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0<br></code></pre></td></tr></table></figure><h2 id="总结三种方式"><a href="#总结三种方式" class="headerlink" title="总结三种方式"></a>总结三种方式</h2><p>然后我们把这三个指纹拿出来做个对比</p><p><img src="https://s2.loli.net/2024/08/26/ZdyAJjuQvlMxYF1.png"><br><img src="https://s2.loli.net/2024/08/26/q6WHfujkaTKlw9V.png"></p><p>可以清楚地看到 python的魔改库和浏览器的指纹是长度是一样的。</p><p>这样我们可以知道了，这个指纹长度只要和浏览器相同就可以了。</p><p>我们使用魔改库访问开头所要访问的网站实验一下</p><p><img src="https://s2.loli.net/2024/08/26/3VAtJunrdpfLoIa.png"><br>发现可以正常访问</p><p>那该如何不借助魔改库去完成Ja3网站的解密呢<br>可以通过修改ssl的套接字 使得防火墙黑名单失效<br>从而<strong>保证指纹长度一致</strong> 即可完成解密</p><h1 id="tls-检测的绕过方案"><a href="#tls-检测的绕过方案" class="headerlink" title="tls 检测的绕过方案"></a>tls 检测的绕过方案</h1><p><strong>临时方案:</strong></p><p><code>注意 requests库必须在2.4 以上版本 不然会失败</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS =<span class="hljs-string">&#x27;ALL&#x27;</span><br></code></pre></td></tr></table></figure><p>修改了requests内部包的 ssI里面的套接字设置，使防火墙黑名单失效</p><p>动态 DEFAULT CIPHERS :<br><a href="https://www.openssl.org/docs/man1.1.1/man1/openssl-ciphers.html">https://www.openssl.org/docs/man1.1.1/man1/openssl-ciphers.html</a><br><a href="https://support.huaweicloud.com/bestpractice-waf/waf_06_0012.html">https://support.huaweicloud.com/bestpractice-waf/waf_06_0012.html</a><br>这种方法国内处理就已经够了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认 cipher 在这里定义：https://github.com/encode/httpx/blob/master/httpx/_config.py</span><br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">import</span> httpx<br><br><span class="hljs-comment"># create an ssl context</span><br>ssl_context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS)<br>CIPHERS = <span class="hljs-string">&#x27;DH+AES:RSA+AES&#x27;</span><br>ssl_context.set_ciphers(CIPHERS)<br><br>r = httpx.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, verify=ssl_context)<br><span class="hljs-built_in">print</span>(r.text)<br><br></code></pre></td></tr></table></figure><p><strong>非临时方案:</strong><br>自设ssl，并覆写requests中的类的一些方法<br><a href="https://stackoverflow.com/questions/60407057/python-requests-being-fingerprinted">https://stackoverflow.com/questions/60407057/python-requests-being-fingerprinted</a></p><p><a href="https://stackoverflow.com/questions/64967706/python-requests-https-code-403-without-but-code-200-when-using-burpsuite">https://stackoverflow.com/questions/64967706/python-requests-https-code-403-without-but-code-200-when-using-burpsuite</a></p><p>深入理解requests中 建立 tls的过程<br>先抓包看下正常的访问 tls，和requests访问的区别<br>我们需要单步调试requests源码，并且想办法修改 tls访问过程中的UA<br>按照上面的思路，加上对 ssl的理解，就可以实现一个针对于 tls检测的高并发方案</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JA3指纹是一种通过提取和哈希TLS握手消息中的关键字段来标识和识别TLS客户端的方法。它可以用于识别不同类型的TLS客户端、检测恶意软件、进行威胁情报分析、异常检测和风险评估等。</p><p>然而，JA3指纹也有一些限制和隐私考虑。它受到TLS客户端配置和环境的影响，可能受到版本和升级的影响。此外，使用JA3指纹可能泄露一些客户端信息，存在隐私风险，并且有可能被攻击者伪造。</p><p>在使用JA3指纹时，需要综合考虑其实用性和隐私风险。适当的数据采集和存储措施、数据保护、加密和隐私保护措施都是重要的考虑因素。此外，JA3指纹应作为辅助工具和指标，并结合其他安全技术和方法来提高网络安全性。</p><p>总之，JA3指纹提供了一种用于标识和识别TLS客户端的方法，可以在网络安全领域的多个方面发挥作用，但需要在实际应用中权衡其实用性、准确性和隐私风险</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p><a href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/">https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/</a></p></li><li><p><a href="https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/">https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ja3 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的循环方式总结</title>
      <link href="/2023/05/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2023/05/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<!-- toc --><hr><p>在Javascript中有很多种循环方式。有多种循环方式可以用来遍历数组、对象、以及执行一些重复性任务<br>但是有很多方式甚至从未用过，所以简单来总结一下JS中的循环</p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for 循环是在您希望创建循环时经常使用的工具。</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>次循环遍历`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/aIXyfYNPknOws2b.png"></p><h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><p> While语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">100</span>) &#123;<br>    i = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;i&#125;</span>次循环遍历`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/WhvroJ96L1fxD3V.png"></p><h1 id="do……while循环"><a href="#do……while循环" class="headerlink" title="do……while循环"></a>do……while循环</h1><p>先运行循环代码 再执行判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;打印b的值&gt;&gt;&gt;&gt;&gt;&quot;</span>,b);<br>    b++;<br>&#125; <span class="hljs-keyword">while</span> (b &lt; a); <span class="hljs-comment">// 当a小于等于b的时候终止她。</span><br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/Lf6raEnemSPudKT.png" alt="img"></p><ul><li>while：先判断后执行；</li><li>do-while：先执行再判断，即使初始条件不成立；do-while循环至少执行一次；</li></ul><h1 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h1><p>fo…in循环一般用于对象的遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> kj = &#123;<br>    <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br><br><br><span class="hljs-comment">//使用for-in遍历这个对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> kj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k, kj[k])<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/aVIe54tKG16HLuJ.png" alt="img"><br>注！ <code>最好不要用for in遍历数组</code></p><h1 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h1><p>for…of 循环是 ES6 中新增的一种循环类型，它允许您遍历可迭代对象（例如数组、字符串、Map 或 Set）中的每个元素，并对其执行指定的操作。<br>for-of 可以更方便的循环遍历数组等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/Ti758SE6pQ4groa.png" alt="img"></p><ul><li>for in遍历的是数组的索引（即键名）for in更适合遍历对象，不要使用for in遍历数组</li><li>for of遍历的是数组元素值。</li></ul><p><code>使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性</code></p><h1 id="map-循环"><a href="#map-循环" class="headerlink" title="map()循环"></a>map()循环</h1><p>map()是一种常用的数组方法，它可以将一个数组中的每个元素按照一定规则映射为一个新的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> newArray = originalArray.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number)<br>  <span class="hljs-keyword">return</span> number * <span class="hljs-number">2</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArray); <span class="hljs-comment">// Output: [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/SDE1oqAQxwfe2JB.png" alt="img"></p><h1 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h1><p>forEach()是一种常用的数组方法，可以帮助我们遍历一个数组并对其中的每个元素执行指定的操作。<br>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>originalArray.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number * <span class="hljs-number">2</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/UVAELG7gnPkWabm.png" alt="img"></p><p>forEach()方法没有返回值，因此我们不能将其运行结果赋值给其他变量</p><h1 id="filter-过滤循环"><a href="#filter-过滤循环" class="headerlink" title="filter()过滤循环"></a>filter()过滤循环</h1><p>filter()是一种常用的数组方法，它可以帮助我们按照特定条件筛选出一个数组中的部分元素并返回一个新的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> filteredArray = originalArray.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 只返回能被2整除的数 也就是偶数</span><br>  <span class="hljs-keyword">return</span> number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filteredArray);<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="https://img2023.cnblogs.com/blog/2721529/202305/2721529-20230518174323044-1084795998.png" alt="img"></p><p><code>filter()方法不会修改原始数组，而是返回一个新的数组作为其运行结果。因此，如果我们需要在原始数组中删除一些元素，那么就应该使用splice()方法</code></p><h1 id="JS实现Python中的zip循环"><a href="#JS实现Python中的zip循环" class="headerlink" title="JS实现Python中的zip循环"></a>JS实现Python中的zip循环</h1><p>熟悉python的都知道ZIP循环面对循环两个数组很好用 那么在python中如何实现呢？</p><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">zip</span>(<span class="hljs-params">...arrays</span>) &#123;<br>    <span class="hljs-keyword">let</span> minLength = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(...arrays.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.<span class="hljs-property">length</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; minLength; i++) &#123;<br>        <span class="hljs-keyword">yield</span> arrays.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> bList = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [a, b] <span class="hljs-keyword">of</span> <span class="hljs-title function_">zip</span>(aList, bList)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/gXwcHoNVGIUQ5be.png" alt="img"></p><h1 id="some-和every"><a href="#some-和every" class="headerlink" title="some()和every()"></a>some()和every()</h1><p>some() 和 every() 方法是很有用的数组方法，它们都是用来遍历数组并返回布尔值。</p><h2 id="some-方法"><a href="#some-方法" class="headerlink" title="some() 方法"></a>some() 方法</h2><p>some() 方法用来检测数组中是否有至少一个元素满足指定条件。当任意一个元素满足条件，则该方法返回 true；否则，返回 false。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>];<br><span class="hljs-keyword">const</span> hasLargeNumber = numbers.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hasLargeNumber); <br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/QqKu6hwHDnRcUgP.png" alt="img"><br><code>很显然 只要有一个结果满足了 大于10的条件 就返回了true</code></p><h2 id="every-方法"><a href="#every-方法" class="headerlink" title="every() 方法"></a>every() 方法</h2><p>every() 方法与 some() 方法类似，不过它要求所有元素都满足指定条件。当所有元素都满足条件，则该方法返回 true；否则，返回 false。<br>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>];<br><span class="hljs-keyword">const</span> hasLargeNumber = numbers.<span class="hljs-title function_">every</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hasLargeNumber);<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/HZAvBc5yNROwaJC.png" alt="img"><br><code>很显然 只要有一个结果不满足 大于10的条件 就返回了false 和some方法相反</code></p><h1 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce() 和 reduceRight()"></a>reduce() 和 reduceRight()</h1><p>是 JavaScript 数组中常用的两个方法，它们都是用于将数组中的元素归纳为单个值。<br>它们可以帮助您迭代和聚合数组中的元素</p><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce() 方法"></a>reduce() 方法</h2><p>reduce() 方法对数组中的每个元素执行一个由您提供的函数，并将其结果汇总为单个返回值。该方法需要传入两个参数：一个回调函数和一个可选的初始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">//accumulator： 表示当前已经累积的值初始值是0 currentValue 表示当前正在被遍历的数组元素。</span><br><span class="hljs-keyword">const</span> sum = numbers.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, currentValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accumulator,currentValue)<br>  <span class="hljs-keyword">return</span> accumulator + currentValue;<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum)<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/PwGEDJyBmpSvxF6.png" alt="img"></p><ul><li>accumulator： 表示当前已经累积的值初始值是0</li><li>currentValue 表示当前正在被遍历的数组元素。</li></ul><h2 id="reduceRight-方法"><a href="#reduceRight-方法" class="headerlink" title="reduceRight() 方法"></a>reduceRight() 方法</h2><p>reduceRight() 方法与 reduce() 方法类似，不过它是从数组的末尾开始遍历数组并执行回调函数。该方法也需要传入两个参数：一个回调函数和一个可选的初始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">//accumulator： 表示当前已经累积的值初始值是0 currentValue 表示当前正在被遍历的数组元素。</span><br><span class="hljs-keyword">const</span> sum = numbers.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, currentValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accumulator,currentValue)<br>  <span class="hljs-keyword">return</span> accumulator + currentValue;<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum)<br></code></pre></td></tr></table></figure><p>结果<br><img src="https://s2.loli.net/2024/08/26/vuGKBIpcnq4PUSf.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoRequests库</title>
      <link href="/2023/04/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8BGoRequests/"/>
      <url>/2023/04/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8BGoRequests/</url>
      
        <content type="html"><![CDATA[<!-- toc --><hr><p>我们在使用Go做爬虫的时候，首先接触的肯定是 Golang 标准库 net&#x2F;http</p><blockquote><p><a href="https://pkg.go.dev/net/http">https://pkg.go.dev/net/http</a><br>有兴趣的可以去看看文档。<br>但是老实说 这个库个人感觉不是特别的好用</p></blockquote><p>有可能是之前就是使用了Python 所以还是感觉如果有像Python库中的requests<br>那样去实现请求就好了。<br>所以GoRequests 就诞生了。</p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p>DOC: <a href="https://pkg.go.dev/github.com/levigross/grequests">https://pkg.go.dev/github.com/levigross/grequests</a><br>Github: <a href="http://github.com/levigross/grequests">http://github.com/levigross/grequests</a></p><ul><li>响应可以序列化为 JSON 和 XML</li><li>轻松上传文件</li><li>轻松下载文件</li><li>支持以下 HTTP 谓词GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -u github.com/levigross/grequests<br></code></pre></td></tr></table></figure><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><blockquote><p>import “github.com&#x2F;levigross&#x2F;grequests”</p></blockquote><h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs golang">ro := &amp;RequestOptions&#123;<br> Params: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hybpjx&quot;</span>&#125;,<br>&#125;<br><span class="hljs-comment">// url路径上的参数会被覆盖</span><br>resp, err := grequests.Get(<span class="hljs-string">&quot;http://httpbin.org/get?h=1&quot;</span>, ro)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(resp.String())<br></code></pre></td></tr></table></figure><h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs golang">option := &amp;grequests.RequestOptions&#123;Data: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17302343.html&quot;</span>&#125;&#125;<br>resp, err := grequests.Post(<span class="hljs-string">&quot;http://httpbin.org/post&quot;</span>, option)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-keyword">if</span> resp.Ok != <span class="hljs-literal">true</span> &#123;<br> fmt.Println(resp.Ok)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Post上传文件"><a href="#Post上传文件" class="headerlink" title="Post上传文件"></a>Post上传文件</h1><p>还可以支持上传文件</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-comment">// 允许您通过指定磁盘上的位置来创建FileUpload结构片</span><br>fd, err := grequests.FileUploadFromDisk(<span class="hljs-string">&quot;test/1&quot;</span>)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> fmt.Printf(<span class="hljs-string">&quot;文件打开失败:%v\n&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 这将以请求的形式上传文件</span><br>resp, _ := grequests.Post(<span class="hljs-string">&quot;http://httpbin.org/post&quot;</span>,<br> &amp;grequests.RequestOptions&#123;<br>  Files: fd,<br>  Data:  <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;One&quot;</span>: <span class="hljs-string">&quot;Two&quot;</span>&#125;,<br> &#125;)<br><br>fmt.Println(resp.Ok,resp.StatusCode)<br></code></pre></td></tr></table></figure><h1 id="Gorequests-使用session"><a href="#Gorequests-使用session" class="headerlink" title="Gorequests 使用session"></a>Gorequests 使用session</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang">session := grequests.Session&#123;<br>  RequestOptions: &amp;grequests.RequestOptions&#123;<br>   Headers: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>    <span class="hljs-string">&quot;authority&quot;</span>:  <span class="hljs-string">&quot;mp3.haoge500.com&quot;</span>,<br>    <span class="hljs-string">&quot;referer&quot;</span>:    <span class="hljs-string">&quot;https://www.zz123.com/&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&quot;</span>,<br>   &#125;,<br>  &#125;,<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="GoRequests-使用代理"><a href="#GoRequests-使用代理" class="headerlink" title="GoRequests 使用代理"></a>GoRequests 使用代理</h1><p>gorequest代理，非常简单 网上的Demo很多 也不只这一个<br>我展示的是阿布云的代理<br>需要注意的是 需要把 Proxies 中的url 添加为 *url.URL 代理</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> test<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;github.com/levigross/grequests&quot;</span><br> <span class="hljs-string">&quot;net/url&quot;</span><br> <span class="hljs-string">&quot;testing&quot;</span><br> <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// 代理服务器</span><br><span class="hljs-keyword">const</span> proxyServer = <span class="hljs-string">&quot;http-pro.xxx.com:9010&quot;</span><br><br><span class="hljs-comment">// 代理隧道验证信息</span><br><span class="hljs-keyword">const</span> proxyUser = <span class="hljs-string">&quot;xxxxxxxxx&quot;</span><br><br><span class="hljs-keyword">const</span> proxyPass = <span class="hljs-string">&quot;xxxxxxxxx&quot;</span><br><br><span class="hljs-keyword">type</span> Proxy <span class="hljs-keyword">struct</span> &#123;<br> AppID     <span class="hljs-type">string</span><br> AppSecret <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Proxy)</span></span> ProxyURL() *url.URL &#123;<br> proxyUrl, _ := url.Parse(<span class="hljs-string">&quot;http://&quot;</span> + p.AppID + <span class="hljs-string">&quot;:&quot;</span> + p.AppSecret + <span class="hljs-string">&quot;@&quot;</span> + proxyServer)<br> <span class="hljs-keyword">return</span> proxyUrl<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCommon</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br> <span class="hljs-comment">// 初始化 proxy http client</span><br> proxyURL := Proxy&#123;AppID: proxyUser, AppSecret: proxyPass&#125;.ProxyURL()<br> fmt.Println(proxyURL)<br> trueUrl := <span class="hljs-string">&quot;http://www.xiushui.gov.cn/xxgk/bmxxgk/sthjj/sthj/xmhp/index.html&quot;</span><br> ro := &amp;grequests.RequestOptions&#123;<br>  Headers: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>   <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span>,<br>  &#125;,<br>  Proxies: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*url.URL&#123;<br>   <span class="hljs-string">&quot;http&quot;</span>: proxyURL,<br>  &#125;,<br> &#125;<br> resp, err := grequests.Get(trueUrl, ro)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err.Error())<br> &#125;<br> fmt.Println(<span class="hljs-string">&quot;&quot;</span>, resp.StatusCode)<br> time.Sleep(time.Second * <span class="hljs-number">10</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 一日一库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bcrypt库</title>
      <link href="/2023/04/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8Bbcrypt/"/>
      <url>/2023/04/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8Bbcrypt/</url>
      
        <content type="html"><![CDATA[<!-- toc --><hr><blockquote><p>官方文档： <a href="https://pkg.go.dev/golang.org/x/crypto/bcrypt">https://pkg.go.dev/golang.org/x/crypto/bcrypt</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前讲过JWT Token JWT呢是信息是经过数字签名的，因此可以被验证和信任。<br>然后今天就来说说密码学，我们在做鉴权 做用户处理时 会把密码存储到数据库中，但是这个密码我们肯定不能明文去存储，如果这个数据库链接一旦被别人拿到<br>那后果是不堪设想的。不仅仅是为了防止系统管理员或者DBA等公司人员获得用户的密码，也是防止被黑客拖库产生更大的信息泄露。<br>如果黑客通过不法手段获取了服务的数据库存储信息，盗取里面的内容，从而直接获得明文密码，那么影响就会很大。<br>所以我们的密码一般通过几种方式去加密存储</p><ol><li><strong>MD5</strong></li></ol><p>其实个人觉得MD5加密不太好，因为MD5是不加盐的，虽然是不可逆的，但是黑客其实会针对常见的一些密码，生成彩虹表。<br>彩虹表是什么呢？<br><code>是用于加密散列函数逆运算的预先计算好的表，常用于破解加密过的密码散列（维基百科）</code><br>所以相对的感觉安全等级不是很够。</p><ol start="2"><li><strong>SHA1及其他</strong></li></ol><p>SHA-1基于MD5，MD5又基于MD4<br>SHA-1是由美国标准技术局（NIST）颁布的国家标准，是一种应用最为广泛的Hash函数算法，也是目前最先进的加密技术，被政府部门和私营业主用来处理敏感的信息。<br>这个缺点个人认为和 MD5一样。</p><ol start="3"><li><strong>hmacsha</strong></li></ol><p>我之前也写过相应的文章 里面有相应的hmasha加密<br>HMAC是密钥相关的哈希运算消息认证码（Hash-basedMessageAuthenticationCode）,HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。<br>HMAC是需要一个密钥的。所以，HMACSHA1也是需要一个密钥的，而SHA1不需要。</p><ol start="4"><li><strong>CRC</strong></li></ol><p>CRC的全称为CyclicRedundancyCheck，中文名称为循环冗余校验。它是一类重要的线性分组码，编码和解码方法简单，检错和纠错能力强，在通信领域广泛地用于实现差错控制。实际上，除数据通信外，CRC在其它很多领域也是大有用武之地的。例如我们读软盘上的文件，以及解压一个ZIP文件时，偶尔会碰到“BadCRC”错误，由此它在数据存储方面的应用可略见一斑。</p><ol start="5"><li><strong>还有很多加密方式这里就不一 一赘述了…</strong></li></ol><p>这里介绍一种加密方式 <code>bcrypt</code></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>bcrypt是一个由美国计算机科学家尼尔斯·普罗沃斯（Niels Provos）以及大卫·马齐耶（David Mazières）根据Blowfish加密算法所设计的密码散列函数，于1999年在USENIX中展示[1]。实现中bcrypt会使用一个加盐的流程以防御彩虹表攻击，同时bcrypt还是适应性函数，它可以借由增加迭代之次数来抵御日益增进的电脑运算能力透过暴力法破解。</p><p>由bcrypt加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。然而，所提供的所有字符都具有十分重要的意义。密码越强大，数据就越安全。</p><p>除了对数据进行加密，默认情况下，bcrypt在删除数据之前将使用随机数据三次覆盖原始输入文件，以阻挠可能会获得计算机数据的人恢复数据的尝试。如果您不想使用此功能，可设置禁用此功能。</p><p>具体来说，bcrypt使用美国密码学家保罗·柯切尔的算法实现。随bcrypt一起发布的源代码对原始版本作了略微改动。</p><p><strong>以上内容来自于wiki维基百科</strong> &gt;&gt;&gt;&gt; <a href="https://zh.wikipedia.org/wiki/Bcrypt">https://zh.wikipedia.org/wiki/Bcrypt</a></p><h1 id="bcrypt基本介绍"><a href="#bcrypt基本介绍" class="headerlink" title="bcrypt基本介绍"></a>bcrypt基本介绍</h1><p>其实简单来说<br><code>bcrypt</code>就是一种加盐的单向Hash，不可逆的加密算法，同一种明文（plaintext），每次加密后的密文都不一样，而且不可反向破解生成明文，破解难度很大<br>而我们熟知的另一种不可逆的加密算法<br><code>md5</code> 是不加盐的单向Hash，不可逆的加密算法，同一个密码经过hash的时候生成的是同一个hash值，在大多数的情况下，有些经过md5加密的方法将会被破解。</p><p>Bcrypt生成的密文是60位的。而MD5的是32位的。<br>总的来说，BCrypt比MD5更安全，但加密更慢。<br>各有优缺点吧。</p><p>这里推荐个网站可以完成 bcrypt的加密 我们来尝尝鲜。</p><p><a href="https://www.bejson.com/encrypt/bcrpyt_encode/">https://www.bejson.com/encrypt/bcrpyt_encode/</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里找遍了全网好像也没找到github地址。并且也没有什么安装的教程。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">go</span> get -u golang.org/x/crypto/bcrypt<br></code></pre></td></tr></table></figure><h1 id="cost常量分类"><a href="#cost常量分类" class="headerlink" title="cost常量分类"></a>cost常量分类</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">const</span> (<br>        <span class="hljs-comment">// 传递给GenerateFromPassword的最小允许开销</span><br> MinCost     <span class="hljs-type">int</span> = <span class="hljs-number">4</span>  <br>        <span class="hljs-comment">// 传递给GenerateFromPassword的最大允许开销</span><br> MaxCost     <span class="hljs-type">int</span> = <span class="hljs-number">31</span><br>        <span class="hljs-comment">// 如果将低于MinCost的cost传递给GenerateFromPassword，则实际设置的cost</span><br> DefaultCost <span class="hljs-type">int</span> = <span class="hljs-number">10</span> <br>)<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>这里我们直接看官方写好的测试用例，可能需要 …(你懂的)<br><a href="https://cs.opensource.google/go/x/crypto/+/refs/tags/v0.8.0:bcrypt/bcrypt_test.go">https://cs.opensource.google/go/x/crypto/+/refs/tags/v0.8.0:bcrypt/bcrypt_test.go</a></p><h2 id="GenerateFromPassword-生成一个hash密码"><a href="#GenerateFromPassword-生成一个hash密码" class="headerlink" title="GenerateFromPassword 生成一个hash密码"></a>GenerateFromPassword 生成一个hash密码</h2><p>GenerateFromPassword以给定的代价返回密码的bcrypt散列。如果给定的cost小于MinCost，则该cost将被设置为DefaultCost。<br>GenerateFromPassword不接受长度超过72字节的密码，这是bcrypt操作的最长密码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang">password, _ := bcrypt.GenerateFromPassword([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>), bcrypt.DefaultCost)<br>fmt.Println(<span class="hljs-type">string</span>(password))<br></code></pre></td></tr></table></figure><p>结果如下<br>第一次</p><blockquote><p>$2a$10$SNRLHrG.ExJHKfR8LihSLOqAJOu&#x2F;hCpP0ARhwoKvsduxv5xMXkl4u<br>第二次<br>$2a$10$Np1EBVQ9DZXMvIUkT7Y2P.cA0psEmW2SAVJYcCDqDDN8TsASo7aZm</p></blockquote><p><strong>注： 每次结果都不一样 因为这不是MD5加密，会通过加盐来完成不可逆的加密</strong></p><h2 id="Cost方法-返回给定的cost"><a href="#Cost方法-返回给定的cost" class="headerlink" title="Cost方法 返回给定的cost"></a>Cost方法 返回给定的cost</h2><p>Cost返回用于创建给定散列密码的散列成本。将来，当密码系统的哈希成本需要增加以适应更大的计算能力时，这个功能允许人们确定需要更新哪些密码。<br>简单来说 返回上文的 bcrypt.DefaultCost</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang">cost, _ := bcrypt.Cost([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;$2a$10$XgLBtSfJsrBd.liLOYWddOYWYWboBUAlKmivcSwq647C3vTNUOVMO&quot;</span>))<br>fmt.Println(cost)<br></code></pre></td></tr></table></figure><p>结果如下</p><blockquote><p>10</p></blockquote><h2 id="CompareHashAndPassword-对比明文密码和散列密码"><a href="#CompareHashAndPassword-对比明文密码和散列密码" class="headerlink" title="CompareHashAndPassword 对比明文密码和散列密码"></a>CompareHashAndPassword 对比明文密码和散列密码</h2><p>CompareHashAndPassword，将返回的散列密码与其明文版本进行比较。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang">password, _ := bcrypt.GenerateFromPassword([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>), bcrypt.DefaultCost)<br>fmt.Println(<span class="hljs-type">string</span>(password))<br><br><span class="hljs-comment">// 可以解析出上文</span><br>cost, _ := bcrypt.Cost([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;$2a$10$XgLBtSfJsrBd.liLOYWddOYWYWboBUAlKmivcSwq647C3vTNUOVMO&quot;</span>))<br>fmt.Println(cost)<br><br>err := bcrypt.CompareHashAndPassword(password, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> fmt.Println(<span class="hljs-string">&quot;密码验证错误&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;密码验证成功&gt;&gt;&gt;&quot;</span>, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><p>结果</p><blockquote><p>$2a$10$ANuBn8FthHbgfYir4v65AOvdtqoR3xjZ0G8duN5ynH1Vm0h3yUF&#x2F;G<br>10<br>密码验证成功&gt;&gt;&gt; <nil></p></blockquote><h1 id="调用utils文件-——-集成版"><a href="#调用utils文件-——-集成版" class="headerlink" title="调用utils文件 —— 集成版"></a>调用utils文件 —— 集成版</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> utils<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;golang.org/x/crypto/bcrypt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(encryptText <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br> hashStr, err := bcrypt.GenerateFromPassword([]<span class="hljs-type">byte</span>(encryptText), bcrypt.DefaultCost)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(hashStr), err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CompareHashAndPassword</span><span class="hljs-params">(hashPassword, Password <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br> err := bcrypt.CompareHashAndPassword([]<span class="hljs-type">byte</span>(hashPassword), []<span class="hljs-type">byte</span>(Password))<br><br> <span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="bcrypt某些错误类型"><a href="#bcrypt某些错误类型" class="headerlink" title="bcrypt某些错误类型"></a>bcrypt某些错误类型</h1><ul><li><p>type HashVersionTooNewError byte</p><blockquote><p>使用 创建哈希时从 CompareHashAndPassword 返回的错误 比此实现更新的 bcrypt 算法。<br>func (hv HashVersionTooNewError) Error() string 调用error返回字符串</p></blockquote></li><li><p>type InvalidCostError int</p><blockquote><p>类型 无效cost错误<br>func (ic InvalidCostError) Error() string 调用error返回字符串</p></blockquote></li><li><p>type InvalidHashPrefixError byte</p><blockquote><p>类型无效哈希前缀错误<br>当哈希以“$”以外的内容开头时，从 CompareHashAndPassword 返回的错误<br>func (ih InvalidHashPrefixError) Error() string 调用error返回字符串</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一日一库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javacript加密解密方法</title>
      <link href="/2023/03/28/Javacript%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/"/>
      <url>/2023/03/28/Javacript%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>只需要安装几个库 其中需要了解最多的 <strong>crypto-js</strong></p><p>具体就不多介绍了直接上官网<br><a href="https://www.npmjs.com/package/crypto-js">https://www.npmjs.com/package/crypto-js</a></p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install crypto-js --save-dev<br>npm install md5 --save-dev<br></code></pre></td></tr></table></figure><h1 id="一些常见的built-in-函数加密"><a href="#一些常见的built-in-函数加密" class="headerlink" title="一些常见的built-in 函数加密"></a>一些常见的built-in 函数加密</h1><h2 id="unescape"><a href="#unescape" class="headerlink" title="unescape"></a>unescape</h2><p>unescape() 函数可对通过 escape() 编码的字符串进行解码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> e = <span class="hljs-built_in">escape</span>(<span class="hljs-string">&quot;始識&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// %u59CB%u8B58</span><br><span class="hljs-keyword">let</span> u = <span class="hljs-built_in">unescape</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u) <span class="hljs-comment">// 始識</span><br></code></pre></td></tr></table></figure><h2 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> e = <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&quot;https://始識的博客&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// https://%E5%A7%8B%E8%AD%98%E7%9A%84%E5%8D%9A%E5%AE%A2</span><br><span class="hljs-keyword">let</span> u = <span class="hljs-built_in">decodeURI</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u) <span class="hljs-comment">// https://始識的博客</span><br></code></pre></td></tr></table></figure><h2 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode"></a>fromCharCode</h2><p>将 Unicode 编码转为一个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">65</span>);<br><span class="hljs-comment">// A</span><br><br><br>[<span class="hljs-number">101</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(item)<br>&#125;)<br> [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>]<br></code></pre></td></tr></table></figure><h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><h2 id="btoa-atob"><a href="#btoa-atob" class="headerlink" title="btoa atob"></a>btoa atob</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> e = <span class="hljs-title function_">btoa</span>(<span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// // https://%E5%A7%8B%E8%AD%98%E7%9A%84%E5%8D%9A%E5%AE%A2</span><br><span class="hljs-keyword">let</span> u = <span class="hljs-title function_">atob</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u) <span class="hljs-comment">// https://www.cnblogs.com/zichliang/p/17265960.html</span><br></code></pre></td></tr></table></figure><h2 id="node实现方式"><a href="#node实现方式" class="headerlink" title="node实现方式"></a>node实现方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Base64 encoded string</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;https://www.cnblogs.com/zichliang/p/17265960.html&#x27;</span>;<br><span class="hljs-comment">//b编码</span><br><span class="hljs-keyword">const</span> buffBase64 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(str, <span class="hljs-string">&#x27;utf-8&#x27;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffBase64);<br><br><span class="hljs-comment">//解码</span><br><span class="hljs-keyword">const</span> buffStr = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(buffBase64, <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-comment">// print normal string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffStr);<br><br></code></pre></td></tr></table></figure><h2 id="引用-crypto-js-加密模块"><a href="#引用-crypto-js-加密模块" class="headerlink" title="引用 crypto-js 加密模块"></a>引用 crypto-js 加密模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64Encode</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(text);<br>  <span class="hljs-keyword">var</span> encodeData = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(srcs);<br>  <span class="hljs-keyword">return</span> encodeData<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64Decode</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">parse</span>(encodeData);<br>  <span class="hljs-keyword">var</span> decodeData = srcs.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>  <span class="hljs-keyword">return</span> decodeData<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span><br><br><span class="hljs-keyword">var</span> encodeData = <span class="hljs-title function_">base64Encode</span>()<br><span class="hljs-keyword">var</span> decodeData = <span class="hljs-title function_">base64Decode</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Base64 编码: &quot;</span>, encodeData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Base64 解码: &quot;</span>, decodeData)<br><br><span class="hljs-comment">// Base64 编码:  aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemljaGxpYW5nL3AvMTcyNjU5NjAuaHRtbA==</span><br><span class="hljs-comment">// Base64 解码:  https://www.cnblogs.com/zichliang/p/17265960.html</span><br><br></code></pre></td></tr></table></figure><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MD5Test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">MD5</span>(text).<span class="hljs-title function_">toString</span>()<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">MD5Test</span>())  <span class="hljs-comment">// 50177badb579733de56b628ae57fb972</span><br></code></pre></td></tr></table></figure><h1 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pbkdf2Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">var</span> salt = <span class="hljs-string">&quot;1234567&quot;</span><br>    <span class="hljs-comment">// key 长度 128，10 次重复运算</span><br>    <span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">PBKDF2</span>(text, salt, &#123;<span class="hljs-attr">keySize</span>: <span class="hljs-number">128</span>/<span class="hljs-number">32</span>,<span class="hljs-attr">iterations</span>: <span class="hljs-number">10</span>&#125;);<br>    <span class="hljs-keyword">return</span> encryptedData.<span class="hljs-title function_">toString</span>()<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">pbkdf2Encrypt</span>())  <span class="hljs-comment">// bcda4be78de797d8f5067331b1a70d40</span><br></code></pre></td></tr></table></figure><h1 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SHA1Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">SHA1</span>(text).<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">SHA1Encrypt</span>())  <span class="hljs-comment">// ca481c13d5af7135b69d11ffb0a443a635fbc307</span><br></code></pre></td></tr></table></figure><h1 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SHA256Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">SHA256</span>(text).<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">SHA256Encrypt</span>())  <span class="hljs-comment">// 0b16c8942abbf124f6fef65ae145314dd72ed495ede2b95fe0bde722c0e26478</span><br></code></pre></td></tr></table></figure><p>或者使用原生JS源代码文件生成<br>不要问为什么只有这个有js源码，因为这个加密我刚好用到了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> chrsz = <span class="hljs-number">8</span><br>    <span class="hljs-keyword">const</span> hexcase = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">safe_add</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-keyword">const</span> lsw = (x &amp; <span class="hljs-number">0xFFFF</span>) + (y &amp; <span class="hljs-number">0xFFFF</span>)<br>        <span class="hljs-keyword">const</span> msw = (x &gt;&gt; <span class="hljs-number">16</span>) + (y &gt;&gt; <span class="hljs-number">16</span>) + (lsw &gt;&gt; <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">return</span> (msw &lt;&lt; <span class="hljs-number">16</span>) | (lsw &amp; <span class="hljs-number">0xFFFF</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">S</span>(<span class="hljs-params">X, n</span>) &#123;<br>        <span class="hljs-keyword">return</span> (X &gt;&gt;&gt; n) | (X &lt;&lt; (<span class="hljs-number">32</span> - n))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">R</span>(<span class="hljs-params">X, n</span>) &#123;<br>        <span class="hljs-keyword">return</span> (X &gt;&gt;&gt; n)<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Ch</span>(<span class="hljs-params">x, y, z</span>) &#123;<br>        <span class="hljs-keyword">return</span> ((x &amp; y) ^ ((~x) &amp; z))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Maj</span>(<span class="hljs-params">x, y, z</span>) &#123;<br>        <span class="hljs-keyword">return</span> ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sigma0256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">2</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">13</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">22</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sigma1256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">6</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">11</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">25</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gamma0256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">7</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">18</span>) ^ <span class="hljs-title function_">R</span>(x, <span class="hljs-number">3</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gamma1256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">17</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">19</span>) ^ <span class="hljs-title function_">R</span>(x, <span class="hljs-number">10</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">core_sha256</span>(<span class="hljs-params">m, l</span>) &#123;<br>        <span class="hljs-keyword">const</span> K = [<span class="hljs-number">0x428A2F98</span>, <span class="hljs-number">0x71374491</span>, <span class="hljs-number">0xB5C0FBCF</span>, <span class="hljs-number">0xE9B5DBA5</span>, <span class="hljs-number">0x3956C25B</span>, <span class="hljs-number">0x59F111F1</span>, <span class="hljs-number">0x923F82A4</span>, <span class="hljs-number">0xAB1C5ED5</span>, <span class="hljs-number">0xD807AA98</span>, <span class="hljs-number">0x12835B01</span>, <span class="hljs-number">0x243185BE</span>, <span class="hljs-number">0x550C7DC3</span>, <span class="hljs-number">0x72BE5D74</span>, <span class="hljs-number">0x80DEB1FE</span>, <span class="hljs-number">0x9BDC06A7</span>, <span class="hljs-number">0xC19BF174</span>, <span class="hljs-number">0xE49B69C1</span>, <span class="hljs-number">0xEFBE4786</span>, <span class="hljs-number">0xFC19DC6</span>, <span class="hljs-number">0x240CA1CC</span>, <span class="hljs-number">0x2DE92C6F</span>, <span class="hljs-number">0x4A7484AA</span>, <span class="hljs-number">0x5CB0A9DC</span>, <span class="hljs-number">0x76F988DA</span>, <span class="hljs-number">0x983E5152</span>, <span class="hljs-number">0xA831C66D</span>, <span class="hljs-number">0xB00327C8</span>, <span class="hljs-number">0xBF597FC7</span>, <span class="hljs-number">0xC6E00BF3</span>, <span class="hljs-number">0xD5A79147</span>, <span class="hljs-number">0x6CA6351</span>, <span class="hljs-number">0x14292967</span>, <span class="hljs-number">0x27B70A85</span>, <span class="hljs-number">0x2E1B2138</span>, <span class="hljs-number">0x4D2C6DFC</span>, <span class="hljs-number">0x53380D13</span>, <span class="hljs-number">0x650A7354</span>, <span class="hljs-number">0x766A0ABB</span>, <span class="hljs-number">0x81C2C92E</span>, <span class="hljs-number">0x92722C85</span>, <span class="hljs-number">0xA2BFE8A1</span>, <span class="hljs-number">0xA81A664B</span>, <span class="hljs-number">0xC24B8B70</span>, <span class="hljs-number">0xC76C51A3</span>, <span class="hljs-number">0xD192E819</span>, <span class="hljs-number">0xD6990624</span>, <span class="hljs-number">0xF40E3585</span>, <span class="hljs-number">0x106AA070</span>, <span class="hljs-number">0x19A4C116</span>, <span class="hljs-number">0x1E376C08</span>, <span class="hljs-number">0x2748774C</span>, <span class="hljs-number">0x34B0BCB5</span>, <span class="hljs-number">0x391C0CB3</span>, <span class="hljs-number">0x4ED8AA4A</span>, <span class="hljs-number">0x5B9CCA4F</span>, <span class="hljs-number">0x682E6FF3</span>, <span class="hljs-number">0x748F82EE</span>, <span class="hljs-number">0x78A5636F</span>, <span class="hljs-number">0x84C87814</span>, <span class="hljs-number">0x8CC70208</span>, <span class="hljs-number">0x90BEFFFA</span>, <span class="hljs-number">0xA4506CEB</span>, <span class="hljs-number">0xBEF9A3F7</span>, <span class="hljs-number">0xC67178F2</span>]<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HASH</span> = [<span class="hljs-number">0x6A09E667</span>, <span class="hljs-number">0xBB67AE85</span>, <span class="hljs-number">0x3C6EF372</span>, <span class="hljs-number">0xA54FF53A</span>, <span class="hljs-number">0x510E527F</span>, <span class="hljs-number">0x9B05688C</span>, <span class="hljs-number">0x1F83D9AB</span>, <span class="hljs-number">0x5BE0CD19</span>]<br>        <span class="hljs-keyword">const</span> W = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">64</span>)<br>        <span class="hljs-keyword">let</span> a, b, c, d, e, f, g, h, i, j<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable constant_">T1</span>, <span class="hljs-variable constant_">T2</span><br>        m[l &gt;&gt; <span class="hljs-number">5</span>] |= <span class="hljs-number">0x80</span> &lt;&lt; (<span class="hljs-number">24</span> - l % <span class="hljs-number">32</span>)<br>        m[((l + <span class="hljs-number">64</span> &gt;&gt; <span class="hljs-number">9</span>) &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">15</span>] = l<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m.<span class="hljs-property">length</span>; i += <span class="hljs-number">16</span>) &#123;<br>            a = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">0</span>]<br>            b = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">1</span>]<br>            c = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">2</span>]<br>            d = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">3</span>]<br>            e = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">4</span>]<br>            f = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">5</span>]<br>            g = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">6</span>]<br>            h = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">7</span>]<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">16</span>) &#123;<br>                    W[j] = m[j + i]<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    W[j] = <span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title class_">Gamma1256</span>(W[j - <span class="hljs-number">2</span>]), W[j - <span class="hljs-number">7</span>]), <span class="hljs-title class_">Gamma0256</span>(W[j - <span class="hljs-number">15</span>])), W[j - <span class="hljs-number">16</span>])<br>                &#125;<br>                <span class="hljs-variable constant_">T1</span> = <span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(h, <span class="hljs-title class_">Sigma1256</span>(e)), <span class="hljs-title class_">Ch</span>(e, f, g)), K[j]), W[j])<br>                <span class="hljs-variable constant_">T2</span> = <span class="hljs-title function_">safe_add</span>(<span class="hljs-title class_">Sigma0256</span>(a), <span class="hljs-title class_">Maj</span>(a, b, c))<br>                h = g<br>                g = f<br>                f = e<br>                e = <span class="hljs-title function_">safe_add</span>(d, <span class="hljs-variable constant_">T1</span>)<br>                d = c<br>                c = b<br>                b = a<br>                a = <span class="hljs-title function_">safe_add</span>(<span class="hljs-variable constant_">T1</span>, <span class="hljs-variable constant_">T2</span>)<br>            &#125;<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">0</span>] = <span class="hljs-title function_">safe_add</span>(a, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">0</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">1</span>] = <span class="hljs-title function_">safe_add</span>(b, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">1</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">2</span>] = <span class="hljs-title function_">safe_add</span>(c, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">2</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">3</span>] = <span class="hljs-title function_">safe_add</span>(d, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">3</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">4</span>] = <span class="hljs-title function_">safe_add</span>(e, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">4</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">5</span>] = <span class="hljs-title function_">safe_add</span>(f, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">5</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">6</span>] = <span class="hljs-title function_">safe_add</span>(g, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">6</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">7</span>] = <span class="hljs-title function_">safe_add</span>(h, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">7</span>])<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">HASH</span><br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">str2binb</span>(<span class="hljs-params">str</span>) &#123;<br>        <span class="hljs-keyword">const</span> bin = []<br>        <span class="hljs-keyword">const</span> mask = (<span class="hljs-number">1</span> &lt;&lt; chrsz) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span> * chrsz; i += chrsz) &#123;<br>            bin[i &gt;&gt; <span class="hljs-number">5</span>] |= (str.<span class="hljs-title function_">charCodeAt</span>(i / chrsz) &amp; mask) &lt;&lt; (<span class="hljs-number">24</span> - i % <span class="hljs-number">32</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> bin<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Utf8Encode</span>(<span class="hljs-params">string</span>) &#123;<br>        string = string.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\r\n/g</span>, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">let</span> utfText = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>; n &lt; string.<span class="hljs-property">length</span>; n++) &#123;<br>            <span class="hljs-keyword">const</span> c = string.<span class="hljs-title function_">charCodeAt</span>(n)<br>            <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">128</span>) &#123;<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(c)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((c &gt; <span class="hljs-number">127</span>) &amp;&amp; (c &lt; <span class="hljs-number">2048</span>)) &#123;<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &gt;&gt; <span class="hljs-number">6</span>) | <span class="hljs-number">192</span>)<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &gt;&gt; <span class="hljs-number">12</span>) | <span class="hljs-number">224</span>)<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(((c &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>)<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> utfText<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">binb2hex</span>(<span class="hljs-params">binarray</span>) &#123;<br>        <span class="hljs-keyword">const</span> hex_tab = hexcase ? <span class="hljs-string">&#x27;0123456789ABCDEF&#x27;</span> : <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span><br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; binarray.<span class="hljs-property">length</span> * <span class="hljs-number">4</span>; i++) &#123;<br>            str += hex_tab.<span class="hljs-title function_">charAt</span>((binarray[i &gt;&gt; <span class="hljs-number">2</span>] &gt;&gt; ((<span class="hljs-number">3</span> - i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span> + <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xF</span>) +<br>                hex_tab.<span class="hljs-title function_">charAt</span>((binarray[i &gt;&gt; <span class="hljs-number">2</span>] &gt;&gt; ((<span class="hljs-number">3</span> - i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xF</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>    s = <span class="hljs-title class_">Utf8Encode</span>(s)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">binb2hex</span>(<span class="hljs-title function_">core_sha256</span>(<span class="hljs-title function_">str2binb</span>(s), s.<span class="hljs-property">length</span> * chrsz))<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sha256</span>(<span class="hljs-string">&#x27;https://www.cnblogs.com/zichliang&#x27;</span>)) <span class="hljs-comment">// 0b16c8942abbf124f6fef65ae145314dd72ed495ede2b95fe0bde722c0e26478</span><br></code></pre></td></tr></table></figure><h1 id="HMAC-SHA256"><a href="#HMAC-SHA256" class="headerlink" title="HMAC-SHA256"></a>HMAC-SHA256</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">HmacSHA256Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> hash = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">HmacSHA256</span>(<span class="hljs-string">&quot;这是加密信息&quot;</span>, <span class="hljs-string">&quot;这是秘钥&quot;</span>);<br>    <span class="hljs-keyword">var</span> hashInBase64 = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(hash);<br>    <span class="hljs-keyword">return</span> hashInBase64;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">HmacSHA256Encrypt</span>())  <span class="hljs-comment">// qMlLziV3yzjVb3VgwWhbSTYLsCZXTB1jftypu04SUDM=</span><br></code></pre></td></tr></table></figure><p>js源代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// To ensure cross-browser support even without a proper SubtleCrypto</span><br><span class="hljs-comment">// impelmentation (or without access to the impelmentation, as is the case with</span><br><span class="hljs-comment">// Chrome loaded over HTTP instead of HTTPS), this library can create SHA-256</span><br><span class="hljs-comment">// HMAC signatures using nothing but raw JavaScript</span><br><br><span class="hljs-comment">/* eslint-disable no-magic-numbers, id-length, no-param-reassign, new-cap */</span><br><br><span class="hljs-comment">// By giving internal functions names that we can mangle, future calls to</span><br><span class="hljs-comment">// them are reduced to a single byte (minor space savings in minified file)</span><br><span class="hljs-keyword">var</span> uint8Array = <span class="hljs-title class_">Uint8Array</span>;<br><span class="hljs-keyword">var</span> uint32Array = <span class="hljs-title class_">Uint32Array</span>;<br><span class="hljs-keyword">var</span> pow = <span class="hljs-title class_">Math</span>.<span class="hljs-property">pow</span>;<br><br><span class="hljs-comment">// Will be initialized below</span><br><span class="hljs-comment">// Using a Uint32Array instead of a simple array makes the minified code</span><br><span class="hljs-comment">// a bit bigger (we lose our `unshift()` hack), but comes with huge</span><br><span class="hljs-comment">// performance gains</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">DEFAULT_STATE</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(<span class="hljs-number">8</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">ROUND_CONSTANTS</span> = [];<br><br><span class="hljs-comment">// Reusable object for expanded message</span><br><span class="hljs-comment">// Using a Uint32Array instead of a simple array makes the minified code</span><br><span class="hljs-comment">// 7 bytes larger, but comes with huge performance gains</span><br><span class="hljs-keyword">var</span> M = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(<span class="hljs-number">64</span>);<br><br><span class="hljs-comment">// After minification the code to compute the default state and round</span><br><span class="hljs-comment">// constants is smaller than the output. More importantly, this serves as a</span><br><span class="hljs-comment">// good educational aide for anyone wondering where the magic numbers come</span><br><span class="hljs-comment">// from. No magic numbers FTW!</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFractionalBits</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> ((n - (n | <span class="hljs-number">0</span>)) * <span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>)) | <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">2</span>, nPrime = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (nPrime &lt; <span class="hljs-number">64</span>) &#123;<br>    <span class="hljs-comment">// isPrime() was in-lined from its original function form to save</span><br>    <span class="hljs-comment">// a few bytes</span><br>    <span class="hljs-keyword">var</span> isPrime = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// Math.sqrt() was replaced with pow(n, 1/2) to save a few bytes</span><br>    <span class="hljs-comment">// var sqrtN = pow(n, 1 / 2);</span><br>    <span class="hljs-comment">// So technically to determine if a number is prime you only need to</span><br>    <span class="hljs-comment">// check numbers up to the square root. However this function only runs</span><br>    <span class="hljs-comment">// once and we&#x27;re only computing the first 64 primes (up to 311), so on</span><br>    <span class="hljs-comment">// any modern CPU this whole function runs in a couple milliseconds.</span><br>    <span class="hljs-comment">// By going to n / 2 instead of sqrt(n) we net 8 byte savings and no</span><br>    <span class="hljs-comment">// scaling performance cost</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> factor = <span class="hljs-number">2</span>; factor &lt;= n / <span class="hljs-number">2</span>; factor++) &#123;<br>        <span class="hljs-keyword">if</span> (n % factor === <span class="hljs-number">0</span>) &#123;<br>            isPrime = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isPrime) &#123;<br>        <span class="hljs-keyword">if</span> (nPrime &lt; <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-variable constant_">DEFAULT_STATE</span>[nPrime] = <span class="hljs-title function_">getFractionalBits</span>(<span class="hljs-title function_">pow</span>(n, <span class="hljs-number">1</span> / <span class="hljs-number">2</span>));<br>        &#125;<br>        <span class="hljs-variable constant_">ROUND_CONSTANTS</span>[nPrime] = <span class="hljs-title function_">getFractionalBits</span>(<span class="hljs-title function_">pow</span>(n, <span class="hljs-number">1</span> / <span class="hljs-number">3</span>));<br><br>        nPrime++;<br>    &#125;<br><br>    n++;<br>&#125;<br><br><span class="hljs-comment">// For cross-platform support we need to ensure that all 32-bit words are</span><br><span class="hljs-comment">// in the same endianness. A UTF-8 TextEncoder will return BigEndian data,</span><br><span class="hljs-comment">// so upon reading or writing to our ArrayBuffer we&#x27;ll only swap the bytes</span><br><span class="hljs-comment">// if our system is LittleEndian (which is about 99% of CPUs)</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">LittleEndian</span> = !!<span class="hljs-keyword">new</span> <span class="hljs-title function_">uint8Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>([<span class="hljs-number">1</span>]).<span class="hljs-property">buffer</span>)[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertEndian</span>(<span class="hljs-params">word</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">LittleEndian</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="hljs-comment">// byte 1 -&gt; byte 4</span><br>            (word &gt;&gt;&gt; <span class="hljs-number">24</span>) |<br>            <span class="hljs-comment">// byte 2 -&gt; byte 3</span><br>            (((word &gt;&gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>) &lt;&lt; <span class="hljs-number">8</span>) |<br>            <span class="hljs-comment">// byte 3 -&gt; byte 2</span><br>            ((word &amp; <span class="hljs-number">0xff00</span>) &lt;&lt; <span class="hljs-number">8</span>) |<br>            <span class="hljs-comment">// byte 4 -&gt; byte 1</span><br>            (word &lt;&lt; <span class="hljs-number">24</span>)<br>        );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> word;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rightRotate</span>(<span class="hljs-params">word, bits</span>) &#123;<br>    <span class="hljs-keyword">return</span> (word &gt;&gt;&gt; bits) | (word &lt;&lt; (<span class="hljs-number">32</span> - bits));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// Copy default state</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">STATE</span> = <span class="hljs-variable constant_">DEFAULT_STATE</span>.<span class="hljs-title function_">slice</span>();<br><br>    <span class="hljs-comment">// Caching this reduces occurrences of &quot;.length&quot; in minified JavaScript</span><br>    <span class="hljs-comment">// 3 more byte savings! :D</span><br>    <span class="hljs-keyword">var</span> legth = data.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-comment">// Pad data</span><br>    <span class="hljs-keyword">var</span> bitLength = legth * <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">var</span> newBitLength = (<span class="hljs-number">512</span> - ((bitLength + <span class="hljs-number">64</span>) % <span class="hljs-number">512</span>) - <span class="hljs-number">1</span>) + bitLength + <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">// &quot;bytes&quot; and &quot;words&quot; are stored BigEndian</span><br>    <span class="hljs-keyword">var</span> bytes = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint8Array</span>(newBitLength / <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">var</span> words = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(bytes.<span class="hljs-property">buffer</span>);<br><br>    bytes.<span class="hljs-title function_">set</span>(data, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// Append a 1</span><br>    bytes[legth] = <span class="hljs-number">0b10000000</span>;<br>    <span class="hljs-comment">// Store length in BigEndian</span><br>    words[words.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] = <span class="hljs-title function_">convertEndian</span>(bitLength);<br><br>    <span class="hljs-comment">// Loop iterator (avoid two instances of &quot;var&quot;) -- saves 2 bytes</span><br>    <span class="hljs-keyword">var</span> round;<br><br>    <span class="hljs-comment">// Process blocks (512 bits / 64 bytes / 16 words at a time)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> block = <span class="hljs-number">0</span>; block &lt; newBitLength / <span class="hljs-number">32</span>; block += <span class="hljs-number">16</span>) &#123;<br>        <span class="hljs-keyword">var</span> workingState = <span class="hljs-variable constant_">STATE</span>.<span class="hljs-title function_">slice</span>();<br><br>        <span class="hljs-comment">// Rounds</span><br>        <span class="hljs-keyword">for</span> (round = <span class="hljs-number">0</span>; round &lt; <span class="hljs-number">64</span>; round++) &#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">MRound</span>;<br>            <span class="hljs-comment">// Expand message</span><br>            <span class="hljs-keyword">if</span> (round &lt; <span class="hljs-number">16</span>) &#123;<br>                <span class="hljs-comment">// Convert to platform Endianness for later math</span><br>                <span class="hljs-title class_">MRound</span> = <span class="hljs-title function_">convertEndian</span>(words[block + round]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">var</span> gamma0x = M[round - <span class="hljs-number">15</span>];<br>                <span class="hljs-keyword">var</span> gamma1x = M[round - <span class="hljs-number">2</span>];<br>                <span class="hljs-title class_">MRound</span> =<br>                    M[round - <span class="hljs-number">7</span>] + M[round - <span class="hljs-number">16</span>] + (<br>                        <span class="hljs-title function_">rightRotate</span>(gamma0x, <span class="hljs-number">7</span>) ^<br>                        <span class="hljs-title function_">rightRotate</span>(gamma0x, <span class="hljs-number">18</span>) ^<br>                        (gamma0x &gt;&gt;&gt; <span class="hljs-number">3</span>)<br>                    ) + (<br>                        <span class="hljs-title function_">rightRotate</span>(gamma1x, <span class="hljs-number">17</span>) ^<br>                        <span class="hljs-title function_">rightRotate</span>(gamma1x, <span class="hljs-number">19</span>) ^<br>                        (gamma1x &gt;&gt;&gt; <span class="hljs-number">10</span>)<br>                    )<br>                ;<br>            &#125;<br><br>            <span class="hljs-comment">// M array matches platform endianness</span><br>            M[round] = <span class="hljs-title class_">MRound</span> |= <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">// Computation</span><br>            <span class="hljs-keyword">var</span> t1 =<br>                (<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">4</span>], <span class="hljs-number">6</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">4</span>], <span class="hljs-number">11</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">4</span>], <span class="hljs-number">25</span>)<br>                ) +<br>                (<br>                    (workingState[<span class="hljs-number">4</span>] &amp; workingState[<span class="hljs-number">5</span>]) ^<br>                    (~workingState[<span class="hljs-number">4</span>] &amp; workingState[<span class="hljs-number">6</span>])<br>                ) + workingState[<span class="hljs-number">7</span>] + <span class="hljs-title class_">MRound</span> + <span class="hljs-variable constant_">ROUND_CONSTANTS</span>[round]<br>            ;<br>            <span class="hljs-keyword">var</span> t2 =<br>                (<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">0</span>], <span class="hljs-number">2</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">0</span>], <span class="hljs-number">13</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">0</span>], <span class="hljs-number">22</span>)<br>                ) +<br>                (<br>                    (workingState[<span class="hljs-number">0</span>] &amp; workingState[<span class="hljs-number">1</span>]) ^<br>                    (workingState[<span class="hljs-number">2</span>] &amp; (workingState[<span class="hljs-number">0</span>] ^<br>                        workingState[<span class="hljs-number">1</span>]))<br>                )<br>            ;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">7</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                workingState[i] = workingState[i - <span class="hljs-number">1</span>];<br>            &#125;<br>            workingState[<span class="hljs-number">0</span>] = (t1 + t2) | <span class="hljs-number">0</span>;<br>            workingState[<span class="hljs-number">4</span>] = (workingState[<span class="hljs-number">4</span>] + t1) | <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Update state</span><br>        <span class="hljs-keyword">for</span> (round = <span class="hljs-number">0</span>; round &lt; <span class="hljs-number">8</span>; round++) &#123;<br>            <span class="hljs-variable constant_">STATE</span>[round] = (<span class="hljs-variable constant_">STATE</span>[round] + workingState[round]) | <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Finally the state needs to be converted to BigEndian for output</span><br>    <span class="hljs-comment">// And we want to return a Uint8Array, not a Uint32Array</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint8Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(<br>        <span class="hljs-variable constant_">STATE</span>.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">convertEndian</span>(val);<br>        &#125;)<br>    ).<span class="hljs-property">buffer</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hmac</span>(<span class="hljs-params">key, data</span>) &#123;<br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-property">length</span> &gt; <span class="hljs-number">64</span>)<br>        key = <span class="hljs-title function_">sha256</span>(key);<br><br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-property">length</span> &lt; <span class="hljs-number">64</span>) &#123;<br>        <span class="hljs-keyword">const</span> tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span>);<br>        tmp.<span class="hljs-title function_">set</span>(key, <span class="hljs-number">0</span>);<br>        key = tmp;<br>    &#125;<br><br>    <span class="hljs-comment">// Generate inner and outer keys</span><br>    <span class="hljs-keyword">var</span> innerKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span>);<br>    <span class="hljs-keyword">var</span> outerKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) &#123;<br>        innerKey[i] = <span class="hljs-number">0x36</span> ^ key[i];<br>        outerKey[i] = <span class="hljs-number">0x5c</span> ^ key[i];<br>    &#125;<br><br>    <span class="hljs-comment">// Append the innerKey</span><br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(data.<span class="hljs-property">length</span> + <span class="hljs-number">64</span>);<br>    msg.<span class="hljs-title function_">set</span>(innerKey, <span class="hljs-number">0</span>);<br>    msg.<span class="hljs-title function_">set</span>(data, <span class="hljs-number">64</span>);<br><br>    <span class="hljs-comment">// Has the previous message and append the outerKey</span><br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span> + <span class="hljs-number">32</span>);<br>    result.<span class="hljs-title function_">set</span>(outerKey, <span class="hljs-number">0</span>);<br>    result.<span class="hljs-title function_">set</span>(<span class="hljs-title function_">sha256</span>(msg), <span class="hljs-number">64</span>);<br><br>    <span class="hljs-comment">// Hash the previous message</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(result);<br>&#125;<br><br><span class="hljs-comment">// Convert a string to a Uint8Array, SHA-256 it, and convert back to string</span><br><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">inputKey, inputData</span>) &#123;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-keyword">typeof</span> inputKey === <span class="hljs-string">&quot;string&quot;</span> ? encoder.<span class="hljs-title function_">encode</span>(inputKey) : inputKey;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">typeof</span> inputData === <span class="hljs-string">&quot;string&quot;</span> ? encoder.<span class="hljs-title function_">encode</span>(inputData) : inputData;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">hmac</span>(key, data);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">hex</span>(<span class="hljs-title function_">sha256</span>(encoder.<span class="hljs-title function_">encode</span>(str)));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">bin</span>) &#123;<br>    <span class="hljs-keyword">return</span> bin.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, val</span>) =&gt;</span><br>        acc + (<span class="hljs-string">&quot;00&quot;</span> + val.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)).<span class="hljs-title function_">substr</span>(-<span class="hljs-number">2</span>)<br>        , <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">sign</span>(<span class="hljs-string">&quot;秘钥&quot;</span>, <span class="hljs-string">&quot;数据&quot;</span>))) <span class="hljs-comment">// qMlLziV3yzjVb3VgwWhbSTYLsCZXTB1jftypu04SUDM=</span><br></code></pre></td></tr></table></figure><h1 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">HMACEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>  <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;secret&quot;</span><br>  <span class="hljs-keyword">return</span> CryptoJS.HmacMD5(<span class="hljs-built_in">text</span>, key).toString();<br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(HMACEncrypt())<span class="hljs-comment">// 20ca7a63f1f4a7047ffd6b722b45319a</span><br></code></pre></td></tr></table></figure><h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(&#x27;crypto-js&#x27;)<br><br>function desEncrypt() &#123;<br>  <span class="hljs-keyword">var</span> key = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desKey),<br>      iv = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desIv),<br>      srcs = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(text),<br>      <span class="hljs-comment">// CBC 加密模式，Pkcs7 填充方式</span><br>      encrypted = CryptoJS.<span class="hljs-keyword">DES</span>.encrypt(srcs, key, &#123;<br>        iv: iv,<br>        mode: CryptoJS.mode.CBC,<br>        padding: CryptoJS.pad.Pkcs7<br>      &#125;);<br>  <span class="hljs-keyword">return</span> encrypted.<span class="hljs-keyword">toString</span>();<br>&#125;<br><br>function desDecrypt() &#123;<br>  <span class="hljs-keyword">var</span> key = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desKey),<br>      iv = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desIv),<br>      srcs = encryptedData,<br>      <span class="hljs-comment">// CBC 加密模式，Pkcs7 填充方式</span><br>      decrypted = CryptoJS.<span class="hljs-keyword">DES</span>.decrypt(srcs, key, &#123;<br>        iv: iv,<br>        mode: CryptoJS.mode.CBC,<br>        padding: CryptoJS.pad.Pkcs7<br>      &#125;);<br>  <span class="hljs-keyword">return</span> decrypted.<span class="hljs-keyword">toString</span>(CryptoJS.<span class="hljs-keyword">enc</span>.Utf8);<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="hljs-comment">// 待加密对象</span><br><span class="hljs-keyword">var</span> desKey = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 密钥</span><br><span class="hljs-keyword">var</span> desIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 初始向量</span><br><br><span class="hljs-keyword">var</span> encryptedData = desEncrypt()<br><span class="hljs-keyword">var</span> decryptedData = desDecrypt()<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  p+4ovmk1n5YwN3dq5y8VqhngLKW//5MM/qDgtj2SOC6TpJaFgSKEVg==</span><br><span class="hljs-comment">// 解密字符串:   https://www.cnblogs.com/zichliang</span><br><br></code></pre></td></tr></table></figure><h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tripleDesEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desKey),<br>      iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desIv),<br>      srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(text),<br>      <span class="hljs-comment">// ECB 加密方式，Iso10126 填充方式</span><br>      encrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">TripleDES</span>.<span class="hljs-title function_">encrypt</span>(srcs, key, &#123;<br>        <span class="hljs-attr">iv</span>: iv,<br>        <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Iso10126</span><br>      &#125;);<br>  <span class="hljs-keyword">return</span> encrypted.<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tripleDesDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desKey),<br>      iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desIv),<br>      srcs = encryptedData,<br>      <span class="hljs-comment">// ECB 加密方式，Iso10126 填充方式</span><br>      decrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">TripleDES</span>.<span class="hljs-title function_">decrypt</span>(srcs, key, &#123;<br>        <span class="hljs-attr">iv</span>: iv,<br>        <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Iso10126</span><br>      &#125;);<br>  <span class="hljs-keyword">return</span> decrypted.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="hljs-comment">// 待加密对象</span><br><span class="hljs-keyword">var</span> desKey = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 密钥</span><br><span class="hljs-keyword">var</span> desIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 偏移量</span><br><br><span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title function_">tripleDesEncrypt</span>()<br><span class="hljs-keyword">var</span> decryptedData = <span class="hljs-title function_">tripleDesDecrypt</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:   pl/nNfpIrejwK+/X87VmGZIbS3kOB+IpFcx/97wpR4AO6q9HGjxb4w==</span><br><span class="hljs-comment">// 解密字符串:   https://www.cnblogs.com/zichliang</span><br><br></code></pre></td></tr></table></figure><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">aesEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesKey),<br>        iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesIv),<br>        srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(text),<br>        <span class="hljs-comment">// CBC 加密方式，Pkcs7 填充方式</span><br>        encrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(srcs, key, &#123;<br>            <span class="hljs-attr">iv</span>: iv,<br>            <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>            <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>        &#125;);<br>    <span class="hljs-keyword">return</span> encrypted.<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">aesDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesKey),<br>        iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesIv),<br>        srcs = encryptedData,<br>        <span class="hljs-comment">// CBC 加密方式，Pkcs7 填充方式</span><br>        decrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(srcs, key, &#123;<br>            <span class="hljs-attr">iv</span>: iv,<br>            <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>            <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>        &#125;);<br>    <span class="hljs-keyword">return</span> decrypted.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="hljs-comment">// 待加密对象</span><br><span class="hljs-keyword">var</span> aesKey = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>   <span class="hljs-comment">// 密钥，16 倍数</span><br><span class="hljs-keyword">var</span> aesIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 偏移量，16 倍数</span><br><br><span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title function_">aesEncrypt</span>()<br><span class="hljs-keyword">var</span> decryptedData = <span class="hljs-title function_">aesDecrypt</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  /q8i+1GN8yfzIb8CaEJfDOfDQ74in+XzQZYBtKF2wkAB6dM1qbBZ3HJVlY+kHDE3</span><br><span class="hljs-comment">// 解密字符串:  https://www.cnblogs.com/zichliang</span><br></code></pre></td></tr></table></figure><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">RC4Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.RC4.encrypt(<span class="hljs-built_in">text</span>, key).toString();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">RC4Decrypt</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;12345678ASDFG&quot;</span><br><br><span class="hljs-keyword">var</span> encryptedData = RC4Encrypt()<br><span class="hljs-keyword">var</span> decryptedData = RC4Decrypt()<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  U2FsdGVkX19/bT2W57mzjwoF5Fc3Zb4WiyDU+MiNMmHfdJvZeScl0EW9yJWCPiRrsA==</span><br><span class="hljs-comment">// 解密字符串:  https://www.cnblogs.com/zichliang</span><br></code></pre></td></tr></table></figure><h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rabbitEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.Rabbit.encrypt(<span class="hljs-built_in">text</span>, key).toString();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rabbitDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/16653303.html&quot;</span><br><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;1234567ASDFG&quot;</span><br><br><span class="hljs-keyword">var</span> encryptedData = rabbitEncrypt()<br><span class="hljs-keyword">var</span> decryptedData = rabbitDecrypt()<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  U2FsdGVkX1/pYbHvbNff3/RNpso4yRKIX0XDFta8hoLNxe52K8HSmF+XV8ayYqucTKVPP6AJtGczXS7U9kkxHnw=</span><br><span class="hljs-comment">// 解密字符串:  https://www.cnblogs.com/zichliang/p/16653303.html</span><br></code></pre></td></tr></table></figure><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="使用-node-rsa"><a href="#使用-node-rsa" class="headerlink" title="使用 node-rsa"></a>使用 node-rsa</h2><p>需要安装一个库 </p><blockquote><p>npm install node-rsa</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 node-rsa 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">NodeRSA</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rsaEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>    pubKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeRSA</span>(publicKey,<span class="hljs-string">&#x27;pkcs8-public&#x27;</span>);<br>    <span class="hljs-keyword">var</span> encryptedData = pubKey.<span class="hljs-title function_">encrypt</span>(text, <span class="hljs-string">&#x27;base64&#x27;</span>);<br>    <span class="hljs-keyword">return</span> encryptedData<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rsaDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>    priKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeRSA</span>(privatekey,<span class="hljs-string">&#x27;pkcs8-private&#x27;</span>);<br>    <span class="hljs-keyword">var</span> decryptedData = priKey.<span class="hljs-title function_">decrypt</span>(encryptedData, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> decryptedData<br>&#125;<br><br><span class="hljs-keyword">var</span> key = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeRSA</span>(&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">512</span>&#125;);                    <span class="hljs-comment">//生成512位秘钥</span><br><span class="hljs-keyword">var</span> publicKey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;pkcs8-public&#x27;</span>);    <span class="hljs-comment">//导出公钥</span><br><span class="hljs-keyword">var</span> privatekey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;pkcs8-private&#x27;</span>);  <span class="hljs-comment">//导出私钥</span><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/16653303.html&quot;</span><br><br><span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title function_">rsaEncrypt</span>()<br><span class="hljs-keyword">var</span> decryptedData = <span class="hljs-title function_">rsaDecrypt</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;公钥:\n&quot;</span>, publicKey)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;私钥:\n&quot;</span>, privatekey)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">公钥:</span><br><span class="hljs-comment"> -----BEGIN PUBLIC KEY-----</span><br><span class="hljs-comment">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAN7JoMDNvvpB/po2OMSeSKsromfP5EyI</span><br><span class="hljs-comment">0fAz6XDVwqdTUBwwAArLlqIzmVNK0yi4nlbj5eF+O8ZjRkRQ6xKP/CMCAwEAAQ==</span><br><span class="hljs-comment">-----END PUBLIC KEY-----</span><br><span class="hljs-comment">私钥:</span><br><span class="hljs-comment"> -----BEGIN PRIVATE KEY-----</span><br><span class="hljs-comment">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA3smgwM2++kH+mjY4</span><br><span class="hljs-comment">xJ5IqyuiZ8/kTIjR8DPpcNXCp1NQHDAACsuWojOZU0rTKLieVuPl4X47xmNGRFDr</span><br><span class="hljs-comment">Eo/8IwIDAQABAkEArI0Ps6TnIJ9SmZAbYbWSZPjTvYHXuatSpq8eQ+Vb8Ql003G5</span><br><span class="hljs-comment">Y2FIoWpQX1jQ9/DsxEZ/1u+71bl08z1eONz2KQIhAPgLZOKanhDDaOn5sO7Y2RM3</span><br><span class="hljs-comment">TyLS08mCGNGQxEhkEttFAiEA5e7bvnrSNh1lcF/QTxkWPGoXb9kxPljm49CfiTS9</span><br><span class="hljs-comment">PEcCIDzxX7olTwzDVjWWeZhVgxArmK/vqMVrx3lF3lQC8ncZAiBlpY5nSoybd6tc</span><br><span class="hljs-comment">Xj8MeJ6n3o6112I5mbuYgqXEVhhCCQIgY6vinhOzMF0dX9MNjBm8x1mUCd4XG2TN</span><br><span class="hljs-comment">QQcOik3RIGw=</span><br><span class="hljs-comment">-----END PRIVATE KEY-----</span><br><span class="hljs-comment">加密字符串:  ZolvYwjFqOp1Yldui7rm75mSN5kz7533nc3B3H6xZGQR9v0elhbcjmI9vXaBsgdLNTuyoVk3bfzWfQdeIpvCpcBCTGe1HG9KrSBYDiWJc4vBgVBz8D57/XaS1zjM0kuAJ/ELu4os7XG5lMQbRbFhHXs7zQsIBq6/m2IZdGWx7HjB2jiQBQPMfszdQUOwQA</span><br><span class="hljs-comment">bM5o7lRvUgdMVaZkEWpOTEybmUX4kxBP5CvNtB86oTRUw+U7Ex7QB8lWj33hoKvh70</span><br><span class="hljs-comment">解密字符串:  https://www.cnblogs.com/zichliang/p/16653303.html</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="使用自带模块crypto"><a href="#使用自带模块crypto" class="headerlink" title="使用自带模块crypto:"></a>使用自带模块crypto:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> nodeRSA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<br><br><span class="hljs-comment">// 生成一个1024长度的密钥对</span><br><span class="hljs-keyword">const</span> key = <span class="hljs-keyword">new</span> <span class="hljs-title function_">nodeRSA</span>(&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">1024</span>&#125;);<br><span class="hljs-comment">// 导出公钥</span><br><span class="hljs-keyword">const</span> publicKey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;public&#x27;</span>);<br><span class="hljs-comment">// 导出私钥</span><br><span class="hljs-keyword">const</span> privateKey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;private&#x27;</span>);<br><br><span class="hljs-keyword">const</span> secret = <span class="hljs-string">&#x27;https://www.cnblogs.com/zichliang/p/16653303.html&#x27;</span><br><span class="hljs-comment">// 使用私钥加密，公钥解密</span><br><span class="hljs-keyword">const</span> encrypt = crypto.<span class="hljs-title function_">privateEncrypt</span>(privateKey, <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(secret));<br><span class="hljs-keyword">const</span> decrypt = crypto.<span class="hljs-title function_">publicDecrypt</span>(publicKey, encrypt);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加密后：&#x27;</span>, encrypt.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;解密后：&#x27;</span>, decrypt.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure><h1 id="RSA-长加密"><a href="#RSA-长加密" class="headerlink" title="RSA 长加密"></a>RSA 长加密</h1><p>这个加密是真的麻烦 ，而且还需要导入jsencrypt.min.js<br>这里贴上 GitHub地址 <a href="https://github.com/wangqinglongDo/github_demo/blob/master/libs/jsencrypt.min.js">https://github.com/wangqinglongDo/github_demo/blob/master/libs/jsencrypt.min.js</a><br>对了 还需要补环境 而且解密也不是很好用，如果有大佬知道如何解密的 希望在评论区告诉我</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> encrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSEncrypt</span>();<br><span class="hljs-keyword">var</span> publickKey = <span class="hljs-string">&quot;-----BEGIN PUBLIC KEY-----\</span><br><span class="hljs-string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLFb8qp1vRFvi/qfgi1Wg7Mi8l\</span><br><span class="hljs-string">LcpfAc+tgpyD7aFW9QquQVMm/jG1IJZVQ6LsdkI7TiDutMCzOMCBXbdSC9BCIAGA\</span><br><span class="hljs-string">L2Sz3cYVlGb1kYSM0ZMcUMIK5eF4Bptke070XHvbi8wArtysJ0l71RHDd786tNbG\</span><br><span class="hljs-string">W0hDSw3zAqTErbxFaQIDAQAB\</span><br><span class="hljs-string">-----END PUBLIC KEY-----\</span><br><span class="hljs-string">&quot;</span><br>encrypt.<span class="hljs-title function_">setPublicKey</span>(publickKey);  <span class="hljs-comment">//设置公钥加密证书</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span>;<br><span class="hljs-keyword">var</span> commonEncodeData = encrypt.<span class="hljs-title function_">encryptLong</span>(data);   <span class="hljs-comment">// 普通的加密</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(commonEncodeData)<br><br><span class="hljs-keyword">var</span> cnEscapeData = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">btoa</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">encodeURIComponent</span>(data));  <span class="hljs-comment">//base64 解密后的加密</span><br><span class="hljs-keyword">var</span> encryptData = encrypt.<span class="hljs-title function_">encryptLong</span>(cnEscapeData);  <span class="hljs-comment">//获取加密后数据。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(encryptData)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言加解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy结合加速乐完成无损爬取</title>
      <link href="/2023/03/09/scrapy%E7%BB%93%E5%90%88%E5%8A%A0%E9%80%9F%E4%B9%90%E5%AE%8C%E6%88%90%E6%97%A0%E6%8D%9F%E7%88%AC%E5%8F%96/"/>
      <url>/2023/03/09/scrapy%E7%BB%93%E5%90%88%E5%8A%A0%E9%80%9F%E4%B9%90%E5%AE%8C%E6%88%90%E6%97%A0%E6%8D%9F%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p><strong>中间件重要知识： 返回None代表继续通过 返回request就重新走调度流程</strong></p><p>本文文章中 需要在settings中设置 <strong>COOKIES_ENABLED &#x3D; True</strong></p><p>这里超链接一篇文章（不理解COOKIES_ENABLED 的可以看看）—<a href="https://blog.csdn.net/u013444182/article/details/105282050">scrapy 中 COOKIES_ENABLED 设置_NealHuiwen的博客-CSDN博客</a></p><p>其次需要开启爬虫中的cookie中间件</p><p><a href="http://utilsmiddlewares.py/">utilsMiddlewares.py</a> &gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandleCookieMiddleware</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request, spider</span>):<br>       <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response, spider</span>):<br>        status_code = response.status<br>        <span class="hljs-keyword">if</span> status_code == <span class="hljs-number">521</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jsl&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>, response.url)<br>            cookies, response, ok = <span class="hljs-variable language_">self</span>.get_cookie(response)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok:<br>                <span class="hljs-keyword">return</span> response<br><br>            request.cookies = cookies<br>            request.headers[<br>                <span class="hljs-string">&#x27;User-Agent&#x27;</span>] = <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span><br>            <span class="hljs-keyword">return</span> request<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookie</span>(<span class="hljs-params">self, response</span>) -&gt; (<span class="hljs-built_in">dict</span>, Response, <span class="hljs-built_in">bool</span>):<br>    <span class="hljs-keyword">if</span> pattern := re.findall(<span class="hljs-string">r&#x27;cookie=(.*?);location&#x27;</span>, response.text):<br>        encrypt_jsfuck = pattern[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>, response, <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># return response</span><br>    DJ = DecryptJsl()<br>    decrypt_jsfuck = <span class="hljs-built_in">str</span>(execjs.<span class="hljs-built_in">eval</span>(encrypt_jsfuck))<br>    first_decrypt_cookie = decrypt_jsfuck.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;;&#x27;</span>)[<span class="hljs-number">0</span>]<br>    jsl_cookie_key = decrypt_jsfuck.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>]<br>    first_set_cookie = &#123;&#125;<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(response.headers.getlist(<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>)[<span class="hljs-number">0</span>].decode(<span class="hljs-string">&quot;utf-8&quot;</span>)).split(<span class="hljs-string">&quot;;&quot;</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;=&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> c:<br>            <span class="hljs-keyword">continue</span><br>        first_set_cookie[c.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">0</span>]] = c.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>]<br>    first_cookies = &#123;<br>        **first_set_cookie,<br>        jsl_cookie_key: first_decrypt_cookie&#125;<br>    res1 = requests.get(response.url, cookies=first_cookies, headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>,<br>    &#125;)<br>    data = json.loads(re.findall(<span class="hljs-string">r&#x27;;go\((.*?)\)&#x27;</span>, res1.text)[<span class="hljs-number">0</span>])<br>    second_decrypt_cookie = DJ.get_parameter(data)<br>    cookies = &#123;<br>        **first_set_cookie,<br>        jsl_cookie_key: second_decrypt_cookie&#125;<br>    <span class="hljs-keyword">return</span> cookies, <span class="hljs-literal">None</span>, <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>2024-4-24 </p><p>上面方法是我自实现的方法。可能很多时候不适用。</p><p>这几天入职新公司 遇到个新方法 非常好用</p><p>直接看源码。好用成DOG啊。看到这里的同学 你遇到宝了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx">def <span class="hljs-title function_">process_response</span>(self, request, response, spider):<br>    <span class="hljs-keyword">if</span> response.<span class="hljs-property">status</span> == <span class="hljs-number">521</span>:<br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;jsl&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>, response.<span class="hljs-property">url</span>)<br>        <span class="hljs-variable constant_">DJ</span> = <span class="hljs-title class_">DecryptJsl</span>()<br>        cookies = <span class="hljs-variable constant_">DJ</span>.<span class="hljs-title function_">get_cookies</span>(response.<span class="hljs-property">url</span>)<br><br>        # request.<span class="hljs-property">cookies</span> = cookies<br>        headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>,<br>        &#125;<br>        req_res = requests.<span class="hljs-title function_">get</span>(response.<span class="hljs-property">url</span>, headers=headers, cookies=cookies)<br><br>        response = <span class="hljs-title class_">TextResponse</span>(url=req_res.<span class="hljs-property">url</span>,<br>                     body=req_res.<span class="hljs-property">text</span>,<br>                     encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>       <br>        <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin_Resonse返回格式</title>
      <link href="/2022/11/26/Gin-Resonse%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/11/26/Gin-Resonse%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<!--toc--><hr><p>目的： gin返回restful格式的数据，返回的200，201 的数据 也包括异常时的404&#x2F;500等情况<br>全局统一返回RESTful风格数据，主要是实现Respon接口的方法，对返回值在输出之前进行修改。</p><p>直接调用下文代码即可</p><h1 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> response<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br> <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-comment">// Response</span><br><span class="hljs-comment">// context 上下文</span><br><span class="hljs-comment">// httpStatus http 状态码</span><br><span class="hljs-comment">// code 自己定义的状态码</span><br><span class="hljs-comment">// data 返回的空接口</span><br><span class="hljs-comment">// msg 返回的信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Response</span><span class="hljs-params">(context *gin.Context, httpStatus <span class="hljs-type">int</span>, code <span class="hljs-type">int</span>, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(httpStatus, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: code,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Success</span><span class="hljs-params">(context *gin.Context, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(http.StatusOK, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fail</span><span class="hljs-params">(context *gin.Context, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(http.StatusOK, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">400</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UnprocessableEntity</span><span class="hljs-params">(context *gin.Context, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(http.StatusUnprocessableEntity, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">422</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后续可以自己添加方法然后固定的格式</p><h1 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h1><p>构建一个结构体 然后只有有些无用的值是可以不传的。<br>这种方式对比上一种更加灵活多变。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> api<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br> <span class="hljs-string">&quot;net/http&quot;</span><br> <span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> ResponseJson <span class="hljs-keyword">struct</span> &#123;<br> Status <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;-&quot;`</span><br> Code   <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;code,omitempty&quot;`</span><br> Msg    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;msg,omitempty&quot;`</span><br> Data   any    <span class="hljs-string">`json:&quot;data,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-comment">// IsEmpty 判断结构体是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r ResponseJson)</span></span> IsEmpty() <span class="hljs-type">bool</span> &#123;<br> <span class="hljs-keyword">return</span> reflect.DeepEqual(r, ResponseJson&#123;&#125;)<br>&#125;<br><br><span class="hljs-comment">// 构建状态码 ，如果 传入的ResponseJson没有Status 就使用默认的状态码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildStatus</span><span class="hljs-params">(resp ResponseJson, defaultStatus <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br> <span class="hljs-keyword">if</span> resp.Status == <span class="hljs-number">0</span> &#123;<br>  <span class="hljs-keyword">return</span> defaultStatus<br> &#125;<br> <span class="hljs-keyword">return</span> resp.Status<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HttpResponse</span><span class="hljs-params">(ctx *gin.Context, status <span class="hljs-type">int</span>, resp ResponseJson)</span></span> &#123;<br> <span class="hljs-keyword">if</span> resp.IsEmpty() &#123;<br>  ctx.AbortWithStatus(status)<br>  <span class="hljs-keyword">return</span><br> &#125;<br> ctx.AbortWithStatusJSON(status, resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Success</span><span class="hljs-params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;<br> HttpResponse(ctx, buildStatus(resp, http.StatusOK), resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fail</span><span class="hljs-params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;<br> HttpResponse(ctx, buildStatus(resp, http.StatusBadRequest), resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServerFail</span><span class="hljs-params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;<br> HttpResponse(ctx, buildStatus(resp, http.StatusInternalServerError), resp)<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gin速用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装redis并且设置远程登陆和密码</title>
      <link href="/2022/11/26/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%B9%B6%E4%B8%94%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E5%92%8C%E5%AF%86%E7%A0%81/"/>
      <url>/2022/11/26/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%B9%B6%E4%B8%94%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E5%92%8C%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<!--toc--><hr><h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><blockquote><p>sudo apt-get install -y redis-server</p></blockquote><h1 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h1><blockquote><p>sudo vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</p></blockquote><p><img src="https://s2.loli.net/2024/08/26/XThu9WoMF1INzCJ.png"><br><img src="https://s2.loli.net/2024/08/26/wGmL1tdIK6EhqWQ.png"><br><img src="https://s2.loli.net/2024/08/26/zRoObl6vKPq1riC.png"></p><p>如果不知道怎么找<br>直接在命令行模式下输入<br>&#x2F;{你要搜索的东西} 然后按回车 然后按n是下一个 N是上一个</p><h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><blockquote><p>systemctl restart redis-server.service</p></blockquote><h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><p>使用远程工具 Redis Desktop Manager<br>下载地址<br>官网: <a href="https://resp.app/pricing">https://resp.app/pricing</a><br>百度网盘：<a href="https://pan.baidu.com/s/1dxo16QadKMuKPYT-z7nm6g">https://pan.baidu.com/s/1dxo16QadKMuKPYT-z7nm6g</a><br>提取码：00c0</p><p><img src="https://s2.loli.net/2024/08/26/lynw3ZIqLeWk8g9.png"></p><p><img src="https://s2.loli.net/2024/08/26/hziQdgPOETZaojN.png"><br>然后测试连接<br><img src="https://s2.loli.net/2024/08/26/mHoUBhuOxEz5W1e.png"></p><p>代表成功</p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python加密解密算法</title>
      <link href="/2022/11/04/Python%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2022/11/04/Python%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="url-encode加密"><a href="#url-encode加密" class="headerlink" title="url encode加密"></a>url encode加密</h1><p>简介：当url地址含有中文，或者参数有中文的时候，这个算是很正常了，但是把这样的url作为参数传递的时候（最常见的callback）<br>，需要把一些中文甚至’&#x2F;‘做一下编码转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> urllib.parse<br><br><br>text = <span class="hljs-string">&quot;我爱吃鸡腿&quot;</span><br>s = urllib.parse.quote(text)<br><span class="hljs-built_in">print</span>(s) <span class="hljs-comment"># %E6%88%91%E7%88%B1%E5%90%83%E9%B8%A1%E8%85%BF</span><br>u = urllib.parse.unquote(s)<br><span class="hljs-built_in">print</span>(u) <span class="hljs-comment">#我爱吃鸡腿</span><br></code></pre></td></tr></table></figure><h1 id="unicode-加密"><a href="#unicode-加密" class="headerlink" title="unicode 加密"></a>unicode 加密</h1><p>其实这应该不算一种加密 更多的应该算是一种编码与解码<br>但是由于运用很广泛 我也加进去了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2023/2/28 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br>str1 = <span class="hljs-string">&quot;你好&quot;</span><br><br><span class="hljs-comment"># 编码</span><br>enStr1 = str1.encode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>).decode()<br><span class="hljs-built_in">print</span>(enStr1) <span class="hljs-comment"># \u4f60\u597d</span><br><br><span class="hljs-comment"># 解码</span><br>deStr1 = enStr1.encode().decode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>)<br><span class="hljs-built_in">print</span>(deStr1) <span class="hljs-comment"># 你好</span><br></code></pre></td></tr></table></figure><h1 id="Base64-加密"><a href="#Base64-加密" class="headerlink" title="Base64 加密"></a>Base64 加密</h1><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_encode</span>(<span class="hljs-params">text</span>):<br>    encode_data = base64.b64encode(text.encode())<br>    <span class="hljs-keyword">return</span> encode_data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_decode</span>(<span class="hljs-params">encode_data</span>):<br>    decode_data = base64.b64decode(encode_data)<br>    <span class="hljs-keyword">return</span> decode_data<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span><br>    encode_data = base64_encode(text)<br>    decode_data = base64_decode(encode_data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 编码：&#x27;</span>, encode_data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 解码：&#x27;</span>, decode_data)<br>    <br>    <span class="hljs-comment"># Base64 编码： b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span><br><span class="hljs-comment"># Base64 解码： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，<br>由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，<br>用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。<br>摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串<br>（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，<br>两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_test1</span>():<br>    md5 = hashlib.new(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(md5.hexdigest())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_test2</span>():<br>    md5 = hashlib.md5()<br>    md5.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    md5.update(<span class="hljs-string">&#x27;python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(md5.hexdigest())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    md5_test1()  <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br>    md5_test2()  <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></code></pre></td></tr></table></figure><h1 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h1><p>简介：英文名称：Password-Based Key Derivation Function 2，<br>PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，<br>2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。<br>PBKDF2 将伪随机函数（例如 HMAC），<br>把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，<br>如果重复的次数足够大，破解的成本就会变得很高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Cryptodome.Hash <span class="hljs-keyword">import</span> SHA1<br><span class="hljs-keyword">from</span> Cryptodome.Protocol.KDF <span class="hljs-keyword">import</span> PBKDF2<br><br><br>text = <span class="hljs-string">&#x27;I love Python!&#x27;</span><br>salt = <span class="hljs-string">b&#x27;43215678&#x27;</span><br>result = PBKDF2(text,  salt, count=<span class="hljs-number">10</span>, hmac_hash_module=SHA1)<br>result = binascii.hexlify(result)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h1><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），<br>由美国国家安全局（NSA）所设计，主要适用于数字签名标准<br>（Digital Signature Standard DSS）里面定义的数字签名算法（<br>Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，<br>分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，<br>后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，<br>MD5 的密文是 32 位，而 SHA-1 是 40 位，<br>版本越强，密文越长，代价是速度越慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1_test1</span>():<br>    sha1 = hashlib.new(<span class="hljs-string">&#x27;sha1&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(sha1.hexdigest())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1_test2</span>():<br>    sha1 = hashlib.sha1()<br>    sha1.update(<span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(sha1.hexdigest())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sha1_test1()  <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br>    sha1_test2()  <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></code></pre></td></tr></table></figure><h1 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h1><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码<br>（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），<br>于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash<br>函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、<br>对报文进行 Hash 运算，形成固定长度的认证码。通信双方<br>通过认证码的校验来确定报文的合法性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hmac<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_test1</span>():<br>    message = <span class="hljs-string">b&#x27;I love python!&#x27;</span><br>    key = <span class="hljs-string">b&#x27;secret&#x27;</span><br>    md5 = hmac.new(key, message, digestmod=<span class="hljs-string">&#x27;MD5&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(md5.hexdigest())<br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_test2</span>():<br>    key = <span class="hljs-string">&#x27;secret&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    sha1 = hmac.new(key, digestmod=<span class="hljs-string">&#x27;sha1&#x27;</span>)<br>    sha1.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    sha1.update(<span class="hljs-string">&#x27;Python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(sha1.hexdigest())<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    hmac_test1()  <span class="hljs-comment"># 9c503a1f852edcc3526ea56976c38edf</span><br>    hmac_test2()  <span class="hljs-comment"># 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br><br></code></pre></td></tr></table></figure><h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，<br>属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），<br>DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，<br>但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），<br>由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-comment"># 加密模式 CBC，填充方式 PAD_PKCS5</span><br><span class="hljs-keyword">from</span> pyDes <span class="hljs-keyword">import</span> des, CBC, PAD_PKCS5<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    k = des(key, CBC, iv, pad=<span class="hljs-literal">None</span>, padmode=PAD_PKCS5)<br>    en = k.encrypt(text, padmode=PAD_PKCS5)<br>    <span class="hljs-keyword">return</span> binascii.b2a_hex(en)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_decrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    k = des(key, CBC, iv, pad=<span class="hljs-literal">None</span>, padmode=PAD_PKCS5)<br>    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)<br>    <span class="hljs-keyword">return</span> de<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span><br>    iv = secret_key           <span class="hljs-comment"># 偏移量</span><br>    secret_str = des_encrypt(secret_key, text, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, secret_str)<br>    clear_str = des_decrypt(secret_key, secret_str, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, clear_str)<br>    <br>    <br>    <span class="hljs-comment"># 加密字符串： b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span><br>    <span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、<br>Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。<br>70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，<br>它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，<br>原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，<br>即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> DES3<br><span class="hljs-keyword">from</span> Cryptodome <span class="hljs-keyword">import</span> Random<br><br><br><span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        value += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    <span class="hljs-comment"># 加密模式 OFB</span><br>    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)<br>    encrypted_text = cipher_encrypt.encrypt(text.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">return</span> encrypted_text<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_decrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    <span class="hljs-comment"># 加密模式 OFB</span><br>    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)<br>    decrypted_text = cipher_decrypt.decrypt(text)<br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    key = <span class="hljs-string">&#x27;12345678&#x27;</span>            <span class="hljs-comment"># 密钥，16 位</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>     <span class="hljs-comment"># 加密对象</span><br>    iv = Random.new().read(DES3.block_size)  <span class="hljs-comment"># DES3.block_size == 8</span><br>    secret_str = des_encrypt(key, text, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, secret_str)<br>    clear_str = des_decrypt(key, secret_str, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, clear_str)<br><br><br><span class="hljs-comment"># 加密字符串： b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span><br><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），<br>在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，<br>并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。<br>这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，<br>它本身只有一个密钥，即用来实现加密，也用于解密。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES<br><br><br><span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        value += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)<br><br><br><span class="hljs-comment"># 加密方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt</span>(<span class="hljs-params">key, t, iv</span>):<br>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  <span class="hljs-comment"># 初始化加密器</span><br>    encrypt_aes = aes.encrypt(add_to_16(t)) <span class="hljs-comment"># 先进行 aes 加密</span><br>    <span class="hljs-comment"># 执行加密并转码返回 bytes</span><br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <br>    <span class="hljs-keyword">return</span> encrypted_text<br><br><br><span class="hljs-comment"># 解密方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">key, t, iv</span>):<br>    <span class="hljs-comment"># 初始化加密器</span><br>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))     <br>    <span class="hljs-comment"># 优先逆向解密 base64 成 bytes   </span><br>    base64_decrypted = base64.decodebytes(t.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <br>    <span class="hljs-comment"># 执行解密密并转码返回str </span><br>    decrypted_text = <span class="hljs-built_in">str</span>(aes.decrypt(base64_decrypted), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">t,key,iv</span>):<br>    <span class="hljs-comment"># 初始化加密器</span><br>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))<br>    <span class="hljs-comment"># 优先逆向解密 base64 成 bytes</span><br>    base64_decrypted = base64.b64decode(t.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-comment"># 执行解密密并转码返回str</span><br>    decrypted_text = <span class="hljs-built_in">str</span>(unpad(aes.decrypt(base64_decrypted), AES.block_size), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span><br>    iv = secret_key           <span class="hljs-comment"># 初始向量</span><br>    encrypted_str = aes_encrypt(secret_key, text, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)<br>    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<br><br><br><span class="hljs-comment"># 加密字符串： lAVKvkQh+GtdNpoKf4/mHA==</span><br><span class="hljs-comment"># 解密字符串： I love Python!</span><br></code></pre></td></tr></table></figure><p><strong>AES ECB PKC7 模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Cryptodome.Util.Padding <span class="hljs-keyword">import</span> pad<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_cipher</span>(<span class="hljs-params">key, aes_str</span>):<br>    <span class="hljs-comment"># 使用key,选择加密方式</span><br>    aes = AES.new(key.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.MODE_ECB)<br>    pad_pkcs7 = pad(aes_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size, style=<span class="hljs-string">&#x27;pkcs7&#x27;</span>)  <span class="hljs-comment"># 选择pkcs7补全</span><br>    encrypt_aes = aes.encrypt(pad_pkcs7)<br>    <span class="hljs-comment"># 加密结果</span><br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 解码</span><br>    encrypted_text_str = encrypted_text.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment"># 此处我的输出结果老有换行符，所以用了临时方法将它剔除</span><br>    <span class="hljs-keyword">return</span> encrypted_text_str<br></code></pre></td></tr></table></figure><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，<br>密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。<br>RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，<br>该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，<br>虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，<br>它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，<br>现在逐渐不推荐使用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> ARC4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_encrypt</span>(<span class="hljs-params">key, t</span>):<br>    enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    res = enc.encrypt(t.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    res = base64.b64encode(res)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, t</span>):<br>    data = base64.b64decode(t)<br>    enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    res = enc.decrypt(data)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span><br>    encrypted_str = rc4_encrypt(secret_key, text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)<br>    decrypted_str = rc4_decrypt(secret_key, encrypted_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<br><br><br><span class="hljs-comment"># 加密字符串： b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span><br><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，<br>2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p><p>目前没有找到有第三方库可以直接实现 Rabbit 算法，<br>在 Python 中实现可以参考：<a href="https://asecuritysite.com/encryption/rabbit2">https://asecuritysite.com/encryption/rabbit2</a></p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、<br>阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，<br>RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。<br>在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。<br>RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> rsa<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_encrypt</span>(<span class="hljs-params">pu_key, t</span>):<br>    <span class="hljs-comment"># 公钥加密</span><br>    rsa = rsa.encrypt(t.encode(<span class="hljs-string">&quot;utf-8&quot;</span>), pu_key)<br>    <span class="hljs-keyword">return</span> rsa<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_decrypt</span>(<span class="hljs-params">pr_key, t</span>):<br>    <span class="hljs-comment"># 私钥解密</span><br>    rsa = rsa.decrypt(t, pr_key).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">return</span> rsa<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    public_key, private_key = rsa.newkeys(<span class="hljs-number">512</span>)   <span class="hljs-comment"># 生成公钥、私钥</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;公钥：&#x27;</span>, public_key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;私钥：&#x27;</span>, private_key)<br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>  <span class="hljs-comment"># 加密对象</span><br>    encrypted_str = rsa_encrypt(public_key, text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)<br>    decrypted_str = rsa_decrypt(private_key, encrypted_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span><br><span class="hljs-string">私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span><br><span class="hljs-string">加密字符串： b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span><br><span class="hljs-string">解密字符串： I love Python!</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="模块-Cryptodome："><a href="#模块-Cryptodome：" class="headerlink" title="模块 Cryptodome："></a>模块 Cryptodome：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Cryptodome.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5<br><br><br>data = <span class="hljs-string">&quot;cKK8B2rWwfwWeXhz&quot;</span><br>public_key = <span class="hljs-string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span><br>rsa_key = RSA.import_key(base64.b64decode(public_key))  <span class="hljs-comment"># 导入读取到的公钥</span><br>cipher = PKCS1_v1_5.new(rsa_key)                        <span class="hljs-comment"># 生成对象</span><br>cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)))<br><span class="hljs-built_in">print</span>(cipher_text)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言加解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang加密解密算法</title>
      <link href="/2022/09/26/Golang%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2022/09/26/Golang%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="md5-加密——不可逆"><a href="#md5-加密——不可逆" class="headerlink" title="md5 加密——不可逆"></a>md5 加密——不可逆</h1><p>MD5信息摘要算法是一种被广泛使用的密码散列函数，可以产生出一个128位（16进制，32个字符）的散列值（hash value），用于确保信息传输完整一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/md5&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// MD5Str md5验证</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MD5Str</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := md5.New()<br> h.Write([]<span class="hljs-type">byte</span>(src)) <span class="hljs-comment">// 需要加密的字符串为</span><br> fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))) <span class="hljs-comment">// 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// MD5Str2 md5验证</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MD5Str2</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%x&quot;</span>, md5.Sum([]<span class="hljs-type">byte</span>(src)))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="hmacsha-加密——不可逆"><a href="#hmacsha-加密——不可逆" class="headerlink" title="hmacsha 加密——不可逆"></a>hmacsha 加密——不可逆</h1><p>HMAC是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，<br>它通过一个标准算法，在计算哈希的过程中，把key混入计算过程中。<br>和我们自定义的加salt算法不同，Hmac算法针对所有哈希算法都通用，无论是MD5还是SHA-1。采用Hmac替代我们自己的salt算法，可以使程序算法更标准化，也更安全。</p><h2 id="hmac-md5加密"><a href="#hmac-md5加密" class="headerlink" title="hmac-md5加密"></a>hmac-md5加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//key随意设置 data 要加密数据</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hmac</span><span class="hljs-params">(key, data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-comment">// 创建对应的md5哈希加密算法</span><br>    hash:= hmac.New(md5.New, []<span class="hljs-type">byte</span>(key)) <br><br>    hash.Write([]<span class="hljs-type">byte</span>(data))<br><br>    <span class="hljs-keyword">return</span> hex.EncodeToString(hash.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="hamacsha1-加密"><a href="#hamacsha1-加密" class="headerlink" title="hamacsha1 加密"></a>hamacsha1 加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HmacSha1 hmacSha1加密 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSha1</span><span class="hljs-params">(src, key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha1.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hamacsha-256-加密"><a href="#hamacsha-256-加密" class="headerlink" title="hamacsha 256 加密"></a>hamacsha 256 加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HmacSHA256 hmacSha256验证  key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA256</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha256.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hmacsha512加密"><a href="#hmacsha512加密" class="headerlink" title="hmacsha512加密"></a>hmacsha512加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HmacSHA512 hmacSha512验证</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA512</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha512.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hamasha-调用"><a href="#hamasha-调用" class="headerlink" title="hamasha 调用"></a>hamasha 调用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/hmac&quot;</span><br> <span class="hljs-string">&quot;crypto/md5&quot;</span><br> <span class="hljs-string">&quot;crypto/sha1&quot;</span><br> <span class="hljs-string">&quot;crypto/sha256&quot;</span><br> <span class="hljs-string">&quot;crypto/sha512&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// Hmac hmac验证 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hmac</span><span class="hljs-params">(key, data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><br> hash := hmac.New(md5.New, []<span class="hljs-type">byte</span>(key)) <span class="hljs-comment">// 创建对应的md5哈希加密算法</span><br><br> hash.Write([]<span class="hljs-type">byte</span>(data))<br><br> <span class="hljs-keyword">return</span> hex.EncodeToString(hash.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br><br>&#125;<br><br><span class="hljs-comment">// HmacSHA256 hmacSha256加密  key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA256</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha256.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// HmacSHA512 hmacSha512加密 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA512</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha512.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// HmacSha1 hmacSha1加密 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSha1</span><span class="hljs-params">(src, key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha1.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// SHA256Str sha256加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA256Str</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha256.New()<br> h.Write([]<span class="hljs-type">byte</span>(src)) <span class="hljs-comment">// 需要加密的字符串为</span><br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> hmac_ := Hmac(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> hamcsha1 := HmacSha1(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> hamcsha256 := HmacSHA256(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> hamacsha512 := HmacSHA512(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> fmt.Println(hmac_)<br> fmt.Println(hamcsha1)<br> fmt.Println(hamcsha256)<br> fmt.Println(hamacsha512)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果</p><blockquote><p>d8801f70df7891764116e1ac003f7189</p><p>60d68e01c8a86f3b87e4e147e9f0fadce2a69661</p><p>b3f8ddf991288036864761a55046877adfe4f78ec9a89bb63932af92689b139f</p><p>b9b1fca0fe91522482ee1b2161e57d67482af6ef371614365b918c31ce774f9126ed627e378a063145f404ff2de7bd84f8e4798c385662ef4749e58e9209ca63</p></blockquote><h1 id="Sha-加密——不可逆"><a href="#Sha-加密——不可逆" class="headerlink" title="Sha 加密——不可逆"></a>Sha 加密——不可逆</h1><h2 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h2><p>SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sha1</span><span class="hljs-params">(data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> sha1_ := sha1.New()<br> sha1_.Write([]<span class="hljs-type">byte</span>(data))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(sha1_.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a>sha256</h2><p>SHA256算法使用的哈希值长度是256位。这是一个抽象类。此类的唯一实现是SHA256Managed。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SHA256 sha256加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA256</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha256.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sha512"><a href="#sha512" class="headerlink" title="sha512"></a>sha512</h2><p>SHA (Secure Hash Algorithm，译作安全散列算法) 是美国国家安全局 (NSA) 设计，美国国家标准与技术研究院 (NIST) 发布的一系列密码散列函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SHA512 sha512加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA512</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha512.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sha调用"><a href="#sha调用" class="headerlink" title="sha调用"></a>sha调用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/sha1&quot;</span><br> <span class="hljs-string">&quot;crypto/sha256&quot;</span><br> <span class="hljs-string">&quot;crypto/sha512&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sha1</span><span class="hljs-params">(data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> sha1_ := sha1.New()<br> sha1_.Write([]<span class="hljs-type">byte</span>(data))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(sha1_.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br>&#125;<br><br><span class="hljs-comment">// SHA256 sha256加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA256</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha256.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// SHA512 sha512加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA512</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha512.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> _sha1 := Sha1(<span class="hljs-string">&quot;始識&quot;</span>)<br> _sha256 := SHA256(<span class="hljs-string">&quot;始識&quot;</span>)<br> _sha512 := SHA512(<span class="hljs-string">&quot;始識&quot;</span>)<br> fmt.Println(_sha1)<br> fmt.Println(_sha256)<br> fmt.Println(_sha512)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><blockquote><p>7bac01cc58a26f3cb280b0466794a89441279946</p><p>6ef99e6d3fe34a46afcdc438435728fe95ffdab18e389ddd31609edd6729b11d</p><p>0c04e9b79f488646d0eac6f65468248507939d643cc92709b14eb0d18d8f13db509ed5ccd3312d6c234408185a4611a42525dce9e8d32255640f56a2f836635a</p></blockquote><h1 id="base-加密-解密"><a href="#base-加密-解密" class="headerlink" title="base 加密 解密"></a>base 加密 解密</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// BASE64StdEncode base编码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdEncode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="hljs-type">byte</span>(src))<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// BASE64StdDecode base解码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdDecode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> a, err := base64.StdEncoding.DecodeString(src)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  _ = fmt.Errorf(<span class="hljs-string">&quot;解密失败,%v\n&quot;</span>, err)<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(a)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="base64-调用"><a href="#base64-调用" class="headerlink" title="base64  调用"></a>base64  调用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// BASE64StdEncode base编码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdEncode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="hljs-type">byte</span>(src))<br>&#125;<br><br><span class="hljs-comment">// BASE64StdDecode base解码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdDecode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> a, err := base64.StdEncoding.DecodeString(src)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  _ = fmt.Errorf(<span class="hljs-string">&quot;解密失败,%v\n&quot;</span>, err)<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(a)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> encodeBase64 := BASE64StdEncode(<span class="hljs-string">&quot;hybpjx&quot;</span>)<br> decodeBase64 := BASE64StdDecode(encodeBase64)<br> fmt.Println(encodeBase64)<br> fmt.Println(decodeBase64)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果</p><blockquote><p>aHlicGp4<br>hybpjx</p></blockquote><h1 id="AES-加密"><a href="#AES-加密" class="headerlink" title="AES 加密"></a>AES 加密</h1><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12843286/1662199524599-a6b77cb9-25c9-4f5b-99c2-493ab50bb7ec.png#clientId=uae04fe37-f91f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub1ee8990&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3573&originWidth=1993&originalType=url&ratio=1&rotation=0&showTitle=false&size=1304823&status=done&style=none&taskId=u8b08ff15-15f1-45c8-b63a-6e18c32ee86&title=" alt="image.png"><br><strong>由于加密和解密的秘钥是相同的，所以AES为对称加密</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS7Padding</span><span class="hljs-params">(ciphertext []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> padding := blockSize - <span class="hljs-built_in">len</span>(ciphertext)%blockSize<br> padtext := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ciphertext, padtext...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS7UnPadding</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> length := <span class="hljs-built_in">len</span>(origData)<br> unpadding := <span class="hljs-type">int</span>(origData[length<span class="hljs-number">-1</span>])<br> <span class="hljs-keyword">return</span> origData[:(length - unpadding)]<br>&#125;<br><br><span class="hljs-comment">//AES加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncrypt</span><span class="hljs-params">(origData, key []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br> block, err := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br> &#125;<br> blockSize := block.BlockSize()<br> origData = PKCS7Padding(origData, blockSize)<br> blockMode := cipher.NewCBCEncrypter(block, key[:blockSize])<br> crypted := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(origData))<br> blockMode.CryptBlocks(crypted, origData)<br> <span class="hljs-keyword">return</span> crypted, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//AES解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecrypt</span><span class="hljs-params">(crypted, key []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br> block, err := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br> &#125;<br> blockSize := block.BlockSize()<br> blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])<br> origData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(crypted))<br> blockMode.CryptBlocks(origData, crypted)<br> origData = PKCS7UnPadding(origData)<br> <span class="hljs-keyword">return</span> origData, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> text := <span class="hljs-string">&quot;今晚打老虎&quot;</span><br> AesKey := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;0f90023fc9ae101e&quot;</span>) <span class="hljs-comment">//秘钥长度为16的倍数</span><br> fmt.Printf(<span class="hljs-string">&quot;明文: %s\n秘钥: %s\n&quot;</span>, text, <span class="hljs-type">string</span>(AesKey))<br> encrypted, err := AesEncrypt([]<span class="hljs-type">byte</span>(text), AesKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> fmt.Printf(<span class="hljs-string">&quot;加密后: %s\n&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> origin, err := AesDecrypt(encrypted, AesKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> fmt.Printf(<span class="hljs-string">&quot;解密后明文: %s\n&quot;</span>, <span class="hljs-type">string</span>(origin))<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="CBC方式"><a href="#CBC方式" class="headerlink" title="CBC方式"></a>CBC方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncryptCBC</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (encrypted []<span class="hljs-type">byte</span>) &#123;<br> <span class="hljs-comment">// 分组秘钥</span><br> <span class="hljs-comment">// NewCipher该函数限制了输入k的长度必须为16, 24或者32</span><br> block, _ := aes.NewCipher(key)<br> blockSize := block.BlockSize()                              <span class="hljs-comment">// 获取秘钥块的长度</span><br> origData = pkcs5Padding(origData, blockSize)                <span class="hljs-comment">// 补全码</span><br> blockMode := cipher.NewCBCEncrypter(block, key[:blockSize]) <span class="hljs-comment">// 加密模式</span><br> encrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(origData))                     <span class="hljs-comment">// 创建数组</span><br> blockMode.CryptBlocks(encrypted, origData)                  <span class="hljs-comment">// 加密</span><br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecryptCBC</span><span class="hljs-params">(encrypted []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (decrypted []<span class="hljs-type">byte</span>) &#123;<br> block, _ := aes.NewCipher(key)                              <span class="hljs-comment">// 分组秘钥</span><br> blockSize := block.BlockSize()                              <span class="hljs-comment">// 获取秘钥块的长度</span><br> blockMode := cipher.NewCBCDecrypter(block, key[:blockSize]) <span class="hljs-comment">// 加密模式</span><br> decrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(encrypted))                    <span class="hljs-comment">// 创建数组</span><br> blockMode.CryptBlocks(decrypted, encrypted)                 <span class="hljs-comment">// 解密</span><br> decrypted = pkcs5UnPadding(decrypted)                       <span class="hljs-comment">// 去除补全码</span><br> <span class="hljs-keyword">return</span> decrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkcs5Padding</span><span class="hljs-params">(ciphertext []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> padding := blockSize - <span class="hljs-built_in">len</span>(ciphertext)%blockSize<br> padtext := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ciphertext, padtext...)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkcs5UnPadding</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> length := <span class="hljs-built_in">len</span>(origData)<br> unpadding := <span class="hljs-type">int</span>(origData[length<span class="hljs-number">-1</span>])<br> <span class="hljs-keyword">return</span> origData[:(length - unpadding)]<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> origData := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;460154561234&quot;</span>) <span class="hljs-comment">// 待加密的数据</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;9876787656785679&quot;</span>)  <span class="hljs-comment">// 加密的密钥</span><br> log.Println(<span class="hljs-string">&quot;原文：&quot;</span>, <span class="hljs-type">string</span>(origData))<br><br> log.Println(<span class="hljs-string">&quot;------------------ CBC模式 --------------------&quot;</span>)<br> encrypted := AesEncryptCBC(origData, key)<br> log.Println(<span class="hljs-string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))<br> log.Println(<span class="hljs-string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> decrypted := AesDecryptCBC(encrypted, key)<br> log.Println(<span class="hljs-string">&quot;解密结果：&quot;</span>, <span class="hljs-type">string</span>(decrypted))<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ECB方式"><a href="#ECB方式" class="headerlink" title="ECB方式"></a>ECB方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncryptECB</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (encrypted []<span class="hljs-type">byte</span>) &#123;<br> cipher, _ := aes.NewCipher(generateKey(key))<br> length := (<span class="hljs-built_in">len</span>(origData) + aes.BlockSize) / aes.BlockSize<br> plain := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, length*aes.BlockSize)<br> <span class="hljs-built_in">copy</span>(plain, origData)<br> pad := <span class="hljs-type">byte</span>(<span class="hljs-built_in">len</span>(plain) - <span class="hljs-built_in">len</span>(origData))<br> <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(origData); i &lt; <span class="hljs-built_in">len</span>(plain); i++ &#123;<br>  plain[i] = pad<br> &#125;<br> encrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(plain))<br> <span class="hljs-comment">// 分组分块加密</span><br> <span class="hljs-keyword">for</span> bs, be := <span class="hljs-number">0</span>, cipher.BlockSize(); bs &lt;= <span class="hljs-built_in">len</span>(origData); bs, be = bs+cipher.BlockSize(), be+cipher.BlockSize() &#123;<br>  cipher.Encrypt(encrypted[bs:be], plain[bs:be])<br> &#125;<br><br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecryptECB</span><span class="hljs-params">(encrypted []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (decrypted []<span class="hljs-type">byte</span>) &#123;<br> cipher, _ := aes.NewCipher(generateKey(key))<br> decrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(encrypted))<br> <span class="hljs-comment">//</span><br> <span class="hljs-keyword">for</span> bs, be := <span class="hljs-number">0</span>, cipher.BlockSize(); bs &lt; <span class="hljs-built_in">len</span>(encrypted); bs, be = bs+cipher.BlockSize(), be+cipher.BlockSize() &#123;<br>  cipher.Decrypt(decrypted[bs:be], encrypted[bs:be])<br> &#125;<br><br> trim := <span class="hljs-number">0</span><br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(decrypted) &gt; <span class="hljs-number">0</span> &#123;<br>  trim = <span class="hljs-built_in">len</span>(decrypted) - <span class="hljs-type">int</span>(decrypted[<span class="hljs-built_in">len</span>(decrypted)<span class="hljs-number">-1</span>])<br> &#125;<br><br> <span class="hljs-keyword">return</span> decrypted[:trim]<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateKey</span><span class="hljs-params">(key []<span class="hljs-type">byte</span>)</span></span> (genKey []<span class="hljs-type">byte</span>) &#123;<br> genKey = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">16</span>)<br> <span class="hljs-built_in">copy</span>(genKey, key)<br> <span class="hljs-keyword">for</span> i := <span class="hljs-number">16</span>; i &lt; <span class="hljs-built_in">len</span>(key); &#123;<br>  <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span> &amp;&amp; i &lt; <span class="hljs-built_in">len</span>(key); j, i = j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span> &#123;<br>   genKey[j] ^= key[i]<br>  &#125;<br> &#125;<br> <span class="hljs-keyword">return</span> genKey<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> origData := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;460154561234&quot;</span>) <span class="hljs-comment">// 待加密的数据</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;9876787656785679&quot;</span>)  <span class="hljs-comment">// 加密的密钥</span><br> log.Println(<span class="hljs-string">&quot;原文：&quot;</span>, <span class="hljs-type">string</span>(origData))<br><br> log.Println(<span class="hljs-string">&quot;------------------ ECB模式 --------------------&quot;</span>)<br> encrypted := AesEncryptECB(origData, key)<br> log.Println(<span class="hljs-string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))<br> log.Println(<span class="hljs-string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> decrypted := AesDecryptECB(encrypted, key)<br> log.Println(<span class="hljs-string">&quot;解密结果：&quot;</span>, <span class="hljs-type">string</span>(decrypted))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CFB-方式"><a href="#CFB-方式" class="headerlink" title="CFB 方式"></a>CFB 方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;crypto/rand&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;io&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncryptCFB</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (encrypted []<span class="hljs-type">byte</span>) &#123;<br> block, err := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> encrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, aes.BlockSize+<span class="hljs-built_in">len</span>(origData))<br> iv := encrypted[:aes.BlockSize]<br> <span class="hljs-keyword">if</span> _, err := io.ReadFull(rand.Reader, iv); err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> stream := cipher.NewCFBEncrypter(block, iv)<br> stream.XORKeyStream(encrypted[aes.BlockSize:], origData)<br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecryptCFB</span><span class="hljs-params">(encrypted []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (decrypted []<span class="hljs-type">byte</span>) &#123;<br> block, _ := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(encrypted) &lt; aes.BlockSize &#123;<br>  <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;ciphertext too short&quot;</span>)<br> &#125;<br> iv := encrypted[:aes.BlockSize]<br> encrypted = encrypted[aes.BlockSize:]<br><br> stream := cipher.NewCFBDecrypter(block, iv)<br> stream.XORKeyStream(encrypted, encrypted)<br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> origData := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;460154561234&quot;</span>) <span class="hljs-comment">// 待加密的数据</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;9876787656785679&quot;</span>)  <span class="hljs-comment">// 加密的密钥</span><br> log.Println(<span class="hljs-string">&quot;原文：&quot;</span>, <span class="hljs-type">string</span>(origData))<br><br> log.Println(<span class="hljs-string">&quot;------------------ CFB模式 --------------------&quot;</span>)<br> encrypted := AesEncryptCFB(origData, key)<br> log.Println(<span class="hljs-string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))<br> log.Println(<span class="hljs-string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> decrypted := AesDecryptCFB(encrypted, key)<br> log.Println(<span class="hljs-string">&quot;解密结果：&quot;</span>, <span class="hljs-type">string</span>(decrypted))<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h1><p>RSA是一种基于公钥密码体制的优秀加密算法，1978年由美国(MIT)的李维斯特(Rivest)、沙米尔(Shamir)、艾德曼(Adleman)提的。<br>RSA算法是一种分组密码体制算法，它的保密强度是建立在具有大素数因子的合数其因子分解是困难的（基于大数分解的难度）。<br>公钥和私钥是一对大素数的函数，从一个公钥和密文中恢复出明文的难度等价于分解两个大素数之积。<br>RSA得到了世界上的最广泛的应用，ISO在1992年颁布的国际标准X.509中,将RSA算法正式纳入国际标准。</p><h2 id="RSA加密-1"><a href="#RSA加密-1" class="headerlink" title="RSA加密"></a>RSA加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/rand&quot;</span><br> <span class="hljs-string">&quot;crypto/rsa&quot;</span><br> <span class="hljs-string">&quot;crypto/x509&quot;</span><br> <span class="hljs-string">&quot;encoding/pem&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><br><br><br><span class="hljs-comment">// GenerateRSAKey 生成RSA私钥和公钥，保存到文件中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateRSAKey</span><span class="hljs-params">(bits <span class="hljs-type">int</span>)</span></span>&#123;<br> <span class="hljs-comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span><br> <span class="hljs-comment">//Reader是一个全局、共享的密码用强随机数生成器</span><br> privateKey, err := rsa.GenerateKey(rand.Reader, bits)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//保存私钥</span><br> <span class="hljs-comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span><br> <span class="hljs-comment">// X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey) // PKCS1 和 9 是不一致的</span><br> X509PrivateKey,err := x509.MarshalPKCS8PrivateKey(privateKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> <span class="hljs-comment">//使用pem格式对x509输出的内容进行编码</span><br> <span class="hljs-comment">//创建文件保存私钥</span><br> privateFile, err := os.Create(<span class="hljs-string">&quot;private.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> privateFile.Close()<br> <span class="hljs-comment">//构建一个pem.Block结构体对象</span><br> privateBlock:= pem.Block&#123;Type: <span class="hljs-string">&quot;PRIVATE KEY&quot;</span>,Bytes:X509PrivateKey&#125;<br> <span class="hljs-comment">//将数据保存到文件</span><br> pem.Encode(privateFile,&amp;privateBlock)<br> <span class="hljs-comment">//保存公钥</span><br> <span class="hljs-comment">//获取公钥的数据</span><br> publicKey:=privateKey.PublicKey<br> <span class="hljs-comment">//X509对公钥编码</span><br> X509PublicKey,err:=x509.MarshalPKIXPublicKey(&amp;publicKey)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//pem格式编码</span><br> <span class="hljs-comment">//创建用于保存公钥的文件</span><br> publicFile, err := os.Create(<span class="hljs-string">&quot;public.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> publicFile.Close()<br> <span class="hljs-comment">//创建一个pem.Block结构体对象</span><br> publicBlock:= pem.Block&#123;Type: <span class="hljs-string">&quot;Public Key&quot;</span>,Bytes:X509PublicKey&#125;<br> <span class="hljs-comment">//保存到文件</span><br> pem.Encode(publicFile,&amp;publicBlock)<br>&#125;<br><br><span class="hljs-comment">// RsaEncrypt RSA加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RsaEncrypt</span><span class="hljs-params">(plainText []<span class="hljs-type">byte</span>,path <span class="hljs-type">string</span>)</span></span>[]<span class="hljs-type">byte</span>&#123;<br> <span class="hljs-comment">//打开文件</span><br> file,err:=os.Open(path)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//读取文件的内容</span><br> info, _ := file.Stat()<br> buf:=<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>,info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//x509解码</span><br> publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//类型断言</span><br> publicKey:=publicKeyInterface.(*rsa.PublicKey)<br> <span class="hljs-comment">//对明文进行加密</span><br> cipherText, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, plainText)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//返回密文</span><br> <span class="hljs-keyword">return</span> cipherText<br>&#125;<br><br><span class="hljs-comment">// RsaDecrypt RSA解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RsaDecrypt</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>,path <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span>&#123;<br> <span class="hljs-comment">//打开文件</span><br> file,err:=os.Open(path)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//获取文件内容</span><br> info, _ := file.Stat()<br> buf:=<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>,info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//X509解码</span><br> privateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> <span class="hljs-comment">//对密文进行解密</span><br> plainText,_:=rsa.DecryptPKCS1v15(rand.Reader,privateKey.(*rsa.PrivateKey),cipherText)<br> <span class="hljs-comment">//返回明文</span><br> <span class="hljs-keyword">return</span> plainText<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br> <span class="hljs-comment">// RSA/ECB/PKCS1Padding</span><br> <span class="hljs-comment">// RSA是算法，ECB是分块模式，PKCS1Padding是填充模式</span><br><br> <span class="hljs-comment">// pkcs1私钥生成openssl genrsa -out pkcs1.pem 1024</span><br> <span class="hljs-comment">// pkcs1转pkcs8私钥 ：openssl pkcs8 -in pkcs8.pem -nocrypt -out pkcs1.pem</span><br><br> <span class="hljs-comment">// pkcs1 BEGIN RSA PRIVATE KEY</span><br> <span class="hljs-comment">// pkcs8 BEGIN PRIVATE KEY</span><br><br> GenerateRSAKey(<span class="hljs-number">1024</span>)<br> publicPath := <span class="hljs-string">&quot;public_key.pem&quot;</span><br> privatePath := <span class="hljs-string">&quot;private_key.pem&quot;</span><br><br> publicPath = <span class="hljs-string">&quot;public.pem&quot;</span><br> privatePath = <span class="hljs-string">&quot;private.pem&quot;</span><br><br> txt := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br> encrptTxt := RsaEncrypt(txt,publicPath)<br> decrptCode := RsaDecrypt(encrptTxt,privatePath)<br> fmt.Println(<span class="hljs-type">string</span>(decrptCode))<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="RSA分段加密"><a href="#RSA分段加密" class="headerlink" title="RSA分段加密"></a>RSA分段加密</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/rand&quot;</span><br> <span class="hljs-string">&quot;crypto/rsa&quot;</span><br> <span class="hljs-string">&quot;crypto/x509&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/pem&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br> <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> GenerateRSAKey(<span class="hljs-number">2048</span>)<br> publicPath := <span class="hljs-string">&quot;public.pem&quot;</span><br> privatePath := <span class="hljs-string">&quot;private.pem&quot;</span><br> <span class="hljs-keyword">var</span> a = []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br> encrptTxt, err := RsaEncryptBlock(a, publicPath)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br> &#125;<br> encodeString := base64.StdEncoding.EncodeToString(encrptTxt)<br> decodeByte, err := base64.StdEncoding.DecodeString(encodeString)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//生成RSA私钥和公钥，保存到文件中</span><br> decrptCode := RSA_Decrypts(decodeByte, privatePath)<br> fmt.Println(<span class="hljs-type">string</span>(decrptCode))<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateRSAKey</span><span class="hljs-params">(bits <span class="hljs-type">int</span>)</span></span> &#123;<br> <span class="hljs-comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span><br> <span class="hljs-comment">//Reader是一个全局、共享的密码用强随机数生成器</span><br> privateKey, err := rsa.GenerateKey(rand.Reader, bits)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//保存私钥</span><br> <span class="hljs-comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span><br> <span class="hljs-comment">// X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey) // PKCS1 和 9 是不一致的</span><br> X509PrivateKey, err := x509.MarshalPKCS8PrivateKey(privateKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> <span class="hljs-comment">//使用pem格式对x509输出的内容进行编码</span><br> <span class="hljs-comment">//创建文件保存私钥</span><br> privateFile, err := os.Create(<span class="hljs-string">&quot;private.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> privateFile.Close()<br> <span class="hljs-comment">//构建一个pem.Block结构体对象</span><br> privateBlock := pem.Block&#123;Type: <span class="hljs-string">&quot;PRIVATE KEY&quot;</span>, Bytes: X509PrivateKey&#125;<br> <span class="hljs-comment">//将数据保存到文件</span><br> pem.Encode(privateFile, &amp;privateBlock)<br> <span class="hljs-comment">//保存公钥</span><br> <span class="hljs-comment">//获取公钥的数据</span><br> publicKey := privateKey.PublicKey<br> <span class="hljs-comment">//X509对公钥编码</span><br> X509PublicKey, err := x509.MarshalPKIXPublicKey(&amp;publicKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//pem格式编码</span><br> <span class="hljs-comment">//创建用于保存公钥的文件</span><br> publicFile, err := os.Create(<span class="hljs-string">&quot;public.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> publicFile.Close()<br> <span class="hljs-comment">//创建一个pem.Block结构体对象</span><br> publicBlock := pem.Block&#123;Type: <span class="hljs-string">&quot;Public Key&quot;</span>, Bytes: X509PublicKey&#125;<br> <span class="hljs-comment">//保存到文件</span><br> pem.Encode(publicFile, &amp;publicBlock)<br>&#125;<br><br><span class="hljs-comment">// RSA_Decrypts RSA解密支持分段解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RSA_Decrypts</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>, path <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> <span class="hljs-comment">//打开文件</span><br> <span class="hljs-keyword">var</span> bytesDecrypt []<span class="hljs-type">byte</span><br> file, err := os.Open(path)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//获取文件内容</span><br> info, _ := file.Stat()<br> buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//X509解码</span><br> privateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> p := privateKey.(*rsa.PrivateKey)<br> keySize := p.Size()<br> srcSize := <span class="hljs-built_in">len</span>(cipherText)<br> log.Println(<span class="hljs-string">&quot;密钥长度&quot;</span>, keySize, <span class="hljs-string">&quot;密文长度&quot;</span>, srcSize)<br> <span class="hljs-keyword">var</span> offSet = <span class="hljs-number">0</span><br> <span class="hljs-keyword">var</span> buffer = bytes.Buffer&#123;&#125;<br> <span class="hljs-keyword">for</span> offSet &lt; srcSize &#123;<br>  endIndex := offSet + keySize<br>  <span class="hljs-keyword">if</span> endIndex &gt; srcSize &#123;<br>   endIndex = srcSize<br>  &#125;<br>  bytesOnce, err := rsa.DecryptPKCS1v15(rand.Reader, p, cipherText[offSet:endIndex])<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>  &#125;<br>  buffer.Write(bytesOnce)<br>  offSet = endIndex<br> &#125;<br> bytesDecrypt = buffer.Bytes()<br> <span class="hljs-keyword">return</span> bytesDecrypt<br>&#125;<br><br><span class="hljs-comment">// RsaEncryptBlock 公钥加密-分段</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RsaEncryptBlock</span><span class="hljs-params">(src []<span class="hljs-type">byte</span>, path <span class="hljs-type">string</span>)</span></span> (bytesEncrypt []<span class="hljs-type">byte</span>, err <span class="hljs-type">error</span>) &#123;<br> <span class="hljs-comment">//打开文件</span><br> file, err := os.Open(path)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//读取文件的内容</span><br> info, _ := file.Stat()<br> buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//x509解码</span><br> publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//类型断言</span><br> publicKey := publicKeyInterface.(*rsa.PublicKey)<br> keySize, srcSize := publicKey.Size(), <span class="hljs-built_in">len</span>(src)<br> log.Println(<span class="hljs-string">&quot;密钥长度&quot;</span>, keySize, <span class="hljs-string">&quot;明文长度&quot;</span>, srcSize)<br> offSet, once := <span class="hljs-number">0</span>, keySize<span class="hljs-number">-11</span><br> buffer := bytes.Buffer&#123;&#125;<br> <span class="hljs-keyword">for</span> offSet &lt; srcSize &#123;<br>  endIndex := offSet + once<br>  <span class="hljs-keyword">if</span> endIndex &gt; srcSize &#123;<br>   endIndex = srcSize<br>  &#125;<br>  <span class="hljs-comment">// 加密一部分</span><br>  bytesOnce, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, src[offSet:endIndex])<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>  &#125;<br>  buffer.Write(bytesOnce)<br>  offSet = endIndex<br> &#125;<br> bytesEncrypt = buffer.Bytes()<br> <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DES加密"><a href="#DES加密" class="headerlink" title="DES加密"></a>DES加密</h1><ul><li>DES(Data Encryption)是1977年美国联邦信息处理标准(FIPS)中所采用的一种对称密码（FIPS46-3）,一直以来被美国及其他国家的政府和银行等广泛使用。随着计算机的进步，DES已经能够被暴力破解,1997年的DES Challenge I 中用了96天破译密钥，1998年的DES Challenge II-1中用了41天，1998年的DES Challenge II-2中用了56小时，1999年的DES Challenge III 中只用了22小时15分钟。</li><li>DES是一种将64比特的明文加密成64比特的密文的对称密码算法，它的密钥的长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每隔7比特会设置一个用于错误检查的比特，因此实质上其密钥长度是56比特。</li><li>DES 是以64比特的明文（比特序列）为一个单位来进行加密的，这个64比特的单位称为分组 ，一般来说，以分组为单位进行处理的密码算法称为分组密码，DES就是分组密码的一种。</li><li>DES每次只能加密64比特的数据，如果要加密的明文比较长，就需要对DES加密进行迭代（反复），而迭代的具体方式就称为模式。</li><li>DES 内部实现理论：在 des 中各个步骤称为轮，整个加密过程进行16轮循环。</li></ul><h2 id="内置库完成"><a href="#内置库完成" class="headerlink" title="内置库完成"></a>内置库完成</h2><p>加密模式采用ECB、填充方式采用pkcs5padding、密码使用”12345678”,输出时经hex编码。自己可以通过一些在线测试工具进行测试，看结果是否一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;crypto/des&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> data := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;12345678&quot;</span>)<br> iv := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;43218765&quot;</span>)<br><br> result, err := DesCBCEncrypt(data, key, iv)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err)<br> &#125;<br> b := hex.EncodeToString(result)<br> fmt.Println(b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DesCBCEncrypt</span><span class="hljs-params">(data, key, iv []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br> block, err := des.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br> &#125;<br><br> data = pkcs5Padding(data, block.BlockSize())<br> cryptText := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(data))<br><br> blockMode := cipher.NewCBCEncrypter(block, iv)<br> blockMode.CryptBlocks(cryptText, data)<br> <span class="hljs-keyword">return</span> cryptText, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkcs5Padding</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> padding := blockSize - <span class="hljs-built_in">len</span>(cipherText)%blockSize<br> padText := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(cipherText, padText...)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;github.com/marspere/goencrypt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> <span class="hljs-comment">// key为12345678</span><br> <span class="hljs-comment">// iv为空</span><br> <span class="hljs-comment">// 采用ECB分组模式</span><br> <span class="hljs-comment">// 采用pkcs5padding填充模式</span><br> <span class="hljs-comment">// 输出结果使用base64进行加密</span><br> cipher := goencrypt.NewDESCipher([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;12345678&quot;</span>), []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>), goencrypt.ECBMode, goencrypt.Pkcs7, goencrypt.PrintBase64)<br> cipherText, err := cipher.DESEncrypt([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello world&quot;</span>))<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err)<br>  <span class="hljs-keyword">return</span><br> &#125;<br> fmt.Println(cipherText)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3DES加密算法"><a href="#3DES加密算法" class="headerlink" title="3DES加密算法"></a>3DES加密算法</h1><p>3DES（或称为Triple DES）是三重数据加密算法（TDEA，Triple Data Encryption Algorithm）块密码的通称。它相当于是对每个数据块应用三次DES加密算法。<br>由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解；3DES即是设计用来提供一种相对简单的方法，即通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。<br>还有一个库 非常NB</p><p>ECB模式下的3DES算法加解密信息，golang默认只提供CBC模式<br>这边有golang的加密库，非常厉害<br><strong>github.com&#x2F;forgoer&#x2F;openssl</strong></p><p>安装：<br><strong>go get github.com&#x2F;thinkoner&#x2F;openssl</strong></p><p>代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;github.com/forgoer/openssl&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br> <span class="hljs-comment">//定义密钥，必须是24byte</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123456789012345678901234&quot;</span>)<br> fmt.Println(<span class="hljs-string">&quot;密钥：&quot;</span>, key, hex.EncodeToString(key))<br><br> <span class="hljs-comment">//定义明文</span><br> src := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;0102030109000000030000000F8898E37A7F8F3D742006111118080000FACE05&quot;</span>)<br><br> <span class="hljs-comment">//3DES-ECB加密</span><br> encodeData, _ := openssl.Des3ECBEncrypt(src, key, openssl.ZEROS_PADDING)<br> encryptBaseData := base64.StdEncoding.EncodeToString(encodeData)<br><br> fmt.Println(<span class="hljs-string">&quot;加密后Base64：&quot;</span>, encryptBaseData)<br> fmt.Println(<span class="hljs-string">&quot;加密后Hex：&quot;</span>, hex.EncodeToString(encodeData))<br><br> <span class="hljs-comment">//3DES-ECB解密</span><br> decodeBaseData, _ := base64.StdEncoding.DecodeString(encryptBaseData)<br> decodeData, _ := openssl.Des3ECBDecrypt(decodeBaseData, key, openssl.ZEROS_PADDING)<br><br> fmt.Println(<span class="hljs-string">&quot;解密后：&quot;</span>, hex.EncodeToString(decodeData))<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="包括-Des的加密解密"><a href="#包括-Des的加密解密" class="headerlink" title="包括 Des的加密解密"></a>包括 Des的加密解密</h2><p>以下只举一个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">srcData := <span class="hljs-string">&quot;L0j+JvbeVM0svSpjIwXdE7yTu78wiEszCmW8rwjXY3vrx2nEaUeJ/Rw/c/IRdlxIH+/ro4pykx6ESOkGU1YwM8ddEuuoTg5uPsqQ9/SuNds=&quot;</span><br>key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Ctpsp@884*&quot;</span>[:<span class="hljs-number">8</span>])<br><span class="hljs-comment">//3DES-ECB解密</span><br>decodeBaseData, _ := base64.StdEncoding.DecodeString(srcData)<br>decodeData, _ := openssl.DesECBDecrypt(decodeBaseData, key, openssl.PKCS5_PADDING)<br>fmt.Println(<span class="hljs-string">&quot;解密后：&quot;</span>, <span class="hljs-type">string</span>(decodeData))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言加解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装NVM与构建vue项目</title>
      <link href="/2022/05/26/%E5%AE%89%E8%A3%85NVM%E4%B8%8E%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/26/%E5%AE%89%E8%A3%85NVM%E4%B8%8E%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h1><h2 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h2><p>去github 上下载 <a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p><p>安装包地址： <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a><br><img src="https://s2.loli.net/2024/08/26/WR9AbqNfsMw7juL.png"><br>直接下载安装即可。</p><p>安装完了 持续下一步<br>进入目录中<br><img src="https://s2.loli.net/2024/08/26/OaKlCvAH39IGu42.png"></p><p>然后修改settings中<br>添加如下内容</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">node_mirror:</span> https://npm.taobao<span class="hljs-meta">.org</span>/mirrors/node/<br><span class="hljs-symbol">npm_mirror:</span> https://npm.taobao<span class="hljs-meta">.org</span>/mirrors/npm/<br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证NVM是否安装成功<br><img src="https://s2.loli.net/2024/08/26/87RNqO9Mmlh61kj.png"><br>以上代表已经安装成功了。<br><img src="https://s2.loli.net/2024/08/26/1qJDrX6IRvxpU7u.png"></p><h2 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h2><p><a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><p>执行如下命令即可。<br><img src="https://s2.loli.net/2024/08/26/FS7CDXsr8LuzQa1.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -<span class="hljs-keyword">o</span>- https://raw.githubusercontent.<span class="hljs-keyword">com</span>/nvm-<span class="hljs-keyword">sh</span>/nvm/v0.<span class="hljs-number">39.3</span>/install.<span class="hljs-keyword">sh</span> | bash<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget -qO- https://raw.githubusercontent.<span class="hljs-keyword">com</span>/nvm-<span class="hljs-keyword">sh</span>/nvm/v0.<span class="hljs-number">39.3</span>/install.<span class="hljs-keyword">sh</span> | bash<br></code></pre></td></tr></table></figure><h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">vim</span> /etc/hosts<br><span class="hljs-number">199.232</span>.<span class="hljs-number">96.133</span> raw.githubusercontent.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><blockquote><p>systemctl restart NetworkManager.service</p></blockquote><p>这样就算安装成功了</p><h3 id="更换淘宝源"><a href="#更换淘宝源" class="headerlink" title="更换淘宝源"></a>更换淘宝源</h3><p>在安装nodejs的时候特别慢，安装了好久都安装不上去，网速实在是太慢了，需要将nvm的默认下载地址改为国内的，我使用了淘宝的镜像,在.bashrc文件中追加如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> ~/.bashrc<br><br># nvm淘宝镜像<br>export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node<br></code></pre></td></tr></table></figure><h1 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org <br></code></pre></td></tr></table></figure><h1 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install v16.13.0<br></code></pre></td></tr></table></figure><h1 id="卸载node"><a href="#卸载node" class="headerlink" title="卸载node"></a>卸载node</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm uninstall v16.13.0<br></code></pre></td></tr></table></figure><h1 id="使用nvm"><a href="#使用nvm" class="headerlink" title="使用nvm"></a>使用nvm</h1><h2 id="使用-16-13-0"><a href="#使用-16-13-0" class="headerlink" title="使用 16.13.0"></a>使用 16.13.0</h2><blockquote><p>nvm use v16.13.0</p></blockquote><p><strong>注意： 如果在windows下 要使用超级管理员 不然会出现错误</strong></p><h2 id="查看安装环境"><a href="#查看安装环境" class="headerlink" title="查看安装环境"></a>查看安装环境</h2><blockquote><p>nvm current<br>nvm list</p></blockquote><h2 id="更换默认环境"><a href="#更换默认环境" class="headerlink" title="更换默认环境"></a>更换默认环境</h2><blockquote><p>nvm alias default v16.13.0</p></blockquote><h1 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h1><h2 id="安装源添加镜像"><a href="#安装源添加镜像" class="headerlink" title="安装源添加镜像"></a>安装源添加镜像</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sS https://<span class="hljs-keyword">dl</span>.yarnpkg.<span class="hljs-keyword">com</span>/debian/pubkey.gpg | sudo apt-key <span class="hljs-built_in">add</span> -<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> | sudo tee /etc/apt/sources.<span class="hljs-keyword">list</span>.d/yarn.<span class="hljs-keyword">list</span><br></code></pre></td></tr></table></figure><h2 id="更新源并且安装"><a href="#更新源并且安装" class="headerlink" title="更新源并且安装"></a>更新源并且安装</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt <span class="hljs-keyword">update</span> &amp;&amp; sudo apt install yarn<br></code></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> yarn<br>sudo apt-<span class="hljs-built_in">get</span> autoremove<br></code></pre></td></tr></table></figure><h2 id="添加淘宝源"><a href="#添加淘宝源" class="headerlink" title="添加淘宝源"></a>添加淘宝源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry http://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure><p>安装完毕 后 输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn -v <br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/bkS6gd1snZyJzfm.png"><br>代表安装成功！！！</p><h2 id="初始化一个yarn项目"><a href="#初始化一个yarn项目" class="headerlink" title="初始化一个yarn项目"></a>初始化一个yarn项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn init<br></code></pre></td></tr></table></figure><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 速度不行可以考虑换源 npm</span><br>npm install -g @vue/cli<br><br>yarn add global @vue-cli<br></code></pre></td></tr></table></figure><h2 id="常规安装"><a href="#常规安装" class="headerlink" title="常规安装"></a>常规安装</h2><blockquote><p>vue create vueproject</p></blockquote><h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><h2 id="安装vite"><a href="#安装vite" class="headerlink" title="安装vite"></a>安装vite</h2><p>中文文档： <a href="https://cn.vitejs.dev/guide/">https://cn.vitejs.dev/guide/</a><br>使用 NPM:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm create vite@latest<br></code></pre></td></tr></table></figure><p>使用 Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yarn create vite<br></code></pre></td></tr></table></figure><p>结果如下<br><img src="https://s2.loli.net/2024/08/26/dxMni1cpNw3TVZE.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>然后使用vscode中的project manager 来对我们的项目进行管理<br><img src="https://s2.loli.net/2024/08/26/LFhB1V8M4XRrgJi.png"><br>然后修改project.json<br><img src="https://s2.loli.net/2024/08/26/2NQdc7WsVG5g8Bb.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kyfly_client&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rootPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\Golang\\github.com\\hybpjx\\kyfly_client&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>执行yarn 命令 安装资源包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/Wr4ibtQ2YoM9eAq.png"></p><p>然后执行yarn dev </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn dev<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/WonxGITwkDpv4ys.png"><br><img src="https://s2.loli.net/2024/08/26/HXT1glJmraRy8LK.png"></p><p>启动成功！！<br><img src="https://s2.loli.net/2024/08/26/Xz291aoQPh3VY7I.png"></p><p>然后置空所有其他无用的东西<br><img src="https://s2.loli.net/2024/08/26/oiWUVlOQxmRkF5D.png"><br>效果如上图</p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andorid模拟器与开发工具的安装与使用</title>
      <link href="/2022/04/05/Andorid%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/05/Andorid%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言——准备"><a href="#前言——准备" class="headerlink" title="前言——准备"></a>前言——准备</h1><p><strong>安装SDK前的准备工作</strong><br>首先为了实现 移动端的自动化控制 还需要一些工具来支持<br>需要设置好<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a></p><h2 id="什么是SDK"><a href="#什么是SDK" class="headerlink" title="什么是SDK"></a>什么是SDK</h2><p>SDK是一系列程序接口，文档，开发工具的集合，是的，集合，sdk即单单不是一个开发工具，也不是一个程序。一个完整的SDK应该包括以下内容：<br>（1）接口文件和库文件<br>（2）帮助文档<br>（3）开发示例<br>（4）实用工具。<br>接口文件和库文件就是API，将底层的代码进行封装保护，提供给用户一个调用底层代码的接口；</p><p>Android SDK 指的是 Android专属的软件开发工具包</p><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><ul><li>配置jdk的环境</li><li>下载地址 <ul><li><a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></li></ul></li><li>有个做ui手工测试的只支持 jdk8 所以 必须安装jdk8</li></ul><p><strong>安装</strong><br>在电脑D盘新建 Java&#x2F;jdk &#x2F;Java&#x2F;jre<br><img src="https://s2.loli.net/2024/09/05/we43bTJvOPijz92.png"><br>选择jre 也是在D盘<br><img src="https://s2.loli.net/2024/09/05/zWpxetFnBvUma2r.png"></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ol><li><strong>D:\Java\jdk\bin 添加至 path中</strong></li><li>系统变量添加 <ol><li>JAVA_HOME : D:\JAVA\JDK</li><li>CLASSPATH : .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</li></ol></li></ol><p>测试是否安装成功<br><img src="https://s2.loli.net/2024/09/05/qfQ9oRjkezc5Lyx.png"></p><h1 id="Android开发工具的安装"><a href="#Android开发工具的安装" class="headerlink" title="Android开发工具的安装"></a>Android开发工具的安装</h1><h2 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h2><p>SDK下载地址<br>SDK下载地址：<br>旧：<a href="http://tools.android-studio.org/index.php/sdk">http://tools.android-studio.org/index.php/sdk</a><br>新：<a href="https://www.androiddevtools.cn/">https://www.androiddevtools.cn/</a></p><p><img src="https://s2.loli.net/2024/09/05/nJG4RSiAgfPWr5H.png"></p><p>下载 24.4.1<br><strong>安装过程</strong></p><ol><li>他会首先检查java环境是否安装<br><img src="https://s2.loli.net/2024/09/05/wiW1GgnlvpNEMZS.png"></li><li>其次选择安装路径<br><img src="https://s2.loli.net/2024/09/05/HvsuW4SpkiRfN9V.png"></li><li>依次选择下一步安装 </li><li>先不用勾选这个start SDK<br><img src="https://s2.loli.net/2024/09/05/gKL7MkpnQPctdyH.png"></li></ol><h2 id="安装好-设置环境变量"><a href="#安装好-设置环境变量" class="headerlink" title="安装好 设置环境变量"></a>安装好 设置环境变量</h2><p>在系统变量中设置<br>ANDROID_HOME : D:&#x2F;SDK</p><p>系统变量下面<br>设置path的变量</p><blockquote><p>;% ANDROID_HOME%\platform-tools;% ANDROID_HOME%\tools</p></blockquote><p>win 10 11 直接path 新建</p><blockquote><p>% ANDROID_HOME%\platform-tools;% ANDROID_HOME%\tools</p></blockquote><p>然后打开 sdk manager 安装所需的工具<br>因为国内环境太慢<br>所以需要 打开 tools&gt; options 设置代理<br><img src="https://s2.loli.net/2024/09/05/ZBSaHoMjAKDkWlc.png"><br>然后关闭</p><p>选择Packages<br><img src="https://s2.loli.net/2024/09/05/NZetmoMK2Ddruf8.png"><br>大连东软信息学院镜像服务器地址:</p><ul><li><a href="http://mirrors.neusoft.edu.cn/">http://mirrors.neusoft.edu.cn</a> 端口：80<br>北京化工大学镜像服务器地址:</li><li>IPv4: <a href="http://ubuntu.buct.edu.cn/">http://ubuntu.buct.edu.cn/</a> 端口：80</li><li>IPv4: <a href="http://ubuntu.buct.cn/">http://ubuntu.buct.cn/</a> 端口：80</li><li>IPv6: <a href="http://ubuntu.buct6.edu.cn/">http://ubuntu.buct6.edu.cn/</a> 端口：80<br>上海GDG镜像服务器地址:</li><li><a href="http://sdk.gdgshanghai.com/">http://sdk.gdgshanghai.com</a> 端口：8000</li></ul><p>选择 安装的包如下<br><img src="https://s2.loli.net/2024/09/05/Ds3P1jlApGx6g7m.png"></p><p><img src="https://s2.loli.net/2024/09/05/pHXaUcotB8d4RxV.png"><br>安装即可</p><h1 id="使用AndroidStudio-来安装"><a href="#使用AndroidStudio-来安装" class="headerlink" title="使用AndroidStudio 来安装"></a>使用AndroidStudio 来安装</h1><p>编译器下载地址： <a href="https://developer.android.google.cn/studio/#downloads">https://developer.android.google.cn/studio/#downloads</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载安装步骤不讲了 就一直下一步下一步 然后选择路径然后再下一步<br>打开软件&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/sdUa9vZp7qkNeXI.png"><br>直接选择 <code>cancel</code><br>next&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/oOPjLg74Kv9ZdsJ.png"><br>next&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/m3dSAFaI4T1oyit.png"><br>next 选择安装好的JDK&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/qNAOvDlIWJX5keR.png"><br>next 选择喜欢的主题 &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/GXYV1QEDbSqeWIz.png"><br>next &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/WKC8c7hPnXOadyQ.png"><br>给模拟器的大小配置 （根据配置来 越大越好） 如果要使用他自带的模拟器的话。next &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/oHLSe6RfwTG3F1D.png"><br>等待安装, finish &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/iVrh8LksDqYGFQe.png"><br>安装成功！！<br><img src="https://s2.loli.net/2024/09/05/jXw49PqBnTxbNd8.png"><br>到了这一步还没算完结&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/K9lZrocvEi51m4e.png"><br>还需要对某些配置进行设置&#x3D;&gt;</p><h2 id="配置configure"><a href="#配置configure" class="headerlink" title="配置configure"></a>配置configure</h2><p><img src="https://s2.loli.net/2024/09/05/ZRam3SgUYCjNrqc.png"><br>选择第一项SDK manager(AVD manager 是对模拟器进行配置，如果不用这个自带的模拟器就不需要配置) &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/YxfdF4wzQpohcgO.png"><br>然后选择sdk tools &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/8OyKfqiD6EcXJ2j.png"><br>选择好安装的工具 &#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/DcES36275qGw9bP.png"><br>next  &#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/UtCcZkNQgzwREx3.png"><br>finish &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/R4LT8NwrplJC2Qa.png"><br>然后就算创建完毕了<br>然后去新建工程即可。</p><h2 id="如何新建工程"><a href="#如何新建工程" class="headerlink" title="如何新建工程"></a>如何新建工程</h2><p><img src="https://s2.loli.net/2024/09/05/pUStAaZXBFwOfsv.png"><br>选择&#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/HjCkpusvDNQrASo.png"><br>下一步 &#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/9Nkh36slFvOpWgn.png"><br><img src="https://s2.loli.net/2024/09/05/muJlQ2AgMFBLvxb.png"><br>这样就代表创建完毕了</p><h1 id="adb简单介绍"><a href="#adb简单介绍" class="headerlink" title="adb简单介绍"></a>adb简单介绍</h1><p>Android 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作，例如安装和调试应用。adb 提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序，包括以下三个组件：</p><p>客户端：用于发送命令。客户端在开发机器上运行。您可以通过发出 adb 命令从命令行终端调用客户端。<br>守护程序 (adbd)：用于在设备上运行命令。守护程序在每个设备上作为后台进程运行。<br>服务器：用于管理客户端与守护程序之间的通信。服务器在开发机器上作为后台进程运行。<br>adb 包含在 Android SDK 平台工具软件包中。您可以使用 SDK 管理器下载此软件包，该管理器会将其安装在 android_sdk&#x2F;platform-tools&#x2F; 下。如果您需要独立的 Android SDK 平台工具软件包，请点击此处进行下载。<br>如需了解如何通过 adb 连接设备以供使用，包括如何使用 Connection Assistant 来排查常见问题，请参阅在硬件设备上运行应用。<br>adb 是有个通用命令行工具 他允许您与模拟器实例或者链接的Android设备进行通信，他可为各种设备操作提供便利，比如安装和调试应用</p><p>adb在 D:\SDK\platform-tools 目录下<br><img src="https://s2.loli.net/2024/09/05/bpmWvzLD1QGKyUd.png"></p><p>启动adb 服务<br>在命令行中输入<br><code>adb start-server</code><br>会启动tcp端口 5037</p><p>连续敲击n下 手机的版本号选项进入开发者模式<br><img src="https://s2.loli.net/2024/09/05/6ZVAIf4LSnO1jbU.png"><br>打开开发者选项 打开 <code>usb调试</code></p><h1 id="各种模拟器上连接adb"><a href="#各种模拟器上连接adb" class="headerlink" title="各种模拟器上连接adb"></a>各种模拟器上连接adb</h1><h2 id="夜神模拟器连接adb"><a href="#夜神模拟器连接adb" class="headerlink" title="夜神模拟器连接adb"></a>夜神模拟器连接adb</h2><p><strong>注： adb 电脑安装的版本和手机版本不兼容</strong></p><ul><li>打开夜神模拟器的bin目录<br>将<img src="https://s2.loli.net/2024/09/05/iYAo21lTa3B8ReQ.png"></li><li>这三个目录备份起来</li><li>再将 platfrom-tools中的这三个文件拷贝进来</li><li>需要把夜神模拟器里的nox_adb.exe给替换掉<br>将夜神模拟器安装路径的bin目录下的之前的nox_adb.exe备份 或者删除<br>将platform-tools目录下的adb.exe复制过去，并改名称为nox_adb.exe</li><li>之后重新运行我们的安卓模拟器</li><li>然后在命令行输入 adb device</li></ul><p><img src="https://s2.loli.net/2024/09/05/9o453wqkrUK1NAC.png"><br>就能看见链接了一台设备了</p><h2 id="MuMu模拟器上连接adb"><a href="#MuMu模拟器上连接adb" class="headerlink" title="MuMu模拟器上连接adb"></a>MuMu模拟器上连接adb</h2><p>官方文档： <a href="https://mumu.163.com/help/20220721/35047_730476.html">https://mumu.163.com/help/20220721/35047_730476.html</a><br>第一步，打开MuMu模拟器安装路径下的bin文件夹（具体路径为~\emulator\nemu\vmonitor\bin），然后点击文件夹路径，输入CMD，再点击回车按键呼出CMD运行窗口（如下图）；<br><img src="https://s2.loli.net/2024/09/05/C6BDtLVWrzIPUx8.png"></p><p>打开cmd终端后<br>第二步，输入以下代码（具体可参考下图）：<br>友情提示：  要打开MuMu模拟器 再操作如下代码<br>最好也把root打开（反正迟早要打开）<br><img src="https://s2.loli.net/2024/09/05/8zERnP6HSx4csLd.png"><br><img src="https://s2.loli.net/2024/09/05/51xCeW9z7aibcNL.png"></p><blockquote><p>代码如下<br>adb_server.exe connect 127.0.0.1:7555<br>adb_server shell<br><img src="https://s2.loli.net/2024/09/05/Xexl8tTBgbYj2A5.png"></p></blockquote><h1 id="adb工具的使用"><a href="#adb工具的使用" class="headerlink" title="adb工具的使用"></a>adb工具的使用</h1><h2 id="adb-连接-手机"><a href="#adb-连接-手机" class="headerlink" title="adb 连接 手机"></a>adb 连接 手机</h2><p>进入 手机底层操作系统<br>win+r<br><img src="https://s2.loli.net/2024/09/05/x6rysLk2mAzCK1n.png"><br><code>adb -s + 手机名 shell</code></p><p>同理 也可以直接进入 手机模拟器<br><img src="https://s2.loli.net/2024/09/05/dW1EyPwcb7Nk4fL.png"></p><h2 id="通过adb-命令行安装"><a href="#通过adb-命令行安装" class="headerlink" title="通过adb 命令行安装"></a>通过adb 命令行安装</h2><p><code>adb -s 手机名 install xxx.apk(直接拖拽即可)</code></p><p>例：安装手机京东 如下图所示<br><img src="https://s2.loli.net/2024/09/05/ezEI6vAoPqig8lp.png"><br>这样代表就是安装成功<br><img src="https://s2.loli.net/2024/09/05/WcunXVb1IkNJTOs.png"></p><h2 id="通过adb命令卸载"><a href="#通过adb命令卸载" class="headerlink" title="通过adb命令卸载"></a>通过adb命令卸载</h2><blockquote><p>我们安装时使用的<strong>文件名</strong>去安装<br>但是卸载需要使用<strong>包名</strong>去卸载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb -s xxx shell<br><br><span class="hljs-comment"># cd /data/app</span><br><span class="hljs-comment"># ls </span><br><span class="hljs-comment"># exit</span><br><br>$ adb -s 127.0.0.1:62001 uninstall com.jingdong.app.mall<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/09/05/G1nWkZS4AjlPTCz.png"><br><img src="https://s2.loli.net/2024/09/05/2aKSAP7cEdhiZ9x.png"><br>提示success 即代表卸载成功</p><p><strong>注：如果 adb device 没有设备</strong></p><p>可以 尝试命令<br><code>adb connect 127.0.0.1:62001</code></p><p>即可发现设备</p><h2 id="其他-adb的功能"><a href="#其他-adb的功能" class="headerlink" title="其他 adb的功能"></a>其他 adb的功能</h2><p><strong>通过命令 查看系统安装包名</strong></p><p><code>adb shell pm list package</code></p><p><strong>传递 数据 将电脑的文件传到夜神模拟器中</strong><br>adb push [文件路径] [存储路径]</p><p><code>adb push C:\abc.text /sdcard</code><br><img src="https://s2.loli.net/2024/09/05/2aKSAP7cEdhiZ9x.png"><br>这样代表上传成功</p><p><strong>传递 数据 将夜神模拟器的文件传到电脑中</strong><br>adb pull [文件路径] [存储路径]</p><p><code>adb pull /init C:\Users\13689\Desktop</code></p><p><img src="https://s2.loli.net/2024/09/05/AwE1FNjBxJQkZnd.png"></p><p>注意： 不能直接pull到根目录</p><p><strong>adb 远程截图</strong><br><code>adb shell screencap /sdcard/test.png</code></p><p>故 adb 可以通过 远程对我们手机进行一系列的操作</p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上安装golang</title>
      <link href="/2022/03/26/%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85golang/"/>
      <url>/2022/03/26/%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85golang/</url>
      
        <content type="html"><![CDATA[<!--toc--><hr><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://golang.google.cn/dl/go1.19.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/gDPJvAlITqQGHC5.png"></p><h2 id="解压到文件夹下"><a href="#解压到文件夹下" class="headerlink" title="解压到文件夹下"></a>解压到文件夹下</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">sudo tar -xvzf go1<span class="hljs-number">.19</span>.linux-amd64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/gDPJvAlITqQGHC5.png"></p><h2 id="编译配置环境变量"><a href="#编译配置环境变量" class="headerlink" title="编译配置环境变量"></a>编译配置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOPATH=/home/zic/gopath<br><br><span class="hljs-built_in">export</span> GOROOT=/usr/local/go<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/vWKNQ3pZYO9ol6y.png"></p><p>配置完毕之后<br>然后使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>然后再终端中输入</p><blockquote><p>go version </p></blockquote><p><img src="https://s2.loli.net/2024/08/26/hcosbpRv5nIQe2F.png"></p><h2 id="运行hello-world"><a href="#运行hello-world" class="headerlink" title="运行hello,world"></a>运行hello,world</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go run main.go<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/yhQINsl1dxrk2VF.png"></p><h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><h2 id="通过apt-get安装"><a href="#通过apt-get安装" class="headerlink" title="通过apt-get安装"></a>通过apt-get安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install golang<br></code></pre></td></tr></table></figure><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOPATH=/home/zic/gopath<br><br><span class="hljs-built_in">export</span> GOROOT=/usr/local/go<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br></code></pre></td></tr></table></figure><p>其他步骤一模一样 只不过这个版本不可选而已</p>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装anconda3 与Miniconda</title>
      <link href="/2022/03/15/ubuntu%E5%AE%89%E8%A3%85anconda3/"/>
      <url>/2022/03/15/ubuntu%E5%AE%89%E8%A3%85anconda3/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu-安装anaconda3"><a href="#ubuntu-安装anaconda3" class="headerlink" title="ubuntu 安装anaconda3"></a>ubuntu 安装anaconda3</h1><p>官网:<a href="https://www.anaconda.com/">https://www.anaconda.com/</a><br>下载:<a href="https://www.anaconda.com/products/individual#Downloads">https://www.anaconda.com/products/individual#Downloads</a><br>MiniAndonda:  <a href="https://docs.anaconda.com/miniconda/">https://docs.anaconda.com/miniconda/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>输入以下命令执行所下载的安装程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh<br><br>bash Anaconda3-2021.11-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>Miniconda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br><br>bash Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>为了下载库的时候速度更快，更换conda下载源为清华大学镜像</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">conda config --add channels https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure><p>在 &#x2F;home&#x2F;xxx里面添加Anaconda-python路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim ~/.bashrc<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/home/xxx/anaconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span>  <span class="hljs-comment">## 在zshrc添加路径，然后保存退出</span><br><br>$ <span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>然后在ubuntu 输入命令</p><blockquote><p>conda –version</p></blockquote><p><strong>建立虚拟环境</strong></p><blockquote><p>conda create -n test python&#x3D;3.9</p></blockquote><p><strong>激活 虚拟环境</strong></p><blockquote><p>conda activate test</p></blockquote><p><strong>在虚拟环境安装软件</strong></p><blockquote><p>conda install spyder</p></blockquote><p><strong>关闭虚拟环境</strong></p><blockquote><p>deactivate</p></blockquote><p><strong>移除环境</strong></p><blockquote><p>conda remove –name test –all</p></blockquote><p><strong>删除已经设定好默认镜像源，恢复原来的源</strong></p><blockquote><p>conda config –remove-key channels</p></blockquote><p><strong>列出当前所有的环境</strong></p><blockquote><p>conda env list</p></blockquote><p><strong>重置Base环境</strong></p><blockquote><p>conda install –revision 0</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 快速安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
