<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>始識’s 博客</title>
  
  
  <link href="https://hybpjx.cn/atom.xml" rel="self"/>
  
  <link href="https://hybpjx.cn/"/>
  <updated>2025-10-10T10:22:30.340Z</updated>
  <id>https://hybpjx.cn/</id>
  
  <author>
    <name>hybpjx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unidbg打DirectoryFileIO补丁</title>
    <link href="https://hybpjx.cn/2025/10/10/Unidbg%E6%89%93DirectoryFileIO%E8%A1%A5%E4%B8%81/"/>
    <id>https://hybpjx.cn/2025/10/10/Unidbg%E6%89%93DirectoryFileIO%E8%A1%A5%E4%B8%81/</id>
    <published>2025-10-10T10:18:01.000Z</published>
    <updated>2025-10-10T10:22:30.340Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哦~这个密码无效。请检查后再试一次。" data-whm="哎呀，这些解密的内容可能已被更改，但你仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="3e6afd1fc2ff0770dffd5d179130404c0e41531a61c2586a6206da8cb6bdfaa9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章已被作者加密，请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有一些加密内容，需要密码才能继续阅读。</summary>
    
    
    
    <category term="杂记" scheme="https://hybpjx.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="Android" scheme="https://hybpjx.cn/tags/Android/"/>
    
    <category term="Unidbg" scheme="https://hybpjx.cn/tags/Unidbg/"/>
    
  </entry>
  
  <entry>
    <title>python-UV包管理工具安装</title>
    <link href="https://hybpjx.cn/2025/10/09/python-UV%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
    <id>https://hybpjx.cn/2025/10/09/python-UV%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</id>
    <published>2025-10-09T07:11:54.000Z</published>
    <updated>2025-10-10T10:17:05.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安裝-uv"><a href="#安裝-uv" class="headerlink" title="安裝 uv"></a>安裝 uv</h1><p>uv 本身並不需要 Python，所以不建議用 pip 或是 pipx 安裝，這樣都會跟特定的 Python 環境綁在一起，Windows 上就直接透過 PowerSehll 安裝即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">powershell -ExecutionPolicy ByPass -c <span class="hljs-string">&quot;irm https://astral.sh/uv/install.ps1 | </span><br></code></pre></td></tr></table></figure><h1 id="scoop-安裝："><a href="#scoop-安裝：" class="headerlink" title="scoop 安裝："></a>scoop 安裝：</h1><blockquote><p>scoop install uv<br>本文都以 Windows 平台在 PowerShell 下操作示範</p></blockquote><h1 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">set</span> Path=D:\MyConfiguration\zichen2.liang\.local\<span class="hljs-built_in">bin</span>;%Path%   (cmd)<br>$env:Path = <span class="hljs-string">&quot;D:\MyConfiguration\zichen2.liang\.local\bin;$env:Path&quot;</span>   (powershell)<br></code></pre></td></tr></table></figure><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有安装及可安装的版本</span><br>uv python list <br><br><span class="hljs-comment"># 最新版安装</span><br>uv python install<br><br><span class="hljs-comment"># 指定版本安装</span><br>uv python install 3.10<br><br><span class="hljs-comment"># 安装多个版本</span><br>uv python install 3.10 3.11<br><br><span class="hljs-comment"># 显示安装的路径</span><br>uv python <span class="hljs-built_in">dir</span><br><br><span class="hljs-comment"># 卸载安装</span><br>uv python uninstall 3.10<br><br><span class="hljs-comment"># 卸载多个版本</span><br>uv python uninstall 3.10 3.11<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安裝-uv&quot;&gt;&lt;a href=&quot;#安裝-uv&quot; class=&quot;headerlink&quot; title=&quot;安裝 uv&quot;&gt;&lt;/a&gt;安裝 uv&lt;/h1&gt;&lt;p&gt;uv 本身並不需要 Python，所以不建議用 pip 或是 pipx 安裝，這樣都會跟特定的 Python 環境綁</summary>
      
    
    
    
    <category term="快速安装" scheme="https://hybpjx.cn/categories/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Python" scheme="https://hybpjx.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JSVMP插桩快捷指令</title>
    <link href="https://hybpjx.cn/2025/09/30/JSVMP%E6%8F%92%E6%A1%A9%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"/>
    <id>https://hybpjx.cn/2025/09/30/JSVMP%E6%8F%92%E6%A1%A9%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/</id>
    <published>2025-09-30T14:19:19.000Z</published>
    <updated>2025-10-09T07:12:25.062Z</updated>
    
    <content type="html"><![CDATA[<p>要对JSVMP进行插桩。<br>以下是总结的一些快速复制</p><h1 id="对象序列化（判断window）"><a href="#对象序列化（判断window）" class="headerlink" title="对象序列化（判断window）"></a>对象序列化（判断window）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">jj,<br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(jc,<br><span class="hljs-keyword">function</span>(<span class="hljs-params">k, v</span>) &#123;<br>    <span class="hljs-keyword">if</span> (v === <span class="hljs-variable language_">window</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;window&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> v<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="对象序列化（判断长度以及window）"><a href="#对象序列化（判断长度以及window）" class="headerlink" title="对象序列化（判断长度以及window）"></a>对象序列化（判断长度以及window）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(jc, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> value === <span class="hljs-variable language_">window</span> ? <span class="hljs-string">&#x27;window&#x27;</span>: (value &amp;&amp; <span class="hljs-keyword">typeof</span> value.<span class="hljs-property">length</span> === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">100</span> ? <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>.value &gt; 1000`</span>: value))<br></code></pre></td></tr></table></figure><h1 id="hook-时间保持一致"><a href="#hook-时间保持一致" class="headerlink" title="hook 时间保持一致"></a>hook 时间保持一致</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getTime</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1759243630429</span><br>&#125;;<br><span class="hljs-title class_">Math</span>.<span class="hljs-property">random</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0.466434605063042</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要对JSVMP进行插桩。&lt;br&gt;以下是总结的一些快速复制&lt;/p&gt;
&lt;h1 id=&quot;对象序列化（判断window）&quot;&gt;&lt;a href=&quot;#对象序列化（判断window）&quot; class=&quot;headerlink&quot; title=&quot;对象序列化（判断window）&quot;&gt;&lt;/a&gt;对象序列化</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://hybpjx.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>frida常用大全</title>
    <link href="https://hybpjx.cn/2025/09/28/frida%E5%B8%B8%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
    <id>https://hybpjx.cn/2025/09/28/frida%E5%B8%B8%E7%94%A8%E5%A4%A7%E5%85%A8/</id>
    <published>2025-09-28T10:14:21.000Z</published>
    <updated>2025-09-28T10:25:19.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hook-检测函数"><a href="#hook-检测函数" class="headerlink" title="hook 检测函数"></a>hook 检测函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlopen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>),<br>        &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                <span class="hljs-keyword">var</span> pathptr = args[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">if</span> (pathptr !== <span class="hljs-literal">undefined</span> &amp;&amp; pathptr != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">var</span> path = <span class="hljs-title function_">ptr</span>(pathptr).<span class="hljs-title function_">readCString</span>();<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;load &quot;</span> + path);<br>                &#125;<br>            &#125;<br>        &#125;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>查看所有android_dlopen_ext打开的动态库</p></blockquote><h1 id="修改寄存器"><a href="#修改寄存器" class="headerlink" title="修改寄存器"></a>修改寄存器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib.so&quot;</span>);<br><span class="hljs-keyword">var</span> funcAddr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x121974</span>) <br><br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(funcAddr,&#123;<br>    <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onEnter arg[]: &#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x0</span>)  <span class="hljs-comment">// 32位是r寄存器 this.context.r0</span><br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onEnter arg[]: &#x27;</span>,<span class="hljs-title function_">hexdump</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x0</span>)) <span class="hljs-comment">// 内存才可以 hexdump</span><br><br>        <span class="hljs-comment">// console.log(&#x27;onEnter arg[]: &#x27;,args[0])</span><br>        <span class="hljs-comment">// this.arg0 = args[0]</span><br>    &#125;,<br>    <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onLeave arg[]: &#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onLeave result: &#x27;</span>,retval)<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Hook-webview-页面"><a href="#Hook-webview-页面" class="headerlink" title="Hook webview 页面"></a>Hook webview 页面</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//frida -U &quot;&lt;ProcessName&gt;&quot; -l Android_WebView_inspector.js</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Android_WebView_inspector</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-comment">//实例化一个对象</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>);<br>    <span class="hljs-comment">//重写WebView类的重载方法，因为setWebContentsDebuggingEnabled不是静态方法，所以需要一个对象来调用这个方法</span><br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView.$init is called!1&quot;</span>);<br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.$init(a);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView.$init is called!2&quot;</span>);<br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.$init(a, b);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView.$init is called!3&quot;</span>);<br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.$init(a, b, c);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>    <span class="hljs-comment">//始终设置为true,打开调试</span><br>    <span class="hljs-title class_">WebView</span>.<span class="hljs-property">setWebContentsDebuggingEnabled</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setWebContentsDebuggingEnabled is called!&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// replace_str_maps();</span><br><br><br><span class="hljs-comment">// setTimeout(Android_WebView_inspector, 3000);</span><br><br><span class="hljs-comment">// console.log(&quot;脚本加载成功&quot;);</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;脚本加载成功&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>);<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;java.util.Map&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d, e);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;android.util.AttributeSet&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;java.util.Map&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b, c, d, e, f);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br><br><br><span class="hljs-comment">// setTimeout(main, 2000);</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-comment">// Hook WebView 的 loadUrl 方法 (经测试全部用的是这个)</span><br>        <span class="hljs-comment">// var WebView = Java.use(&#x27;android.webkit.WebView&#x27;);</span><br>        <span class="hljs-comment">// WebView.loadUrl.overload(&#x27;java.lang.String&#x27;).implementation = function(url) &#123;</span><br>        <span class="hljs-comment">//     console.log(&quot;WebView loading URL: &quot; + url);</span><br>        <span class="hljs-comment">//     // 打印栈追踪 (调用链)</span><br>        <span class="hljs-comment">//     var stackTrace = Java.use(&#x27;android.util.Log&#x27;).getStackTraceString(Java.use(&#x27;java.lang.Exception&#x27;).$new());</span><br>        <span class="hljs-comment">//     console.log(&quot;调用链: &quot; + stackTrace);</span><br>        <span class="hljs-comment">//     // 继续执行原来的 loadUrl 方法</span><br>        <span class="hljs-comment">//     return this.loadUrl(url);</span><br>        <span class="hljs-comment">// &#125;;</span><br><br>        <span class="hljs-comment">// Hook WebView 的 loadUrl 方法 (经测试全部用的是这个)</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>);<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">setWebContentsDebuggingEnabled</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;boolean&quot;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;强制开启webview调试&quot;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setWebContentsDebuggingEnabled</span>(<span class="hljs-literal">true</span>)<br>        &#125;<br>        <span class="hljs-title class_">WebView</span>.<span class="hljs-property">loadUrl</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView loading URL: &quot;</span> + url);<br>            <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;javascript:&quot;</span>) &amp;&amp; url.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;window.requestConfig&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 提取Base64字符串</span><br>                <span class="hljs-keyword">var</span> base64EncodedString = url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/&quot;([^&quot;]+)&quot;/</span>)[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 匹配出Base64字符串</span><br>                <span class="hljs-comment">// 解码Base64</span><br>                <span class="hljs-keyword">var</span> decodedBase64 = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.util.Base64&#x27;</span>).<span class="hljs-title function_">decode</span>(base64EncodedString, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">var</span> decodedString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(decodedBase64, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-comment">// 使用Java的replace方法进行转义字符替换</span><br>                decodedString = decodedString.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;\\u0026&quot;</span>), <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;&amp;&quot;</span>));<br>                decodedString = decodedString.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;\\u003d&quot;</span>), <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;=&quot;</span>));<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解码 Base64: &quot;</span> + decodedString)<br>            &#125;<br>            <span class="hljs-comment">// 打印栈追踪 (调用链)</span><br>            <span class="hljs-keyword">var</span> stackTrace = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.util.Log&#x27;</span>).<span class="hljs-title function_">getStackTraceString</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.Exception&#x27;</span>).$new());<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用链: &quot;</span> + stackTrace);<br>            <span class="hljs-comment">// 继续执行原来的 loadUrl 方法</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadUrl</span>(url);<br>        &#125;;<br><br>        <span class="hljs-comment">// 解码Unicode字符串的函数</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">decodeUnicode</span>(<span class="hljs-params">str</span>) &#123;<br>            <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\u[\dA-Fa-f]&#123;4&#125;/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">match</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-built_in">parseInt</span>(match.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\\u&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-number">16</span>));<br>            &#125;);<br>        &#125;<br><br><br>        <span class="hljs-comment">// Hook WebViewClient 的 onPageFinished 方法</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebViewClient</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebViewClient&#x27;</span>);<br>        <span class="hljs-title class_">WebViewClient</span>.<span class="hljs-property">onPageFinished</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">view, url</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebView finished loading URL: &quot;</span> + url);<br>            <span class="hljs-comment">// 可以在这里处理更多逻辑，如获取网页内容</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onPageFinished</span>(view, url);<br>        &#125;;<br><br>        <span class="hljs-comment">// Hook WebView 的 WebResourceRequest</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebResourceRequest</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebResourceRequest&#x27;</span>);<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">WebViewClient2</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.webkit.WebViewClient&#x27;</span>);<br><br>        <span class="hljs-title class_">WebViewClient2</span>.<span class="hljs-property">shouldInterceptRequest</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.webkit.WebView&#x27;</span>, <span class="hljs-string">&#x27;android.webkit.WebResourceRequest&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">view, request</span>) &#123;<br>            <span class="hljs-keyword">var</span> requestUrl = request.<span class="hljs-title function_">getUrl</span>().<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Intercepting WebResourceRequest: &quot;</span> + requestUrl);<br><br>            <span class="hljs-comment">// 在这里可以执行任何自定义逻辑，如修改请求</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">shouldInterceptRequest</span>(view, request);<br>        &#125;;<br>    &#125;);<br>&#125;<br><br><br><span class="hljs-comment">// setTimeout(main2, 3000);</span><br></code></pre></td></tr></table></figure><h1 id="hook-So层的-newStringUTF8"><a href="#hook-So层的-newStringUTF8" class="headerlink" title="hook So层的 newStringUTF8"></a>hook So层的 newStringUTF8</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_NewStringUTF</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> artModule = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libart.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> symbols = artModule.<span class="hljs-title function_">enumerateSymbols</span>();<br>    <span class="hljs-keyword">var</span> newStringUTF = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; symbols.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> symbol = symbols[i];<br>        <span class="hljs-keyword">if</span> (symbol.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;NewStringUTF&quot;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(symbol.<span class="hljs-property">name</span>);<br>            newStringUTF = symbol.<span class="hljs-property">address</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newStringUTF) &#123;<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(newStringUTF, &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                <span class="hljs-keyword">let</span> string = args[<span class="hljs-number">1</span>].<span class="hljs-title function_">readCString</span>()<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[字符串]:&quot;</span>, string);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[调用栈]:&quot;</span>,<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">backtrace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-title class_">Backtracer</span>.<span class="hljs-property">FUZZY</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">DebugSymbol</span>.<span class="hljs-property">fromAddress</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>            &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            &#125;<br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有这个函数&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="hook具体函数地址"><a href="#hook具体函数地址" class="headerlink" title="hook具体函数地址"></a>hook具体函数地址</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlsym</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 获取dlsym函数的地址</span><br>    <span class="hljs-keyword">let</span> dlsymAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libdl.so&quot;</span>,<span class="hljs-string">&quot;dlsym&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dlsymAddr);<br>    <span class="hljs-comment">// hook dlsym</span><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlsymAddr,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">args1</span> = args[<span class="hljs-number">1</span>];<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;<br>            <span class="hljs-keyword">let</span> md= <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByAddress</span>(retval);<br>            <span class="hljs-keyword">if</span>(md==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数：&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">args1</span>.<span class="hljs-title function_">readCString</span>(),<span class="hljs-string">&quot;模块：&quot;</span>+md.<span class="hljs-property">name</span>,<span class="hljs-string">&quot;地址：&quot;</span>+retval,<span class="hljs-string">&quot;偏移：&quot;</span>+retval.<span class="hljs-title function_">sub</span>(md.<span class="hljs-property">base</span>));<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="HashMap或转Json"><a href="#HashMap或转Json" class="headerlink" title="HashMap或转Json"></a>HashMap或转Json</h1><p>方法一：直接打印：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">HashMap</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.util.HashMap&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;map：&quot;</span> + <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(map, <span class="hljs-title class_">HashMap</span>).<span class="hljs-title function_">toString</span>());<br> <br><span class="hljs-comment">// 输出展示：map -&gt; &#123;onlyCanExchange=0, pageSize=5, pageNum=1&#125;</span><br></code></pre></td></tr></table></figure><p>方法二：借助Gson转Json打印（推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Gson</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;com.google.gson.Gson&#x27;</span>).$new();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;map -&gt; &quot;</span> + <span class="hljs-title class_">Gson</span>.<span class="hljs-title function_">toJsonTree</span>(map).<span class="hljs-title function_">getAsJsonObject</span>());<br> <br><span class="hljs-comment">// 输出展示：map -&gt; &#123;&quot;onlyCanExchange&quot;:0,&quot;pageSize&quot;:&quot;5&quot;,&quot;pageNum&quot;:&quot;1&quot;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hook-检测函数&quot;&gt;&lt;a href=&quot;#hook-检测函数&quot; class=&quot;headerlink&quot; title=&quot;hook 检测函数&quot;&gt;&lt;/a&gt;hook 检测函数&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="安卓基础" scheme="https://hybpjx.cn/categories/%E5%AE%89%E5%8D%93%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac安装Mongodb</title>
    <link href="https://hybpjx.cn/2025/09/19/Mac%E5%AE%89%E8%A3%85Mongodb/"/>
    <id>https://hybpjx.cn/2025/09/19/Mac%E5%AE%89%E8%A3%85Mongodb/</id>
    <published>2025-09-19T08:24:55.000Z</published>
    <updated>2025-10-09T07:12:30.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homebrew-安装"><a href="#Homebrew-安装" class="headerlink" title="Homebrew 安装"></a>Homebrew 安装</h1><ol><li>更新 brew</li></ol><blockquote><p>brew update</p></blockquote><ol start="2"><li>添加 MongoDB 官方 tap</li></ol><blockquote><p>brew tap mongodb&#x2F;brew</p></blockquote><ol start="3"><li>安装最新稳定版</li></ol><blockquote><p>brew install <a href="mailto:&#109;&#x6f;&#110;&#x67;&#111;&#100;&#x62;&#x2d;&#99;&#x6f;&#109;&#x6d;&#x75;&#x6e;&#x69;&#x74;&#121;&#64;&#x37;&#46;&#48;">mongodb-community@7.0</a><br>（这里我写的是 7.0，如果你需要特定版本可以改，比如 6.0。）</p></blockquote><ol start="4"><li>启动 MongoDB 服务</li></ol><blockquote><p>brew services start <a href="mailto:&#109;&#x6f;&#110;&#103;&#111;&#100;&#98;&#45;&#x63;&#x6f;&#109;&#109;&#x75;&#x6e;&#x69;&#116;&#121;&#x40;&#x37;&#x2e;&#48;">mongodb-community@7.0</a><br>brew services start mongodb&#x2F;brew&#x2F;<a href="mailto:&#109;&#x6f;&#110;&#x67;&#111;&#x64;&#98;&#x2d;&#99;&#x6f;&#x6d;&#109;&#x75;&#110;&#x69;&#116;&#x79;&#64;&#55;&#x2e;&#48;">mongodb-community@7.0</a></p></blockquote><ol start="5"><li>确认 MongoDB 是否启动成功</li></ol><blockquote><p>ps aux | grep -v grep | grep mongod</p></blockquote><ol start="6"><li>连接 MongoDB</li></ol><blockquote><p>mongosh</p></blockquote><p>默认会连到本地 mongodb:&#x2F;&#x2F;localhost:27017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Homebrew-安装&quot;&gt;&lt;a href=&quot;#Homebrew-安装&quot; class=&quot;headerlink&quot; title=&quot;Homebrew 安装&quot;&gt;&lt;/a&gt;Homebrew 安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;更新 brew&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquo</summary>
      
    
    
    
    <category term="快速安装" scheme="https://hybpjx.cn/categories/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="MongoDB" scheme="https://hybpjx.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Wails+svelte开发入门</title>
    <link href="https://hybpjx.cn/2025/09/07/Wails-svelte%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
    <id>https://hybpjx.cn/2025/09/07/Wails-svelte%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</id>
    <published>2025-09-07T09:30:25.000Z</published>
    <updated>2025-10-09T07:46:48.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>go install github.com&#x2F;wailsapp&#x2F;wails&#x2F;v2&#x2F;cmd&#x2F;wails@latest</p></blockquote><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><blockquote><p>wails init -n “my-svelte-app” -t “svelte”</p></blockquote><ul><li><p><code>-n</code>：指定项目名称，这里是<code>my-svelte-app</code>。</p></li><li><p><code>-t</code>：指定前端模板，这里我们使用 <code>svelte</code>。</p></li></ul><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>项目创建完成后，进入项目目录并运行：</p><p>Bash</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> my-svelte-<span class="hljs-keyword">app</span><br>wails dev<br></code></pre></td></tr></table></figure><h1 id="Svelte-核心概念"><a href="#Svelte-核心概念" class="headerlink" title="Svelte 核心概念"></a>Svelte 核心概念</h1><p>您好！很高兴能带您快速入门并精通 Svelte。这是一个非常棒的选择，因为它以其简洁和高效而闻名。</p><p>Svelte 的核心理念与您可能听说过的其他框架（如 React 或 Vue）截然不同。与其在浏览器运行时执行大量工作，Svelte 更像一个<strong>编译器</strong>。它在您构建项目时，将您的代码转换成体积小、运行速度快的原生 JavaScript。这意味着最终用户在访问您的应用时，无需加载庞大的框架代码，从而带来<strong>极佳的性能</strong>。</p><h2 id="Svelte-快速入门指南"><a href="#Svelte-快速入门指南" class="headerlink" title="Svelte 快速入门指南"></a>Svelte 快速入门指南</h2><p>要使用 Svelte 快速上手 Wails 项目，您可以按照以下步骤操作：</p><h3 id="1-创建-Wails-Svelte-项目"><a href="#1-创建-Wails-Svelte-项目" class="headerlink" title="1. 创建 Wails + Svelte 项目"></a>1. 创建 Wails + Svelte 项目</h3><p>在终端中，运行以下命令来创建一个新的项目：</p><p>Bash</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">wails init -<span class="hljs-built_in">n</span> <span class="hljs-string">&quot;my-svelte-app&quot;</span> -<span class="hljs-built_in">t</span> <span class="hljs-string">&quot;svelte&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>-n</code>：指定项目名称，这里是 <code>my-svelte-app</code>。</li><li><code>-t</code>：指定前端模板，这里我们使用 <code>svelte</code>。</li></ul><h3 id="2-运行项目"><a href="#2-运行项目" class="headerlink" title="2. 运行项目"></a>2. 运行项目</h3><p>项目创建完成后，进入项目目录并运行：</p><p>Bash</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> my-svelte-<span class="hljs-keyword">app</span><br>wails dev<br></code></pre></td></tr></table></figure><p><code>wails dev</code> 命令将启动 Wails 开发模式，同时运行您的 Go 后端和 Svelte 前端。Svelte 的 Vite 开发服务器会自动为您处理热重载。</p><hr><h2 id="Svelte-核心概念-1"><a href="#Svelte-核心概念-1" class="headerlink" title="Svelte 核心概念"></a>Svelte 核心概念</h2><p>要快速精通 Svelte，您只需掌握几个核心概念。它避免了许多其他框架中常见的样板代码。</p><h3 id="1-组件-Components"><a href="#1-组件-Components" class="headerlink" title="1. 组件 (Components)"></a>1. 组件 (Components)</h3><p>在 Svelte 中，每个 <code>.svelte</code> 文件都是一个组件。一个组件通常包含三部分：</p><ul><li><strong><code>&lt;script&gt;</code> 标签</strong>：用于存放组件的 JavaScript 逻辑。</li><li><strong>HTML 标签</strong>：用于定义组件的模板结构。</li><li><strong><code>&lt;style&gt;</code> 标签</strong>：用于编写组件的 CSS 样式。值得注意的是，<strong>样式默认是作用域化的</strong>，这意味着它们只会影响当前组件，而不会污染全局样式。</li></ul><h3 id="2-响应式-Reactivity"><a href="#2-响应式-Reactivity" class="headerlink" title="2. 响应式 (Reactivity)"></a>2. 响应式 (Reactivity)</h3><p>Svelte 的响应式非常简单。当您想让一个变量成为响应式状态时，只需正常声明它即可。当您改变这个变量时，所有使用它的地方都会自动更新。</p><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;script&gt;<br>let count = 0; // 声明一个响应式变量<br>function increment() &#123;<br>    count++; // 直接修改变量，UI 会自动更新<br>&#125;<br>&lt;/script&gt;<br><br>&lt;button on:click=&#123;increment&#125;&gt;点击了 &#123;count&#125; 次&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="3-响应式声明"><a href="#3-响应式声明" class="headerlink" title="3. 响应式声明 ($:)"></a>3. 响应式声明 (<code>$:</code>)</h3><p>如果您需要从一个或多个响应式变量中派生新值，可以使用 Svelte 独有的 <code>$:</code> 语法。</p><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;script&gt;<br>let count = 0;<br>// total 是一个派生值，当 count 改变时会自动重新计算<br>$: total = count * 2;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4-属性-props"><a href="#4-属性-props" class="headerlink" title="4. 属性 (props)"></a>4. 属性 (<code>props</code>)</h3><p>要将数据从父组件传递给子组件，可以使用 <code>export let</code> 语法。</p><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;!-- ChildComponent.svelte --&gt;<br>&lt;script&gt;<br>export let name; // 声明一个可接受的 prop<br>&lt;/script&gt;<br><br>&lt;h1&gt;你好, &#123;name&#125;!&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&lt;!-- App.svelte (父组件) --&gt;<br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.svelte&#x27;;<br>&lt;/script&gt;<br><br>&lt;ChildComponent name=&quot;Svelte&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="5-逻辑块"><a href="#5-逻辑块" class="headerlink" title="5. 逻辑块"></a>5. 逻辑块</h3><p>Svelte 提供简洁的语法来处理条件渲染和列表渲染：</p><ul><li><strong>条件渲染</strong>：使用 <code>&#123;#if...&#125;</code></li><li><strong>列表渲染</strong>：使用 <code>&#123;#each...&#125;</code></li></ul><p>Svelte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs svelte">&#123;#if user&#125;<br>    &lt;div&gt;欢迎, &#123;user.name&#125;!&lt;/div&gt;<br>&#123;:else&#125;<br>    &lt;div&gt;请登录&lt;/div&gt;<br>&#123;/if&#125;<br><br>&#123;#each items as item&#125;<br>    &lt;div&gt;&#123;item.name&#125;&lt;/div&gt;<br>&#123;/each&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;go install github.com&amp;#x2F;wailsapp&amp;#x2F;wails&amp;#x2F;v2&amp;#x</summary>
      
    
    
    
    <category term="一日一库" scheme="https://hybpjx.cn/categories/%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93/"/>
    
    
    <category term="JavaScript" scheme="https://hybpjx.cn/tags/JavaScript/"/>
    
    <category term="Golang" scheme="https://hybpjx.cn/tags/Golang/"/>
    
    <category term="Svelte" scheme="https://hybpjx.cn/tags/Svelte/"/>
    
  </entry>
  
  <entry>
    <title>vaptcha手势验证码分析流程</title>
    <link href="https://hybpjx.cn/2025/08/29/%E6%89%8B%E5%8A%BF%E9%AA%8C%E8%AF%81%E7%A0%81%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>https://hybpjx.cn/2025/08/29/%E6%89%8B%E5%8A%BF%E9%AA%8C%E8%AF%81%E7%A0%81%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/</id>
    <published>2025-08-29T01:16:28.000Z</published>
    <updated>2025-10-09T07:11:22.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>先config 获取信息 再get拿到验证码和order</p><p><img src="https://s2.loli.net/2025/08/25/lRa5dCrwXDiKTqf.png"></p><p>如下图 配置如下</p><p>vi： 固定</p><p>k：返回值</p><p>en： 加密值</p><p><img src="https://s2.loli.net/2025/08/25/trCgI8WO56mpweR.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>n 生成出如下</p><p><img src="https://s2.loli.net/2025/08/25/kZyih3G2oaIRN1K.png"></p><p>第一个en 随便扣扣 就扣出来了。</p><p><img src="https://s2.loli.net/2025/08/25/yWGmVfgKibajRlA.png"></p><p>然后把比较重要的component拿出来</p><p><img src="https://s2.loli.net/2025/08/25/sJ4SVXiojG7RCdZ.png"></p><p>然后抠出来 请求就可以了。中间会遇到很多坑。</p><p>其中指纹需要复制。</p><h2 id="底图还原"><a href="#底图还原" class="headerlink" title="底图还原"></a>底图还原</h2><p>这里请求完之后会获取到图片信息和 图片的order</p><p>但是这个order不是直接还原的order。还需要去js中找到加密的地方。</p><p>（这里为了保持代码一致。我扣下来一版 来找对应位置。所以有些值和网页会有所对应不上）</p><p>还原位置如下：</p><p>搜索关键词：imageOnload 或者 Decrypt</p><p><img src="https://s2.loli.net/2025/08/28/hcDXq6gmKMyJ2Ai.png"></p><p>这里就直接硬扣就完事了。</p><p>Decrypt的算法逻辑如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_0xb05afc</span>(<span class="hljs-params">_0x2b9119, _0x1f3614</span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x431184 = <span class="hljs-string">&quot;&quot;</span>;<br>    _0x431184 = (<span class="hljs-built_in">parseInt</span>(_0x2b9119) - _0x1f3614).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">if</span> (_0x431184.<span class="hljs-property">length</span> &lt; (<span class="hljs-number">983293</span> ^ <span class="hljs-number">983287</span>)) &#123;<br>        _0x431184 = <span class="hljs-string">&quot;0&quot;</span> + _0x431184;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _0x431184;<br>&#125;<br></code></pre></td></tr></table></figure><p>稍微麻烦的也就是传参的这个</p><p><img src="https://s2.loli.net/2025/08/28/MXGf6zUZISOnqgk.png"></p><h2 id="算法还原"><a href="#算法还原" class="headerlink" title="算法还原"></a>算法还原</h2><p>拿到底图链接 即重新拼接成一个完整图片</p><p>算法如下；</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_image</span>(<span class="hljs-params">order: <span class="hljs-built_in">str</span>, image_url: <span class="hljs-built_in">str</span>, output_path: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;image.png&quot;</span></span>):<br>    CANVAS_WIDTH, CANVAS_HEIGHT = <span class="hljs-number">290</span>, <span class="hljs-number">167</span><br>    SOURCE_WIDTH, SOURCE_HEIGHT = <span class="hljs-number">400</span>, <span class="hljs-number">230</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-built_in">len</span>(order) == <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> order.isdigit()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误：排序字符串必须为10位数字&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    response = requests.get(image_url, timeout=<span class="hljs-number">10</span>)<br>    source_image = Image.<span class="hljs-built_in">open</span>(io.BytesIO(response.content))<br><br>    target_canvas = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (CANVAS_WIDTH, CANVAS_HEIGHT), <span class="hljs-string">&#x27;white&#x27;</span>)<br><br>    canvas_block_w, canvas_block_h = CANVAS_WIDTH // <span class="hljs-number">5</span>, CANVAS_HEIGHT // <span class="hljs-number">2</span><br>    source_block_w, source_block_h = SOURCE_WIDTH // <span class="hljs-number">5</span>, SOURCE_HEIGHT // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-comment"># 计算源和目标位置</span><br>        source_x, source_y = (i % <span class="hljs-number">5</span>) * source_block_w, (i // <span class="hljs-number">5</span>) * source_block_h<br>        pos = <span class="hljs-built_in">int</span>(order[i])<br>        target_x, target_y = (pos % <span class="hljs-number">5</span>) * canvas_block_w, (pos // <span class="hljs-number">5</span>) * canvas_block_h<br><br>        <span class="hljs-comment"># 裁剪、缩放并粘贴</span><br>        block = source_image.crop((source_x, source_y, source_x + source_block_w, source_y + source_block_h))<br>        resized_block = block.resize((canvas_block_w, canvas_block_h), Image.Resampling.LANCZOS)<br>        target_canvas.paste(resized_block, (target_x, target_y))<br><br>    target_canvas.save(output_path, <span class="hljs-string">&#x27;PNG&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图像已保存为 <span class="hljs-subst">&#123;output_path&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h2><p>validate的请求中的en </p><p>定位点如下图所示</p><p><img src="https://s2.loli.net/2025/08/28/214CoGMDfOzyub6.png"></p><p>其实这里算法都和你简单随便扣扣就出来了。</p><p>传参这里看看。</p><p><img src="https://s2.loli.net/2025/08/29/xSoBO8wQjnJa1lH.png"></p><p>v： 轨迹</p><p>vi：固定值 和uk差不多</p><p>k：接口返回</p><p>dt： 滑动时间</p><p>ch：heigh 图片高度</p><p>cw：width 图片宽度</p><p><img src="https://s2.loli.net/2025/08/29/DuMCjlp7FWi8nZS.png"></p><p>补充说明：具体值demo如上</p><h1 id="难点与坑"><a href="#难点与坑" class="headerlink" title="难点与坑"></a>难点与坑</h1><p>这里讲完流程大概讲下难点</p><ol><li><p>en有个UA头 前后要保持一致 如下图<img src="https://s2.loli.net/2025/08/28/fe6JKqcagSGP58r.png" alt="image-20250828235814245"></p></li><li><p>GenerateFP。下图其实这里就是运用了 JavaScript 生成器 的特性。.sent 就是接受了上一步吐出来的值。</p><p><img src="https://s2.loli.net/2025/08/29/gSqoDkRuFaJwAxW.png"></p></li><li><p>这里有个异步方法 其实。只需要看他返回值 然后扣下来或者给AI就可以了。</p><p><img src="https://s2.loli.net/2025/08/29/rCMNwedOGS1IWsi.png"></p><p><img src="https://s2.loli.net/2025/08/29/yW5jtdHVxPYDKIG.png"></p><p>当然 这里还有个环境指纹 直接copy下来就好了。</p><p><img src="https://s2.loli.net/2025/08/29/RJe2kpswx6FInQq.png"></p></li><li><p>轨迹 </p><p>这里不应该是坑点。这里打个鼠标断点就能找到轨迹生成的地方。可以对着分析 但是没屌用。具体我也没研究明白。</p><p><img src="https://s2.loli.net/2025/08/29/UNylLinexzOZ6CS.png"></p></li></ol><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>结果就是我也没搞出来。demo站倒是比较松。这个真应用起来好像是划得来不太准就会一直错。</p><p><img src="https://s2.loli.net/2025/08/29/tpiMF2Es3gRIHWS.png"></p><p>代码返回了 103 代表了canvas 指纹不对。</p><p><img src="https://s2.loli.net/2025/08/29/OQLEkjb78H4x3Ti.png"></p><p>代码返回了101 代表了 en生成的值和 knock的值不对。</p><p><img src="https://s2.loli.net/2025/08/29/GhQqWOCVcFsbrud.png"></p><p>代码返回了104 代表了 轨迹的值不对。最终也是卡死在了这一步。</p><p>至于识别的话。这里我使用了CSDN的某位大佬的方案。</p><p>使用cv2 手动的去滑。然后 line 的去模拟轨迹。但是实际下来好像是不太行。</p><p>这里我把代码也开源出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_trajectory</span>(<span class="hljs-params">img_path</span>):<br>    points = []<br>    img = cv2.imread(img_path)<br>    <span class="hljs-keyword">if</span> img <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法加载图片，请检查路径&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br>    cv2.namedWindow(<span class="hljs-string">&#x27;Image Trajectory Recorder&#x27;</span>)<br>    cv2.setMouseCallback(<span class="hljs-string">&#x27;Image Trajectory Recorder&#x27;</span>,<br>                         <span class="hljs-keyword">lambda</span> event, x, y, flags, param:<br>                         (points.append(&#123;<span class="hljs-string">&#x27;x&#x27;</span>: x, <span class="hljs-string">&#x27;y&#x27;</span>: y, <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>)&#125;))<br>                         <span class="hljs-keyword">if</span> event == cv2.EVENT_LBUTTONDOWN <span class="hljs-keyword">or</span> (<br>                                     event == cv2.EVENT_MOUSEMOVE <span class="hljs-keyword">and</span> flags == cv2.EVENT_FLAG_LBUTTON) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;在图片上按住鼠标左键并移动来绘制轨迹，按&#x27;s&#x27;保存并返回，按&#x27;q&#x27;退出&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        clone = img.copy()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(points) &gt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(points) - <span class="hljs-number">1</span>):<br>                cv2.line(clone,<br>                         (points[i][<span class="hljs-string">&#x27;x&#x27;</span>], points[i][<span class="hljs-string">&#x27;y&#x27;</span>]),<br>                         (points[i + <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;x&#x27;</span>], points[i + <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;y&#x27;</span>]),<br>                         (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>        cv2.imshow(<span class="hljs-string">&#x27;Image Trajectory Recorder&#x27;</span>, clone)<br><br>        key = cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span><br><br>        <span class="hljs-comment"># 按&#x27;s&#x27;保存并返回</span><br>        <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;s&#x27;</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> points:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有记录到轨迹点&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-comment"># 计算相对时间并添加偏移量</span><br>            start_time = points[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;time&#x27;</span>]<br>            <span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> points:<br>                point[<span class="hljs-string">&#x27;time&#x27;</span>] = point[<span class="hljs-string">&#x27;time&#x27;</span>] - start_time<br>                point[<span class="hljs-string">&#x27;x&#x27;</span>] += <span class="hljs-number">30</span><br>                point[<span class="hljs-string">&#x27;y&#x27;</span>] += <span class="hljs-number">35</span><br><br>            <span class="hljs-comment"># 返回JSON字符串</span><br>            trajectory_data = json.dumps(points, indent=<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;轨迹已记录，共 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(points)&#125;</span> 个点。&quot;</span>)<br><br>            cv2.destroyAllWindows()<br>            <span class="hljs-keyword">return</span> trajectory_data<br><br>        <span class="hljs-comment"># 按&#x27;q&#x27;退出</span><br>        <span class="hljs-keyword">elif</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已退出，未保存轨迹&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    cv2.destroyAllWindows()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/h1&gt;&lt;p&gt;先config 获取信息 再get拿到验证码和order&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2025</summary>
      
    
    
    
    <category term="JS逆向" scheme="https://hybpjx.cn/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://hybpjx.cn/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>补环境复制原型属性脚本</title>
    <link href="https://hybpjx.cn/2025/08/26/%E8%A1%A5%E7%8E%AF%E5%A2%83%E5%A4%8D%E5%88%B6%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E8%84%9A%E6%9C%AC/"/>
    <id>https://hybpjx.cn/2025/08/26/%E8%A1%A5%E7%8E%AF%E5%A2%83%E5%A4%8D%E5%88%B6%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E8%84%9A%E6%9C%AC/</id>
    <published>2025-08-26T11:48:06.000Z</published>
    <updated>2025-10-09T07:10:42.914Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  <span class="hljs-title function_">copyAllProperties</span> =(<span class="hljs-params">obj</span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> result = &#123;&#125;;<br>    <br>    <span class="hljs-comment">// 复制对象自身的属性</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result[key] = obj[key];<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            result[key] = <span class="hljs-string">&#x27;[无法访问]&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 复制不可枚举的属性</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> result)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                result[key] = obj[key];<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                result[key] = <span class="hljs-string">&#x27;[无法访问]&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">const</span> screenProps = <span class="hljs-title function_">copyAllProperties</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="杂记" scheme="https://hybpjx.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://hybpjx.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>IDA学习</title>
    <link href="https://hybpjx.cn/2025/08/22/IDA%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hybpjx.cn/2025/08/22/IDA%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-22T07:35:27.000Z</published>
    <updated>2025-08-22T07:42:43.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="还原JNI函数方法名"><a href="#还原JNI函数方法名" class="headerlink" title="还原JNI函数方法名"></a>还原JNI函数方法名</h1><p>如下图所示，输入</p><blockquote><p>JNIEnv <em>a1 或者 JNIEnv</em></p></blockquote><p>找到调用的jni函数名，鼠标选中a1,单击y,弹出如下界面</p><p><img src="https://s2.loli.net/2025/08/22/kSMNzhyvQlTA4G9.png"></p><p>点击OK 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;还原JNI函数方法名&quot;&gt;&lt;a href=&quot;#还原JNI函数方法名&quot; class=&quot;headerlink&quot; title=&quot;还原JNI函数方法名&quot;&gt;&lt;/a&gt;还原JNI函数方法名&lt;/h1&gt;&lt;p&gt;如下图所示，输入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JNIEnv &lt;e</summary>
      
    
    
    
    <category term="安卓基础" scheme="https://hybpjx.cn/categories/%E5%AE%89%E5%8D%93%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>某蜂窝 zzzghostsigh 补环境+纯算</title>
    <link href="https://hybpjx.cn/2025/08/19/%E9%A9%AC%E8%9C%82%E7%AA%9Dunidbg%E8%A1%A5%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>https://hybpjx.cn/2025/08/19/%E9%A9%AC%E8%9C%82%E7%AA%9Dunidbg%E8%A1%A5%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9%E5%AF%84%E5%AD%98%E5%99%A8/</id>
    <published>2025-08-19T03:48:00.000Z</published>
    <updated>2025-10-10T10:16:06.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h1><p>首先找到定位点。</p><p>这里直接搜索 zzzghostsigh</p><p><img src="https://s2.loli.net/2025/07/25/IrSbqQZTWa3582Y.png"></p><p>然后找他引用的位置</p><p><img src="https://s2.loli.net/2025/07/25/tdPlEbB5TfHVMye.png"></p><p>继续往下找一下位置。</p><p>这里发现是一个接口的实现。<img src="https://s2.loli.net/2025/07/25/fok8VWFG4ZKDsva.png"></p><p>那没关系。我们继续找下实现的位置。</p><p>这里可以挨个去看。</p><p>这里发现是gh.b()</p><p><img src="https://s2.loli.net/2025/07/25/12ihHAPMaurTSe5.png"></p><p>继续点两下 就找到了 引用的位置。找到so层 是 libmfw.so</p><p><img src="https://s2.loli.net/2025/07/17/uf4tKXM78lDiA13.png"></p><p>然后我们hook一下 看看传餐以及结果值。</p><p><img src="https://s2.loli.net/2025/07/17/KZWTlUqh7pReHLw.png"></p><h1 id="unidbg"><a href="#unidbg" class="headerlink" title="unidbg"></a>unidbg</h1><p>这里直接unidbg补环境</p><p>封装好请求</p><p>直接运行 报错如下</p><p>这里看到 直接就运行了没报错 缺少什么环境</p><p><img src="https://s2.loli.net/2025/07/17/WEcnH5RM1D7la6i.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">[10:49:23 460]  WARN [com.github.unidbg.linux.ARM64SyscallHandler] (ARM64SyscallHandler:410) - handleInterrupt intno=2, NR=-128336, svcNumber=0x1a2, PC=unidbg@0xfffe0ab4, LR=RX@0x1203cbac[libmfw.so]0x3cbac, syscall=null<br>java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0<br></code></pre></td></tr></table></figure><p>直接去看报错的这部分基址。跳过这部分校验</p><p>ida找一下 3cbac</p><p>然后分析下 。这个方法中都是校验。补起来相对还是比较麻烦的。</p><p><img src="https://s2.loli.net/2025/07/18/ebXqKf2xwCvHt1o.png"></p><p>所以这里我们往上看。这个方法</p><p><img src="https://s2.loli.net/2025/07/18/dzFTCv8OJ19it7N.png"></p><p>按x 看下调用的地方。这里就是调用环境的地方。</p><p><img src="https://s2.loli.net/2025/07/18/62MQmob4Zv1Wcqr.png"></p><p>所以这里我们直接跳过这个判断。</p><p>这里直接unibdg 去跳过 这个环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> emulator.attach().addBreakPoint(<span class="hljs-keyword">module</span>.base + <span class="hljs-number">0x3970C</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onHit</span><span class="hljs-params">(Emulator&lt;?&gt; emulator, <span class="hljs-type">long</span> address)</span> &#123;<br><span class="hljs-comment">//                emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_PC,0x3970C+4);</span><br>                emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_PC,address+<span class="hljs-number">4</span>);<br>                emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_X0,<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>这里返回true 即断点不会断住，返回false 即代表断点断住。</p><p>然后直接运行。发现可以出值。</p><p><img src="https://s2.loli.net/2025/08/18/jvhzZ4LywsW3tum.png"></p><p>结果也正如一开始我们frida的值一样。</p><p>接下来就是trace了</p><h1 id="纯算分析"><a href="#纯算分析" class="headerlink" title="纯算分析"></a>纯算分析</h1><p>这里直接搜索 0x4a55</p><p>搜索到了 0x4a55d456 拆成了 8个字节。</p><p><img src="https://s2.loli.net/2025/08/18/dltBqg6FuGAyzOZ.png"></p><p>那我们再搜下 0x9606ba47 果然也有 13个。实际不算结果12个。</p><p><img src="https://s2.loli.net/2025/08/18/58hPl9EorNHMfA6.png"></p><p>那总计下</p><p>4a55d456 9606ba47 87057a46 2b4f926c f9739142</p><p>拆成了 五组。 40位。其实已经可以猜出来是sha256了。</p><p>先找下 0x4a55d456的基址 0x1203f360</p><p>搜索 一下</p><p><img src="https://s2.loli.net/2025/08/18/4xg8jhpFCmzJqAe.png"></p><p>这里先回去看看 ida</p><p>这里把代码丢给gpt。gpt直接告诉我们这是个sha1</p><p><img src="https://s2.loli.net/2025/08/18/ZmBHMtW8OyXKTgz.png"></p><p>但是我们实际上去运算。发现好像对不上啊</p><p><img src="https://s2.loli.net/2025/08/18/IsXb8ujNv3JM5eS.png"></p><p>所以肯定是魔改了一些参数。这里继续回去看010里的trace。</p><p>这里就相对简单了。我们对这源码去看实现就好。</p><p>这里找着入口对着看。</p><p>这里直接找sha1的特征值。</p><p>找一段源码（最好找python的。或者Go的 只要不是JS的,因为我就是js改的。千奇百怪）</p><p>这里我们找下sha1 的轮常数： 1518500249，1859775393，1894007588（-1894007588） </p><p>然后把它转成16进制去trace搜索。</p><p>这里分别为 0x5A827999，0x6ED9EBA1，0x8F1BBCDC</p><p>这里去搜搜</p><p><img src="https://s2.loli.net/2025/08/18/XyrBPNU6wDq97Mb.png"></p><p>这里可以发现trace的地方有703个很明显不合理</p><p>找到 w29&#x3D;0x5A827999 做下切割。</p><p>只拿一段。</p><p><img src="https://s2.loli.net/2025/08/18/lPTn7FCAherIiKu.png"></p><p>这里找到 movk的地方。</p><p>发现一共4轮。</p><p><img src="https://s2.loli.net/2025/08/18/Sc2EayOoZIVuPTH.png"></p><p>但是这这里movk直接就是就是加载常量了 所以得往前看一点。看看谁那些值。</p><p><img src="https://s2.loli.net/2025/08/18/BmbaQcG65uloC2F.png"></p><p><img src="https://s2.loli.net/2025/08/18/BMSzX749xfyrqKc.png"></p><p>具体看看trace中的值。</p><p><img src="https://s2.loli.net/2025/08/18/x74eozQcHSfphYX.png"></p><p>这里可以推断出SHA1的魔值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">v18 = <span class="hljs-number">0x67452301</span><br>v19 = <span class="hljs-number">0xEFCDAB89</span><br>V20 = <span class="hljs-number">0x98BADCFE</span><br>v21 = <span class="hljs-number">0x5E4A1F7C</span><br>v22 = <span class="hljs-number">0x10325476</span><br></code></pre></td></tr></table></figure><p>但是好像和标准值有差别</p><p>标准的 “v21”与“v22”为 “0x10325476” 以及 “0xC3D2E1F0”</p><p>这里虽然改了。但是结果仍然不一致。</p><p>继续往下看吧。</p><p>分析下具体的代码</p><p><img src="https://s2.loli.net/2025/08/18/j1xtAycUY28vLhW.png"></p><p>如下</p><p>以上依次为</p><p>movk、rev、and、add、eor、add、ror、add、ror、add、</p><p>_、字节反转、与、加、异或、右移、加、右移、加</p><p>这里可以看到这里基本和算法都差不多没有魔改。这一段对这去扣。</p><p>剩余是否一致也是一样的。往下看。</p><p>这里只讲差异点吧。</p><p>在开头搜过 0x5a827999 这个值。但是正常这个值。其实标准中应该只参与过16轮。而稳重有36轮。</p><p><img src="https://s2.loli.net/2025/08/18/nFHoXyz3p2WvsKZ.png"></p><p>所以还有20轮肯定是改了轮数。</p><p>所以下文开始就是16轮之后的改的论数</p><p><img src="https://s2.loli.net/2025/08/18/ZgRMS15vFkVp4L9.png"></p><p>对应的伪c如下</p><p><img src="https://s2.loli.net/2025/08/18/y3mxTEOCZh84oQY.png"></p><p>继续问下ai</p><p><img src="https://s2.loli.net/2025/08/18/ANFd4RyGlfKDHIc.png"></p><p>所以代码应该如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">16</span>) &#123;<br>    f = (b &amp; c) | ((~b) &amp; d);<br>    k = <span class="hljs-number">0x5A827999</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">20</span>) &#123;<br>    f = b ^ c ^ d;<br>    k = <span class="hljs-number">0x6ED9EBA1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">40</span>) &#123;<br>    f = (b &amp; c) | (b &amp; d) | (c &amp; d);<br>    k = <span class="hljs-number">0x8F1BBCDC</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">60</span>)&#123;<br>    f = (b &amp; c) | ((~b) &amp; d);<br>    k = <span class="hljs-number">0x5A827999</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    f = b ^ c ^ d;<br>    k = <span class="hljs-number">0xCA62C1D6</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里既是改了 这些值还是对不上。</p><p>走到最后</p><p><img src="https://s2.loli.net/2025/08/18/todO2cb91BnaZ57.png"></p><p>这里对源码看看</p><p><img src="https://s2.loli.net/2025/08/18/RyPmKDgX5Gw9eTv.png"></p><p>那正常 应该是 </p><p>4 3 2 1 0</p><p>而我们的 是</p><p>4 2 3 1 0</p><p>所以这样调转下位置。 然后运行</p><p><img src="https://s2.loli.net/2025/08/18/yGgx1rCKYeIDXkA.png"></p><p>发现终于一模一样了。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>也算搞了好几天。还原了一个比较简单的算法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jadx&quot;&gt;&lt;a href=&quot;#jadx&quot; class=&quot;headerlink&quot; title=&quot;jadx&quot;&gt;&lt;/a&gt;jadx&lt;/h1&gt;&lt;p&gt;首先找到定位点。&lt;/p&gt;
&lt;p&gt;这里直接搜索 zzzghostsigh&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s</summary>
      
    
    
    
    <category term="安卓逆向" scheme="https://hybpjx.cn/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>某猫投诉 flutter Signature 逆向</title>
    <link href="https://hybpjx.cn/2025/08/15/%E6%9F%90%E7%8C%AB%E6%8A%95%E8%AF%89%20flutter%20Signature%20%E9%80%86%E5%90%91/"/>
    <id>https://hybpjx.cn/2025/08/15/%E6%9F%90%E7%8C%AB%E6%8A%95%E8%AF%89%20flutter%20Signature%20%E9%80%86%E5%90%91/</id>
    <published>2025-08-15T08:50:00.000Z</published>
    <updated>2025-10-09T07:11:11.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接说了是 flutter了 那就不必多说了。</p><p>先介绍下 什么是flutter。 这里我直接把AI的回复粘贴过来了。</p><p>Flutter 是谷歌开发的一套 UI 工具包，让你只写一份代码，就能同时为 iOS、Android、Web 和桌面等多个平台创建美观、高性能的应用。</p><p>1、<strong>“万物皆 Widget”：</strong> Flutter 中所有界面元素，包括按钮、文本和布局，甚至应用本身，都是“Widget”（小部件）。它们可以像积木一样组合起来构建复杂的界面。</p><p>2、<strong>自带渲染引擎（Skia）：</strong> Flutter 不依赖操作系统原生的 UI 组件，而是通过自带的高性能图形引擎 Skia 直接将所有 Widget 绘制到屏幕上。这样可以实现极高的渲染速度和流畅的用户体验。</p><p>3、<strong>Dart 语言：</strong> Flutter 使用 Dart 语言开发。</p><ul><li><strong>AOT 编译：</strong> 发布时，Dart 代码会被直接编译成机器码，使应用运行速度极快，性能接近原生。</li><li><strong>JIT 编译 + 热重载：</strong> 开发时，Dart 支持即时编译和“热重载”功能，开发者修改代码后能立即看到效果，大大提高了开发效率。</li></ul><p>4、<strong>响应式 UI：</strong> Flutter 采用声明式 UI 编程。你只需描述界面“长什么样”，而不用关心“如何更新”，当数据变化时，Flutter 会自动高效地更新界面。</p><p>libflutter.so  &#x3D;&#x3D;&#x3D;&gt;  libapp.so</p><p>那这里 AI介绍了 flutter的特点。</p><p>再补充几点</p><p>1、flutter是由Dart开发</p><p>2、 Flutter被编译出来其实就是个So文件</p><p>3、So文件无函数名。基本都是sub_开头，也无JNI绑定方法。</p><p>4、执行是由flutter.so执行</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>抓包可知。需要逆向的参数 是这个 signautre</p><p><img src="https://s2.loli.net/2025/08/05/GYFbhyNRjKrMmic.png"></p><p>这里Java层找不到</p><h1 id="IDA配置"><a href="#IDA配置" class="headerlink" title="IDA配置"></a>IDA配置</h1><p>这里 flutter 反编译 全是一sub 函数。几万个。找不到</p><p>这里使用blutter去做一个函数名还原。</p><p>解压 app 把 libflutter.so 以及 libapp.so 拿出来。</p><p>下载完Blutter。</p><p>这里我是Mac</p><p>使用如下命令</p><p>两个版本 </p><p>macOS Sequoia</p><ul><li>Install XCode</li><li>Install required tools</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>cmake ninja pkg-<span class="hljs-built_in">config</span> icu4c capstone<br>pip3 <span class="hljs-keyword">install </span>pyelftools requests<br></code></pre></td></tr></table></figure><p>macOS Ventura and Sonoma (clang 16)</p><ul><li>Install XCode</li><li>Install clang 16 and required tools</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span><span class="hljs-keyword">llvm@16 </span>cmake ninja pkg-<span class="hljs-built_in">config</span> icu4c capstone<br>pip3 <span class="hljs-keyword">install </span>pyelftools requests<br></code></pre></td></tr></table></figure><p>然后执行下述命令</p><blockquote><p>python3 blutter.py .&#x2F;arm64 .&#x2F;output</p></blockquote><p>如下图位置 即可。</p><p><img src="https://s2.loli.net/2025/08/06/5ETP9exBkbchr6o.png"></p><p>直接讲ida中还原变量名。</p><p><img src="https://s2.loli.net/2025/08/05/HYlOxmtKPojwZqG.png"></p><p>把这个py文件拖进去</p><p><img src="https://s2.loli.net/2025/08/05/ePTuFUOM4KbE1Rg.png"></p><p>中间有错误不用管。然后就发现</p><p>诶。变量名都还原了。</p><p><img src="https://s2.loli.net/2025/08/05/LUf6gPlpmXQ2w4v.png"></p><p>​</p><h1 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h1><p>这里其实我搞过web的 知道这个signature 是 sha256</p><p>这里直接搜索 sha256</p><p><img src="https://s2.loli.net/2025/08/05/XwzYPrNaO6kTVgB.png"></p><p>当然可以把这个Allocate，以及flutter 开头的过滤掉。</p><p>这里点开第一个</p><p><img src="https://s2.loli.net/2025/08/06/Q1yiIzbLJmhtvOk.png"></p><p><img src="https://s2.loli.net/2025/08/06/flcpLsIUG4uogBt.png"></p><p>直接找他函数地址 Hook一下就好了</p><p>这里直接对比。</p><p><img src="https://s2.loli.net/2025/08/05/zkt69FVZ8pMJCOK.png"></p><p>对比</p><p><img src="https://s2.loli.net/2025/08/05/XYCD2Z8As6egTHx.png"></p><p>最后发现是由这段加密而成。</p><p><img src="https://s2.loli.net/2025/08/05/MSbXx621GWeRzq9.png"></p><p>结果一模一样</p><p>看着唬人 实则非常简单。</p><h1 id="具体结果"><a href="#具体结果" class="headerlink" title="具体结果"></a>具体结果</h1><p>最后还需要一点小小改动。<br><img src="https://s2.loli.net/2025/08/15/OSkZxvBtWD7UaCH.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;直接说了是 flutter了 那就不必多说了。&lt;/p&gt;
&lt;p&gt;先介绍下 什么是flutter。 这里我直接把AI的回复粘贴过来了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="安卓逆向" scheme="https://hybpjx.cn/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    
    <category term="Android" scheme="https://hybpjx.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AST_通用插件</title>
    <link href="https://hybpjx.cn/2025/08/14/AST-%E9%80%9F%E8%AE%B0/"/>
    <id>https://hybpjx.cn/2025/08/14/AST-%E9%80%9F%E8%AE%B0/</id>
    <published>2025-08-13T17:08:10.958Z</published>
    <updated>2025-10-10T10:16:29.718Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哦~这个密码无效。请检查后再试一次。" data-whm="哎呀，这些解密的内容可能已被更改，但你仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="73666b37e4014140409c0350e3748c44f9ff63a2a69ddb5b0afad37193f627a5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章已被作者加密，请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有一些加密内容，需要密码才能继续阅读。</summary>
    
    
    
    <category term="AST学习日记" scheme="https://hybpjx.cn/categories/AST%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://hybpjx.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Mac 用Jenv安装多个Java环境</title>
    <link href="https://hybpjx.cn/2025/03/26/Mac-%E7%94%A8Jenv%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAJava%E7%8E%AF%E5%A2%83/"/>
    <id>https://hybpjx.cn/2025/03/26/Mac-%E7%94%A8Jenv%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAJava%E7%8E%AF%E5%A2%83/</id>
    <published>2025-03-26T05:53:00.000Z</published>
    <updated>2025-08-15T09:16:52.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac使用Jenv-安装多个Java环境"><a href="#Mac使用Jenv-安装多个Java环境" class="headerlink" title="Mac使用Jenv 安装多个Java环境"></a>Mac使用Jenv 安装多个Java环境</h1><h1 id="安装Jenv"><a href="#安装Jenv" class="headerlink" title="安装Jenv"></a>安装Jenv</h1><p>通过Homebrew快速安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install jenv<br></code></pre></td></tr></table></figure><p>配置环境变量到Shell配置文件（如<code>.zshrc</code>或<code>.bash_profile</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h1 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h1><p><a href="https://www.azul.com/core-post-download">https://www.azul.com/core-post-download</a></p><p>选择 自己相应的 版本 一键式安装接口</p><h1 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h1><ul><li><p>下载 <code>.dmg</code> 文件并安装，默认路径为：<br><code>/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home</code></p></li><li><p><strong>添加至 jenv 管理</strong></p><ul><li><pre><code class="language-bash">jenv add /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Homejenv versions  # 验证是否显示 &quot;1.8&quot;</code></pre></li></ul></li></ul><h1 id="安装完成即可"><a href="#安装完成即可" class="headerlink" title="安装完成即可"></a>安装完成即可</h1><p>如下图所示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mac使用Jenv-安装多个Java环境&quot;&gt;&lt;a href=&quot;#Mac使用Jenv-安装多个Java环境&quot; class=&quot;headerlink&quot; title=&quot;Mac使用Jenv 安装多个Java环境&quot;&gt;&lt;/a&gt;Mac使用Jenv 安装多个Java环境&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="快速安装" scheme="https://hybpjx.cn/categories/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Java" scheme="https://hybpjx.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vscode 自定义配置操作</title>
    <link href="https://hybpjx.cn/2025/03/24/Vscode-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/"/>
    <id>https://hybpjx.cn/2025/03/24/Vscode-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/</id>
    <published>2025-03-24T09:25:00.000Z</published>
    <updated>2025-08-13T17:08:34.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode-自定义配置"><a href="#vscode-自定义配置" class="headerlink" title="vscode 自定义配置"></a>vscode 自定义配置</h1><h1 id="必装插件与配置"><a href="#必装插件与配置" class="headerlink" title="必装插件与配置"></a>必装插件与配置</h1><ol><li><p><strong>Go，python</strong>——跟着你要运行代码来</p></li><li><p><strong>Code Runner</strong> ——代码运行工具</p></li><li><p><strong>IntelliJ IDEA Keybindings</strong>——使用IDEA快捷键</p></li><li><p><strong>Pylance</strong>——修正python语法与感知</p></li><li><p><strong>Black Formatter</strong>——代码格式化工具</p></li><li><p><strong>Better Comments</strong> ——美化注释的插件</p></li><li><p><strong>Bracket Pair Colorizer 2</strong>——找大括号 逆向者</p></li><li><p><strong>Material Theme Icons</strong>——文件图标</p></li><li><p><strong>Error Gutters</strong>——错误提示</p></li><li><p><strong>Code Spell Checker</strong> ——代码单词检查</p></li><li><p><strong>open in browser</strong>——可以打开HTML</p></li><li><p><strong>Postcode</strong> ——集成的Postman</p></li><li><p><strong>Project Manager</strong>——项目管理工具</p></li><li><p><strong>koroFileHeader</strong>——自动生成头部注释</p><ol><li><pre><code class="language-js">&quot;fileheader.customMade&quot;: &#123;    &quot;Author&quot;: &quot;一尾流莺&quot;,    &quot;Description&quot;: &quot;&quot;,    &quot;Date&quot;: &quot;Do not edit&quot;,    &quot;LastEditTime&quot;: &quot;Do not edit&quot;,    &quot;FilePath&quot;: &quot;&quot;  &#125;,    &quot;fileheader.cursorMode&quot;: &#123;    &quot;description&quot;: &quot;&quot;,    &quot;param&quot;: &quot;&quot;,    &quot;return&quot;: &quot;&quot;  &#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">15</span>. <br><br># 保存即格式化<br><br>```json<br>&#123;<br>  <span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">true</span>,<br> <span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span>  // 指定默认格式化工具（如Prettier）<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ol></li></ol><p>也可以根据语言</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Mac中自动选择Python环境"><a href="#Mac中自动选择Python环境" class="headerlink" title="Mac中自动选择Python环境"></a>Mac中自动选择Python环境</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;python.condaPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/hybpjx/miniconda3/bin/conda&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.profiles.osx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;bash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-comment">// 加载登录 shell 的环境变量</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;zsh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zsh&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.defaultProfile.osx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zsh&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code-runner.executorMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;javascript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source ~/.nvm/nvm.sh &amp;&amp; node&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;zig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zig run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;objective-c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;python.pythonPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env:CONDA_PREFIX&#125;/bin/python&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;perl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;perl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl6&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ruby&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;powershell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell -ExecutionPolicy ByPass -File&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmd /c&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;shellscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fsharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsi&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;csharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scriptcs&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;vbscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cscript //Nologo&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-node&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;coffeescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffee&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scala&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scala&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;julia&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;crystal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;crystal&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ocaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rscript&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;applescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;osascript&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;clojure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lein exec&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;haxe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rust&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;racket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;racket&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csi -script&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ahk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autohotkey&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;autoit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autoit3&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pascal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;haskell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;runghc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;nim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nim compile --verbosity:0 --hints:off --run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lisp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sbcl --script&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;kit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kitc --run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;v&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass --style expanded&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss --style expanded&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;FortranFreeForm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fortran-modern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fortran_fixed-form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fortran&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; sml $fileName&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;mojo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mojo run&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;erlang&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;escript&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;spwn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;spwn build&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pkl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;gleam&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gleam run -m $fileNameWithoutExt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vscode-自定义配置&quot;&gt;&lt;a href=&quot;#vscode-自定义配置&quot; class=&quot;headerlink&quot; title=&quot;vscode 自定义配置&quot;&gt;&lt;/a&gt;vscode 自定义配置&lt;/h1&gt;&lt;h1 id=&quot;必装插件与配置&quot;&gt;&lt;a href=&quot;#必装插件与配</summary>
      
    
    
    
    <category term="快速安装" scheme="https://hybpjx.cn/categories/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    
    
  </entry>
  
  <entry>
    <title>akamai 某环境参数VMP逆向</title>
    <link href="https://hybpjx.cn/2025/03/10/akamai-%E6%9F%90%E7%8E%AF%E5%A2%83%E5%8F%82%E6%95%B0VMP%E9%80%86%E5%90%91/"/>
    <id>https://hybpjx.cn/2025/03/10/akamai-%E6%9F%90%E7%8E%AF%E5%A2%83%E5%8F%82%E6%95%B0VMP%E9%80%86%E5%90%91/</id>
    <published>2025-03-10T15:29:23.000Z</published>
    <updated>2025-10-09T07:09:29.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>懂得都懂 直接开干。本文出口入口值会有些许区别 网站值没有固定。<br>仅分析部分算法。</p><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>如下图 断点打在 第一个wPz 生成的地方。看 jsz</p><p><img src="https://s2.loli.net/2025/02/21/C1ixLR67QuHUNWY.png"></p><p>目标: 获取jsz中的mst的dvc。如下图所示</p><p><img src="https://s2.loli.net/2025/02/21/NeacpEFJmfndT4o.png"></p><p>往上找，找到jsz生成的地方 如下图所示</p><p><img src="https://s2.loli.net/2025/02/21/EhTqgQUK6wIDszm.png"></p><p>然后右边看作用域。找到与之匹配的 “dvc”</p><p><img src="https://s2.loli.net/2025/02/21/FtZfD178HqMpSWU.png"></p><p>然后继续往上找 找到jzz的生成处</p><p><img src="https://s2.loli.net/2025/02/21/edLzZA8EvtYb5C2.png"></p><p>经过分析下面这段代码即使生成dvc的位置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">pL</span>(x4, [<br>    <span class="hljs-title function_">VQ</span>()[<span class="hljs-title function_">AJ</span>(xg)](<span class="hljs-title class_">FCz</span>, lE, <span class="hljs-variable constant_">SL</span>),<br>    <span class="hljs-title function_">N8</span>()<br>      [<span class="hljs-title function_">CR</span>(xV)].<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-title class_">Gr</span>, lt, zdz])<br>      [<span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>)](<br>        <span class="hljs-variable constant_">GI</span>,<br>        <span class="hljs-title class_">Jj</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(<span class="hljs-title class_">Rg</span>)], <span class="hljs-title function_">cg</span>(<span class="hljs-title function_">N8</span>()[<span class="hljs-title function_">CR</span>(xV)](nR, lt, zdz), [][[]]))<br>          ? <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(s3)](gCz, vZ, sHz, hR, <span class="hljs-title class_">Bx</span>(<span class="hljs-title class_">Bx</span>(<span class="hljs-variable constant_">F8</span>)))<br>          : <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Lt</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">Cx</span>)<br>      )<br>      [<br>        <span class="hljs-title function_">l8</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(zx)], <span class="hljs-title function_">cg</span>(<span class="hljs-string">&quot;&quot;</span>, [][[]]))<br>          ? <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>)<br>          : <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(wO)].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, bI, bJ)<br>      ](<span class="hljs-title class_">Bh</span>, <span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)](<span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Hj</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">St</span>))<br>      [<br>        <span class="hljs-title class_">Jj</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(fZ)], <span class="hljs-string">&quot;undefined&quot;</span>)<br>          ? <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(wO)](<span class="hljs-title class_">PCz</span>, tO)<br>          : <span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>)<br>      ](bMz),<br>  ])<br><br></code></pre></td></tr></table></figure><p>然后我们分析下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">VQ</span>()[<span class="hljs-title function_">AJ</span>(xg)](<span class="hljs-title class_">FCz</span>, lE, <span class="hljs-variable constant_">SL</span>) = <span class="hljs-string">&#x27;dvc&#x27;</span><br><span class="hljs-variable constant_">GI</span> = <span class="hljs-string">&quot;a3iea3adfa3eeYe2yi2a&quot;</span><br><br><span class="hljs-title class_">Gg</span>()[<span class="hljs-title function_">ES</span>(<span class="hljs-title class_">Rg</span>)](lY, <span class="hljs-variable constant_">X9</span>) = <span class="hljs-string">&#x27;concat&#x27;</span><br><br><span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Lt</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">Cx</span>) = <span class="hljs-string">&quot;,&quot;</span><br><br><span class="hljs-title function_">rJ</span>()[<span class="hljs-title function_">YJ</span>(qJ)](<span class="hljs-title class_">Vx</span>, <span class="hljs-title class_">Hj</span>, q2z, <span class="hljs-variable constant_">H3</span>, <span class="hljs-title class_">St</span>) = <span class="hljs-string">&quot;,&quot;</span><br><br>bMz = <span class="hljs-string">&#x27;l+h+f+b+i+j+k+a+c+g+e+d+&#x27;</span><br><br></code></pre></td></tr></table></figure><p>这样大概的逻辑就很清楚了</p><p>如下图是入口地方</p><p><img src="https://s2.loli.net/2025/02/21/Jw8WxNpfSvrdQU5.png"></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>这里其实都不用看这个 随便看看 应该就知道哪个地方是重点</p><p>先监控下这个PT里的值</p><p><img src="https://s2.loli.net/2025/02/26/rJposFbmOD436cn.png"></p><p>然后再监控下入口的这个传参值</p><p><img src="https://s2.loli.net/2025/02/26/MumlLrOwC4JQbhe.png"></p><p>还需要看看入口的这个值 是什么</p><p><img src="https://s2.loli.net/2025/02/26/evjRLhFgli5JYBS.png"></p><p>然后就是<strong>重点</strong></p><p><img src="https://s2.loli.net/2025/02/26/sM7GQOLgokEeWNK.png"></p><p>这个值会出来</p><p><strong>先把入参找出来 本文是[2, ‘16|24’, 0, 0]</strong></p><h1 id="第一个值"><a href="#第一个值" class="headerlink" title="第一个值"></a>第一个值</h1><p>刷新完 看看日志。</p><p>挨个分析</p><p><img src="https://s2.loli.net/2025/02/26/wzrCo1cMtY2yN7K.png"></p><p>确定是UA 可以暂时不用分析了。</p><h1 id="第二个值"><a href="#第二个值" class="headerlink" title="第二个值"></a>第二个值</h1><p>如下图</p><p><img src="https://s2.loli.net/2025/02/26/nVIy1mAgx7DeoOc.png"></p><p>不讲了。 但是这个值得记录下来 2482411364</p><p>这里分享个第一个算法吧。 其他的自己努力努力</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">UA</span> =<br>  <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Edg/133.0.0.0&quot;</span>;<br><span class="hljs-keyword">let</span> startTs = <span class="hljs-number">1740487469858</span>;<br><br><span class="hljs-keyword">let</span> frist = <span class="hljs-string">&quot;0&quot;</span> + startTs.<span class="hljs-title function_">toString</span>() + <span class="hljs-variable constant_">UA</span>.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">32</span>) + <span class="hljs-string">&quot;0&quot;</span>;<br><br><span class="hljs-keyword">let</span> r2 = <span class="hljs-number">5381</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; frist.<span class="hljs-property">length</span>; i++) &#123;<br>  r2 = (r2 * <span class="hljs-number">33</span>) ^ frist.<span class="hljs-title function_">charCodeAt</span>(i);<br>&#125;<br>r2 = r2 &gt;&gt;&gt; <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;r2&quot;</span>, r2);<br><br></code></pre></td></tr></table></figure><h1 id="第三个值"><a href="#第三个值" class="headerlink" title="第三个值"></a>第三个值</h1><p>如下图</p><p><img src="https://s2.loli.net/2025/02/26/V52ydgUxzu9pG8o.png"></p><p>不讲了</p><p>把这个值也记录下来 10010011111101101001011101100100</p><h1 id="第四个值"><a href="#第四个值" class="headerlink" title="第四个值"></a>第四个值</h1><p>第四个稍微就有点多了 坑点也增多</p><p><img src="https://s2.loli.net/2025/02/26/UzoDp8QZcbtqHkl.png"></p><p>如下 入参的某个值 charCodeAt了记录下来</p><p><img src="https://s2.loli.net/2025/02/26/q3TJOWcy2BS74tM.png"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[...<span class="hljs-string">&quot;214|160&quot;</span>].<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">char</span>=&gt;</span>char.charCodeAt())<br><br></code></pre></td></tr></table></figure><p>这个 214 和 160是哪来的呢？</p><p>看入参的第二个值</p><p>拼接逻辑如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;16|24&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>][<span class="hljs-number">0</span>].<span class="hljs-title function_">toString</span>() + [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;16|24&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>][<span class="hljs-number">1</span>].<span class="hljs-title function_">toString</span>() + [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;16|24&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>][<span class="hljs-number">2</span>].<span class="hljs-title function_">toString</span>()<br><br></code></pre></td></tr></table></figure><p>继续网上看</p><p>可以发现 有个固定值 split 并且固定值 每次都经过了一些判断 并且 变成了新的一个值。</p><p><img src="https://s2.loli.net/2025/02/26/yRHo7V3seaIFdb4.png"></p><p>这里的逻辑和第四个值没啥关系 但是也还是需要搞出来。</p><p>如下图 得到最终值 以及一些算法 可以反推出来</p><p><img src="https://s2.loli.net/2025/02/26/wiCSps61JcGavYq.png"></p><p>这里细节不多说了 最终值 1588180537</p><h1 id="第五个值"><a href="#第五个值" class="headerlink" title="第五个值"></a>第五个值</h1><p>如下图</p><p><img src="https://s2.loli.net/2025/02/26/3WOINpXVBjAbLsd.png"></p><p>生成如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-number">4070591901</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>重点就是 4070591901 怎么来的</p><p>不讲了 网上看看 有些坑 自己注意下就好了。</p><h1 id="第六个"><a href="#第六个" class="headerlink" title="第六个"></a>第六个</h1><p>这个 是最难的 也是最麻烦的</p><p><img src="https://s2.loli.net/2025/02/26/NE3K2gi6JxwbL9r.png"></p><p>简单说下</p><p>这里分两个 长的字符串+短的字符串</p><h2 id="长"><a href="#长" class="headerlink" title="长"></a>长</h2><p><img src="https://s2.loli.net/2025/02/26/5YWuQ2MhdKFw1TJ.png"></p><p>基于 两个传参的互相相加 然后charAt互相相加</p><h2 id="短"><a href="#短" class="headerlink" title="短"></a>短</h2><p>太麻烦，有空了再说 单开贴 这个要搞的话日志要打全。</p><p>最好挨个跟栈去看控制流。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>最后验证下结果</p><p>传入传参与入参</p><p>这是代码生成的值</p><p><img src="https://s2.loli.net/2025/02/26/mHYfxU75eNzQli1.png"></p><p>这是网站生成的值</p><p><img src="https://s2.loli.net/2025/02/26/M2qpQPHb8fIxE1Y.png"></p><p>教程帮助 感谢我7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;懂得都懂 直接开干。本文出口入口值会有些许区别 网站值没有固定。&lt;br&gt;仅分析部分算法。&lt;/p&gt;
&lt;h1 id=&quot;流程分析&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="JS逆向" scheme="https://hybpjx.cn/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://hybpjx.cn/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Mac 基础操作指南</title>
    <link href="https://hybpjx.cn/2025/03/10/Mac-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>https://hybpjx.cn/2025/03/10/Mac-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</id>
    <published>2025-03-10T15:26:00.000Z</published>
    <updated>2025-08-13T17:08:34.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接Linux"><a href="#链接Linux" class="headerlink" title="链接Linux"></a>链接Linux</h1><p>ssh 用户名@ip地址</p><p>输入密码</p><h1 id="sftp传输文件"><a href="#sftp传输文件" class="headerlink" title="sftp传输文件"></a>sftp传输文件</h1><p>上传</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">sftp&gt; put <span class="hljs-string">&quot;本地绝对路径&quot;</span> linux绝对路径<br></code></pre></td></tr></table></figure><p>下载</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">get <span class="hljs-string">&quot;本地绝对路径&quot;</span> linux绝对路径<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链接Linux&quot;&gt;&lt;a href=&quot;#链接Linux&quot; class=&quot;headerlink&quot; title=&quot;链接Linux&quot;&gt;&lt;/a&gt;链接Linux&lt;/h1&gt;&lt;p&gt;ssh 用户名@ip地址&lt;/p&gt;
&lt;p&gt;输入密码&lt;/p&gt;
&lt;h1 id=&quot;sftp传输文件&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="快速安装" scheme="https://hybpjx.cn/categories/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    
    
  </entry>
  
  <entry>
    <title>Window Server 激活流程</title>
    <link href="https://hybpjx.cn/2025/01/08/Window-Server-%E6%BF%80%E6%B4%BB%E6%B5%81%E7%A8%8B/"/>
    <id>https://hybpjx.cn/2025/01/08/Window-Server-%E6%BF%80%E6%B4%BB%E6%B5%81%E7%A8%8B/</id>
    <published>2025-01-08T15:14:19.000Z</published>
    <updated>2025-10-09T06:53:12.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-server-激活流程"><a href="#Window-server-激活流程" class="headerlink" title="Window server 激活流程"></a>Window server 激活流程</h1><h1 id="页面窗口激活"><a href="#页面窗口激活" class="headerlink" title="页面窗口激活"></a>页面窗口激活</h1><p>即正常激活 </p><ol><li>断网离线</li><li>输入激活码</li><li>联网</li><li>激活成功</li></ol><h1 id="命令行激活"><a href="#命令行激活" class="headerlink" title="命令行激活"></a>命令行激活</h1><p>输入命令</p><p>1、右键开始按钮，在快捷菜单点击命令提示符(管理员)，或者Windows PowerShell(管理员)；</p><p>2、卸载产品密钥命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slmgr.vbs /upk<br></code></pre></td></tr></table></figure><p>按回车确定，卸载之前的密钥，弹出窗口显示“成功地卸载了产品密钥”；【如果提示找不到密钥，不用管，直接跳到下一步】</p><p>3.安装产品密钥命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slmgr /ipk xxxxxxxxx<br></code></pre></td></tr></table></figure><p>按回车执行，弹出窗口显示“成功地安装了产品密钥”。这个密钥是企业系统用户密钥，家庭版或者专业版请百度搜索；</p><p>4.设置KMS服务器命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">slmgr /skms zh.us.to<br></code></pre></td></tr></table></figure><h1 id="报错-0xC004F069"><a href="#报错-0xC004F069" class="headerlink" title="报错 0xC004F069"></a>报错 0xC004F069</h1><p>如果是评估版本，则需要先把评估版本升级为正式版本，才能正确的使用。</p><p>1、右键开始按钮，在快捷菜单点击命令提示符(管理员)，或者Windows PowerShell(管理员)；</p><p>2、输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">DISM /online /Get-CurrentEdition<br><br>DISM /online /Set-Edition:这一步输入上层需要的当前版本 /ProductKey:XXXXX-XXXXX-XXXXX-XXXXX-XXXXX /AcceptEula<br></code></pre></td></tr></table></figure><p>正常应该是如下流程</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">开始升级组件…<br>开始安装产品密钥…<br>产品密钥安装已完成。<br><br>正在删除程序包 Microsoft-Windows-ServerDatacenterEvalEdition31bf3856ad364e35amd64~~<span class="hljs-number">10.0</span><span class="hljs-number">.14393</span><span class="hljs-number">.0</span><br><span class="hljs-string">[100.0%]</span><br>组件升级已完成。<br></code></pre></td></tr></table></figure><p>如果这一步依然不行</p><p>访问如下链接<a href="https://massgrave.dev/">Microsoft Activation Scripts (MAS) | MAS</a></p><ol><li>打开 PowerShell（不是 CMD）。为此，请右键单击 Windows 开始菜单并选择 PowerShell 或终端。</li><li>复制并粘贴下面的代码，然后按 Enter 键</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">irm https://get.activated.win | iex<br></code></pre></td></tr></table></figure><p>选择6 改变版本 </p><p>如下图即成功</p><p><img src="https://s2.loli.net/2025/01/08/MhiwU1Gxrz6WfAj.png"></p><p>后面完成即正常激活即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Window-server-激活流程&quot;&gt;&lt;a href=&quot;#Window-server-激活流程&quot; class=&quot;headerlink&quot; title=&quot;Window server 激活流程&quot;&gt;&lt;/a&gt;Window server 激活流程&lt;/h1&gt;&lt;h1 id=&quot;页</summary>
      
    
    
    
    <category term="杂记" scheme="https://hybpjx.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>h5st 5.0逆向分析流程</title>
    <link href="https://hybpjx.cn/2025/01/01/%E6%9F%90%E4%B8%9Ch5st5.0%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>https://hybpjx.cn/2025/01/01/%E6%9F%90%E4%B8%9Ch5st5.0%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/</id>
    <published>2025-01-01T03:48:00.000Z</published>
    <updated>2025-10-09T07:09:36.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标网站"><a href="#目标网站" class="headerlink" title="目标网站"></a>目标网站</h1><blockquote><p>aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAwNzcxODA5MTAuaHRtbA&#x3D;&#x3D;</p></blockquote><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><p>直接搜索ParamsSign 找到这个融合接口的地方</p><p><img src="https://s2.loli.net/2024/12/24/P2dzYbXTEcihjDs.png"></p><p>后续直接搜索这个Psign即可</p><p>这里有很多 可以每个都打上断点。也可以根据搜索自己的接口传参打断点。</p><p>这里可以发现 得到的值应该就是新版的h5st的值。</p><p><img src="https://s2.loli.net/2024/12/24/Uw216GDQZrim4Yq.png"></p><p><del>这里直接反推另辟蹊径 去把这个new ParamsSign给补了。</del></p><p><del>然后给他全扣出来，伪造出来 放到浏览器执行就行了。</del></p><blockquote><p> 这里新版直接扣这个ParamsSign 返回的是null。</p><p>看了下接口校验。校验强的接口，已经改成了最新版，弱的接口仍然还是这个ParamsSign.</p></blockquote><p>如下图所示位置</p><p>可以看到 new 三个实例都可以，分别是ParamsSign、ParamsSignLite、ParamsSignMain</p><p><img src="https://s2.loli.net/2024/12/24/Yp9VyIxOCPbcWin.png"></p><p>这里分别声明，可以发现第一个走的是老的逻辑，第二个返回的是未定义。第三个是一套新的流程。</p><p>这里总结下：</p><ul><li><p>强校验接口的老逻辑代码后续依然会走到新的流程里。</p></li><li><p>弱校验接口会走老流程。估计5.0 最近会改。</p></li></ul><p>这里不管了。直接全部封装好。只不过调用逻辑 改成新的流程。</p><p>改了下 然后跑下发现可以。对比了下长度也是一样的。</p><p><img src="https://s2.loli.net/2024/12/24/14UTQAuRjodzEJn.png"></p><h1 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h1><p>这里我们先补环境吧。先把node伪造出来</p><p>复制上文到node中。</p><p>这里原型挺多的，直接用v-jstools一把梭</p><p><img src="https://s2.loli.net/2024/12/24/D9nX3C8lI2ircuV.png"></p><p>补完然后会报一个 ：  Cannot set property Symbol(Symbol.toStringTag) of #<Object> which has only a getter</p><p>直接给他改了 或者把他重新定义一下</p><p>如下 声明下面添加下列代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(_$MF, <span class="hljs-title function_">_$B4</span>(<span class="hljs-title class_">Et</span>(<span class="hljs-number">0xd7</span>)), &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>然后跑出来应该就有值了</p><p>但是看了下长度  明显对不上。</p><p><img src="https://s2.loli.net/2024/12/24/Gck6KtVaHJDx8fg.png"></p><p>这里就看源码吧。看看是什么没补的。</p><p>这里生成处如下：</p><p><img src="https://s2.loli.net/2024/12/24/3ZryfpYIn8RcqK1.png"></p><p>这个 <strong>_$ms</strong> 是一个switch流。暂时先不管。看看传参。</p><p><strong>浏览器：</strong></p><p><img src="https://s2.loli.net/2024/12/24/VeLwyFXjpHGu3on.png"></p><p><strong>Node：</strong></p><p><img src="https://s2.loli.net/2024/12/24/HlP4hy2aVtLEGFC.png"></p><p>这里发现 传参的这个$clt() 长度对不上。</p><p>这里发现**_$clt()** 也是个swtich流。</p><p><img src="https://s2.loli.net/2024/12/24/gaCLu4HctneMXJm.png"></p><p>那这里我们挨个看吧。</p><h2 id="clt"><a href="#clt" class="headerlink" title="_$clt()"></a>_$clt()</h2><p>这里直接插装吧。</p><p>然后发现这里。collect envCollect 应该就是收集环境值的地方。</p><p><img src="https://s2.loli.net/2024/12/24/9HFKAZlde6Xcki4.png"></p><p>那这里我们再看下node</p><p><img src="https://s2.loli.net/2024/12/24/LhDZqyQevkrnaVW.png"></p><p>这里挨个对比啊 然后修改即可。</p><p>全部修改完毕。然后发现 长度终于一致了。</p><p><img src="https://s2.loli.net/2024/12/24/teKHdi2lY6Co5PS.png"></p><p>然后全部封装请求。</p><p>发现 请求出来 依然是403.</p><p><img src="https://s2.loli.net/2024/12/24/FwBIyZc4DTxEd9r.png"></p><p>虽然长度对了。但是请求好像依然有问题。</p><p>刚刚只看了传参的值没看生成函数的switch流。那这里继续回去看看。</p><h2 id="ms"><a href="#ms" class="headerlink" title="_$ms"></a><strong>_$ms</strong></h2><p>我们插装看看值。</p><p><img src="https://s2.loli.net/2024/12/24/MI38kdg21Pt6ESx.png"></p><p>这段代码还是挺简单的。</p><p>同比，我们对比node中的插装值。</p><p><img src="https://s2.loli.net/2024/12/24/zGZgXIoRLkia1wN.png"></p><p><img src="https://s2.loli.net/2024/12/24/F6pb4hziV9DJM7K.png"></p><p>这里发现 好像node中的是tk04，浏览器中的是 tk03。这个的差别是什么 大家应该都知道。</p><p>这里需要请求request_algo。把tk 还有一些东西 替换 一下再请求看看。</p><p>这里还要看下这个逻辑是从哪进的. 把这个sign也插一波</p><p>执行出来的顺序是[0,5,6,1,2,3] 所以我们去看这个this._$rds();</p><p>后面看到 rds 做了一些检测 逻辑因此走的tk04，这里可以选择直接修改上层。</p><blockquote><p> 后面修改完了之后依然是403 即使抓包直接使用都不行，测试下来原来是tls…  修改下就可以了</p></blockquote><p>最后修改变成tk03就可以用了 </p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://s2.loli.net/2024/12/24/Zdh9H5LebQ8GT6W.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目标网站&quot;&gt;&lt;a href=&quot;#目标网站&quot; class=&quot;headerlink&quot; title=&quot;目标网站&quot;&gt;&lt;/a&gt;目标网站&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAwNzcxODA5MTAuaHRtb</summary>
      
    
    
    
    <category term="JS逆向" scheme="https://hybpjx.cn/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://hybpjx.cn/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Xposed API使用大全</title>
    <link href="https://hybpjx.cn/2024/12/08/Xposed-API%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
    <id>https://hybpjx.cn/2024/12/08/Xposed-API%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/</id>
    <published>2024-12-08T14:49:00.000Z</published>
    <updated>2025-10-09T06:51:43.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xposed常用HOOK方法"><a href="#Xposed常用HOOK方法" class="headerlink" title="Xposed常用HOOK方法"></a>Xposed常用HOOK方法</h1><p>不讲废话</p><h1 id="hook修改静态方法"><a href="#hook修改静态方法" class="headerlink" title="hook修改静态方法"></a>hook修改静态方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.setBooleanField(<span class="hljs-string">&quot;对象&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-literal">false</span>);<br>XposedHelpers.setIntField(<span class="hljs-string">&quot;对象&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-number">1</span>);<br>XposedHelpers.setObjectField(<span class="hljs-string">&quot;对象&quot;</span>, <span class="hljs-string">&quot;名称&quot;</span>, <span class="hljs-string">&quot;值&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="hook-构造函数"><a href="#hook-构造函数" class="headerlink" title="hook 构造函数"></a>hook 构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookConstructor(clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>   &#125;<br>&#125;);<br>XposedHelpers.findAndHookConstructor(clazz, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="hook-普通方法"><a href="#hook-普通方法" class="headerlink" title="hook 普通方法"></a>hook 普通方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="hook-复杂函数"><a href="#hook-复杂函数" class="headerlink" title="hook 复杂函数"></a>hook 复杂函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>,<br>        String[][].class,<br>        String.class,<br>        Map.class,<br>        ArrayList.class,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到类名方法</span><br> <br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>,<br>        <span class="hljs-string">&quot;[[Ljava.lang.String&quot;</span>,<br>        <span class="hljs-string">&quot;java.lang.String&quot;</span>,<br>        Class.forName(<span class="hljs-string">&quot;java.utils.Map&quot;</span>),<br>        Class.forName(<span class="hljs-string">&quot;java.util.ArrayList&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="hook-自定义类参数"><a href="#hook-自定义类参数" class="headerlink" title="hook 自定义类参数"></a>hook 自定义类参数</h1><p>获取类的方式</p><blockquote><ol><li>类名.class  </li><li>对象.getClass()  </li><li>class.forName()  </li><li>xposedHelpers.findClass(“”,””)</li><li>new DexClassLoader(“”,””,””,””).loadClass() .&#x2F;&#x2F; 加载类 用于脱壳加固</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类名.class  对象.getClass()  class.forName()  xposedHelpers.findClass(&quot;&quot;,&quot;&quot;)</span><br>Class&lt;?&gt; JiaZaiClazz = lpparam.classLoader.loadClass(<span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span>);<br>Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <br>        <span class="hljs-string">&quot;[[Ljava.lang.String&quot;</span>,<br>        <span class="hljs-string">&quot;java.lang.String&quot;</span>,<br>        JiaZaiClazz,<span class="hljs-comment">// 加载的自定义类</span><br>        Class.forName(<span class="hljs-string">&quot;java.utils.Map&quot;</span>),<br>        Class.forName(<span class="hljs-string">&quot;java.util.ArrayList&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><p>或者用上面的前四种的方法。</p><p>简单示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; JiaZaiClazz = Class.forName(<span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span>, <span class="hljs-comment">// 路径类名</span><br>                                     <span class="hljs-literal">false</span>,<span class="hljs-comment">// 是否初始化，一般都是false</span><br>                                     lpparam.classLoader<span class="hljs-comment">// 这个意思是用哪个加载器加载这个类</span><br>                                    );<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; JiaZaiClazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span>,<span class="hljs-string">&quot;lpparam.classLoader&quot;</span>);<br></code></pre></td></tr></table></figure><p>还有一种特殊的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;xxxx.xxx.xxx.类名&quot;</span> <span class="hljs-comment">// 直接输入即可</span><br></code></pre></td></tr></table></figure><h1 id="hook-替换函数"><a href="#hook-替换函数" class="headerlink" title="hook 替换函数"></a>hook 替换函数</h1><p>即改掉整个函数，不在提前或者之后hook</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;替换的函数输出&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="hook内部类"><a href="#hook内部类" class="headerlink" title="hook内部类"></a>hook内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.xxx.类名$内部类名&quot;</span>, lpparam.classLoader),<br>                <span class="hljs-string">&quot;内部类的方法名&quot;</span>,<br>                String.class,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                    &#125;<br>                &#125;<br>        );<br></code></pre></td></tr></table></figure><h1 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(XposedHelpers.findClass(<span class="hljs-string">&quot;xxx.xxx.xxx.类名$内部类名&quot;</span>, lpparam.classLoader),<br>        <span class="hljs-string">&quot;内部类的方法名&quot;</span>,<br>        String.class,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                XposedHelpers.callMethod(clazz.newInstance(),<span class="hljs-string">&quot;具体方法&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="打印堆栈"><a href="#打印堆栈" class="headerlink" title="打印堆栈"></a>打印堆栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">log.e(<span class="hljs-string">&quot;标签&quot;</span>,<span class="hljs-string">&quot;打印的数据&quot;</span>,,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;打印的堆栈&quot;</span>));<br></code></pre></td></tr></table></figure><h1 id="Java-反射大法"><a href="#Java-反射大法" class="headerlink" title="Java 反射大法"></a>Java 反射大法</h1><h2 id="反射调用方法"><a href="#反射调用方法" class="headerlink" title="反射调用方法"></a>反射调用方法</h2><blockquote><ol><li>找到类</li><li>找到字段和方法</li><li>修改字段或者调用方法</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>,<span class="hljs-literal">false</span>,ClassLoader);<br>Class.forName(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>)<br>类名.class<br>对象.getClass()<br>Xposed中的findClass<br>classLoader中的LoadClass<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>  lpparam.classLoader.loadClass(<span class="hljs-string">&quot;&quot;</span>);<br><br>XposedHelpers.findClass(<span class="hljs-string">&quot;&quot;</span>,lpparam.classLoader);<br>clazz.getClass();<br>String.class;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> lpparam.classLoader.loadClass(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">DemoClazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;xxx.xxx.xxx&quot;</span>);<br><span class="hljs-comment">// DemoClazz.getMethod(&quot;&quot;);</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">DeclareMethodName</span> <span class="hljs-operator">=</span> DemoClazz.getDeclaredMethod(<span class="hljs-string">&quot;方法名称&quot;</span>);<br>DeclareMethodName.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 给权限</span><br>DeclareMethodName.invoke(clazz.newInstance());<br></code></pre></td></tr></table></figure><h2 id="反射调用属性"><a href="#反射调用属性" class="headerlink" title="反射调用属性"></a>反射调用属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Class</span> clazz = lpparam.<span class="hljs-property">classLoader</span>.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-title class_">Class</span> <span class="hljs-title class_">DemoClazz</span> = <span class="hljs-title class_">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;xxx.xxx.xxx&quot;</span>);<br><span class="hljs-comment">// 获取</span><br><span class="hljs-title class_">Field</span> <span class="hljs-title class_">DeclaredFieldName</span> = <span class="hljs-title class_">DemoClazz</span>.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;对象&quot;</span>);<br><br><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">getType</span>();<span class="hljs-comment">// 获取字段类型</span><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">getName</span>(); <span class="hljs-comment">// 获取字段名称</span><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">getModifiers</span>();<span class="hljs-comment">// 获取访问修饰符</span><br><br><br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 给权限</span><br><span class="hljs-title class_">Object</span> insClass = clazz.<span class="hljs-title function_">newInstance</span>();<br><span class="hljs-title class_">Object</span> <span class="hljs-variable constant_">GD</span> = <span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">get</span>(insClass);<br><span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-string">&quot;取值 MSG:&quot;</span> + (<span class="hljs-title class_">String</span>) <span class="hljs-variable constant_">GD</span>);<br><span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">set</span>(insClass, <span class="hljs-string">&quot;值&quot;</span>);<br><span class="hljs-title class_">Object</span> <span class="hljs-variable constant_">SD</span> = <span class="hljs-title class_">DeclaredFieldName</span>.<span class="hljs-title function_">get</span>(insClass);<br><span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-string">&quot;设置 MSG:&quot;</span> + (<span class="hljs-title class_">String</span>) <span class="hljs-variable constant_">SD</span>);<br></code></pre></td></tr></table></figure><h2 id="遍历所有的方法和字段"><a href="#遍历所有的方法和字段" class="headerlink" title="遍历所有的方法和字段"></a>遍历所有的方法和字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!lpparam.processName.equals(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>))<span class="hljs-keyword">return</span>;<br>    Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">&quot;com.xiaojianbang.XposedDemo.demo&quot;</span>, lpparam.classLoader);<br>    Method[] md = clazz.getDeclaredMethods(); <span class="hljs-comment">// 获取方法</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i &lt; md.length;i++)&#123;<br>        Log.d(<span class="hljs-string">&quot;遍历&quot;</span>,md[i].toString());<br>    &#125;<br><br>    Field[] fd = clazz.getDeclaredFields(); <span class="hljs-comment">// 获取字段</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i &lt; fd.length;i++)&#123;<br>        Log.d(<span class="hljs-string">&quot;遍历&quot;</span>,fd[i].toString());<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="遍历所有内部类"><a href="#遍历所有内部类" class="headerlink" title="遍历所有内部类"></a>遍历所有内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">clazz.getDeclaredClasses();  <span class="hljs-comment">// 遍历所有类</span><br>clazz.getDeclaredConstructors();<span class="hljs-comment">// 遍历所有构造函数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;[] cls = clazz.getDeclaredClasses();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cls.length; i++) &#123;<br>      Log.d(TAG, <span class="hljs-string">&quot;正在遍历内部类&quot;</span>);<br>      Method[] innerMDs = clazz.getDeclaredMethods(); <span class="hljs-comment">// 获取方法</span><br>      <span class="hljs-keyword">for</span> (Method innerMD : innerMDs) &#123;<br>          Log.d(<span class="hljs-string">&quot;遍历&quot;</span>, innerMD.toString());<br>      &#125;<br><br>      Field[] innerFDs = clazz.getDeclaredFields(); <span class="hljs-comment">// 获取字段</span><br>      <span class="hljs-keyword">for</span> (Field innerFD : innerFDs) &#123;<br>          Log.d(<span class="hljs-string">&quot;遍历&quot;</span>, innerFD.toString());<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="遍历所有类"><a href="#遍历所有类" class="headerlink" title="遍历所有类"></a>遍历所有类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>ClassLoader.class,<br><span class="hljs-string">&quot;com.xxx.xx&quot;</span>,<br>String.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>      Log.d(TAG, <span class="hljs-string">&quot;loadClass&quot;</span> + clazz.getName());<br><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="hook所有类中的所有方法"><a href="#hook所有类中的所有方法" class="headerlink" title="hook所有类中的所有方法"></a>hook所有类中的所有方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.hookAllConstructors(); <span class="hljs-comment">// hook所有构造函数</span><br>XposedBridge.hookAllMethods(); <span class="hljs-comment">// hook单个类所有函数</span><br>XposedBridge.hookMethod(); <span class="hljs-comment">// hook 所有函数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>ClassLoader.class,<br><span class="hljs-string">&quot;com.xxx.xx&quot;</span>,<br>String.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();<br><br>    Log.d(TAG, <span class="hljs-string">&quot;loadClass&quot;</span> + clazz.getName());<br>    <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;xxx&quot;</span>)) &#123;<br>        <span class="hljs-keyword">for</span> (Method md : clazz.getDeclaredMethods()) &#123;<br>            XposedBridge.hookMethod(md, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                    <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                    Log.d(TAG, <span class="hljs-string">&quot;Hook_Method：&quot;</span> + md.toString());<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>得到了一个方法 如何判断呢？</p><blockquote><p>for (Method md : clazz.getDeclaredMethods()) </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>ClassLoader.class,<br><span class="hljs-string">&quot;com.xxx.xx&quot;</span>,<br>String.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();<br><br>        Log.d(TAG, <span class="hljs-string">&quot;loadClass&quot;</span> + clazz.getName());<br>        <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;xxx&quot;</span>)) &#123;<br>            <span class="hljs-keyword">for</span> (Method md : clazz.getDeclaredMethods()) &#123;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> md.getModifiers();<br>                <span class="hljs-keyword">if</span> (!Modifier.isAbstract(mod)  <span class="hljs-comment">// 是不是一个抽象类 判断</span><br>                        &amp;&amp; !Modifier.isNative(mod)  <span class="hljs-comment">// 是不是一个Native方法 判断</span><br>                        &amp;&amp; !Modifier.isInterface(mod)) <span class="hljs-comment">// 是不是一个Interface接口</span><br>                &#123;<br>                    XposedBridge.hookMethod(md, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                            Log.d(TAG, <span class="hljs-string">&quot;Hook_Method：&quot;</span> + md.toString());<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (md.getName().contains(<span class="hljs-string">&quot;xxxx&quot;</span>)) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; param.args.length; i++) &#123;<br>        Log.d(TAG, param.args[i].getClass().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自吐算法模块开发"><a href="#自吐算法模块开发" class="headerlink" title="自吐算法模块开发"></a>自吐算法模块开发</h1><p>私人仓库： <a href="https://github.com/hybpjx/HookEncryptXposed">https://github.com/hybpjx/HookEncryptXposed</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hybpjx.hookencrypt;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.PublicKey;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.Mac;<br><br><span class="hljs-keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XC_MethodHook;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XposedBridge;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XposedHelpers;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hook_Encrypt&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;Hooking...&quot;</span>);<br><br>        <span class="hljs-comment">// hook md5 Sha 的 digest方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.MessageDigest&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;digest&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> (MessageDigest) param.thisObject; <span class="hljs-comment">// 得到对象</span><br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> md.getAlgorithm(); <span class="hljs-comment">// 获取加密名</span><br>                            <span class="hljs-keyword">if</span> (param.args.length &gt;= <span class="hljs-number">1</span>) &#123;<br>                                <span class="hljs-type">byte</span>[] params = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(params);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">dataHex</span> <span class="hljs-operator">=</span> byteArray2HexString(params);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + data);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + dataHex);<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] res = (<span class="hljs-type">byte</span>[]) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultHex: &quot;</span> + resHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultBase64: &quot;</span> + resBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// hook md5的 update方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.MessageDigest&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;update&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> (MessageDigest) param.thisObject;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> md.getAlgorithm();<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">byte</span>[] params = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">3</span>) &#123;<br>                                offset = <span class="hljs-number">0</span>;<br>                                len = params.length;<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                                len = (Integer) param.args[<span class="hljs-number">2</span>];<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] input = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>                            System.arraycopy(params, offset, input, <span class="hljs-number">0</span>, len);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(input);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">dataHex</span> <span class="hljs-operator">=</span> byteArray2HexString(input);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; update data: &quot;</span> + data);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; update dataHex: &quot;</span> + dataHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;MessageDigest.update Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook mac算法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.Mac&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;doFinal&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-comment">// 获取返回值 要 after, 传参要before</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br>                            <span class="hljs-type">Mac</span> <span class="hljs-variable">mac</span> <span class="hljs-operator">=</span> (Mac) param.thisObject;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> mac.getAlgorithm();<br>                            <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">1</span>) &#123;<br>                                <span class="hljs-type">byte</span>[] params = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(params);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">dataHex</span> <span class="hljs-operator">=</span> byteArray2HexString(params);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + data);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + dataHex);<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] res = (<span class="hljs-type">byte</span>[]) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultHex: &quot;</span> + resHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultBase64: &quot;</span> + resBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;crypto.Mac.doFinal Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook 密钥 可以是 DES，3Des，Aes,Mac算法</span><br>        <span class="hljs-comment">// 构造函数 SecretKeySpec 这个方法   https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/index.html?index-filesindex-4.html</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.SecretKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] secretkey = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">2</span>) &#123;<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                                size = (Integer) param.args[<span class="hljs-number">2</span>];<br>                                algoritm = (String) param.args[<span class="hljs-number">3</span>];<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                size = secretkey.length;<br>                                algoritm = (String) param.args[<span class="hljs-number">1</span>];<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] keybyte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>                            System.arraycopy(secretkey, offset, keybyte, <span class="hljs-number">0</span>, size);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyHex</span> <span class="hljs-operator">=</span> byteArray2HexString(keybyte);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(keybyte, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; SecretKey: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(keybyte));<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; SecretKeyHex: &quot;</span> + keyHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; SecretKeyBase64: \n&quot;</span> + keyBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;SecretKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook des的 密钥 https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/index.html?index-filesindex-4.html</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.DESKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] desKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>                            <span class="hljs-type">byte</span>[] deskeybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">1</span>)<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                            System.arraycopy(deskeybyte, offset, desKey, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyHex</span> <span class="hljs-operator">=</span> byteArray2HexString(desKey);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keyBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(desKey, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;DESKey: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(desKey));<br>                            Log.d(TAG, <span class="hljs-string">&quot;DESKeyHex: &quot;</span> + keyHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;DESKeyBase64: \n&quot;</span> + keyBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;DESKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook IV向量 AES DES 3DES, Java 加密体系中的一个类，用于提供初始化向量（IV），主要应用于对称加密算法中的分组加密模式，如 CBC、CFB、OFB 等</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.IvParameterSpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] ivbyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">1</span>) &#123;<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                                size = (Integer) param.args[<span class="hljs-number">2</span>];<br>                            &#125; <span class="hljs-keyword">else</span> size = ivbyte.length;<br>                            <span class="hljs-type">byte</span>[] iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>                            System.arraycopy(ivbyte, offset, iv, <span class="hljs-number">0</span>, size);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">IVHex</span> <span class="hljs-operator">=</span> byteArray2HexString(iv);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">IVBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(iv, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;IvParameter: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(iv));<br>                            Log.d(TAG, <span class="hljs-string">&quot;IvParameterHex: &quot;</span> + IVHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;IvParameterBase64: \n&quot;</span> + IVBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;IvParameterSpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook Cipher(RSA,DES,3DES,AES)  https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/index.html?index-filesindex-4.html</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.Cipher&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;doFinal&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-comment">// 只hook了 返回值非int的</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">0</span> &amp;&amp; param.args.length != <span class="hljs-number">1</span> &amp;&amp; param.args.length != <span class="hljs-number">3</span>)<br>                                <span class="hljs-keyword">return</span>;<br>                            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> (Cipher) param.thisObject;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">algoritm</span> <span class="hljs-operator">=</span> cipher.getAlgorithm(); <span class="hljs-comment">// 返回算法名称</span><br>                            <span class="hljs-type">byte</span>[] dataAll = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">3</span>) &#123;<br>                                <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (Integer) param.args[<span class="hljs-number">1</span>];<br>                                <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> (Integer) param.args[<span class="hljs-number">2</span>];<br>                                <span class="hljs-type">byte</span>[] dataByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>                                System.arraycopy(dataAll, offset, dataByte, <span class="hljs-number">0</span>, size);<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dataByte));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + byteArray2HexString(dataByte));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataBase64: \n&quot;</span> + Base64.encodeToString(dataByte, <span class="hljs-number">0</span>));<br>                            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (param.args.length == <span class="hljs-number">1</span>) &#123;<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; data: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dataAll));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataHex: &quot;</span> + byteArray2HexString(dataAll));<br>                                Log.d(TAG, algoritm + <span class="hljs-string">&quot; dataBase64: \n&quot;</span> + Base64.encodeToString(dataAll, <span class="hljs-number">0</span>));<br>                            &#125;<br>                            <span class="hljs-type">byte</span>[] res = (<span class="hljs-type">byte</span>[]) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultHex: &quot;</span> + resHex);<br>                            Log.d(TAG, algoritm + <span class="hljs-string">&quot; resultBase64: \n&quot;</span> + resBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;crypto.Cipher.doFinal Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// Hook 3Des 算法 除了密钥 其他都一样 </span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;javax.crypto.spec.DESedeKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] keybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">if</span> (param.args.length != <span class="hljs-number">1</span>)<br>                                offset = (Integer) param.args[<span class="hljs-number">1</span>];<br>                            <span class="hljs-type">byte</span>[] desedeKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">24</span>];<br>                            System.arraycopy(keybyte, offset, desedeKey, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">desedeKeyHex</span> <span class="hljs-operator">=</span> byteArray2HexString(desedeKey);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">desedeKeyBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(desedeKey, <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;3DESKey: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(desedeKey));<br>                            Log.d(TAG, <span class="hljs-string">&quot;3DESKeyHex: &quot;</span> + desedeKeyHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;3DESKeyBase64: \n&quot;</span> + desedeKeyBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;DESedeKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook RSA的Base64密钥</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.X509EncodedKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] keybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(keybyte, <span class="hljs-number">0</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteHex</span> <span class="hljs-operator">=</span> byteArray2HexString(keybyte);<br>                            Log.d(TAG, <span class="hljs-string">&quot;X509KeyHex: &quot;</span> + keybyteHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;X509KeyBase64: \n&quot;</span> + keybyteBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;X509EncodedKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>        <span class="hljs-comment">// hook RSA 16进制的密钥</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.PKCS8EncodedKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">byte</span>[] keybyte = (<span class="hljs-type">byte</span>[]) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(keybyte, <span class="hljs-number">0</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">keybyteHex</span> <span class="hljs-operator">=</span> byteArray2HexString(keybyte);<br>                            Log.d(TAG, <span class="hljs-string">&quot;PKCS8KeyHex: &quot;</span> + keybyteHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;PKCS8KeyBase64: \n&quot;</span> + keybyteBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;PKCS8EncodedKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook生成生成公钥对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllMethods(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.KeyFactory&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-string">&quot;generatePublic&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack Dump&quot;</span>));<br>                            <span class="hljs-type">PublicKey</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> (PublicKey) param.getResult();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">resHex</span> <span class="hljs-operator">=</span> byteArray2HexString(res.getEncoded());<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">ResBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(res.getEncoded(), <span class="hljs-number">0</span>);<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAKey Result:&quot;</span> + res);<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAKey ResultHex:&quot;</span> + resHex);<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAKey ResultBase64:&quot;</span> + ResBase64);<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;KeyFactory Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// hook RSA 16进制的密钥</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.RSAPublicKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">1</span>];<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPublicKey N : &quot;</span> + N.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPublicKey E : &quot;</span> + E.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;RSAPublicKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            XposedBridge.hookAllConstructors(XposedHelpers.findClass(<span class="hljs-string">&quot;java.security.spec.RSAPrivateKeySpec&quot;</span>, lpparam.classLoader),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                            Log.e(TAG, <span class="hljs-string">&quot;Stack:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>(<span class="hljs-string">&quot;stack dump&quot;</span>));<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">0</span>];<br>                            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">D</span> <span class="hljs-operator">=</span> (BigInteger) param.args[<span class="hljs-number">1</span>];<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPrivateKey N : &quot;</span> + N.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;RSAPrivateKey D : &quot;</span> + D.toString(<span class="hljs-number">16</span>));<br>                            Log.d(TAG, <span class="hljs-string">&quot;=======================================================================&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;RSAPrivateKeySpec Error: &quot;</span> + e.getMessage());<br>        &#125;<br><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byteArray2HexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-type">char</span>[] HEX = &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[bytes.length * <span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> ele : bytes) &#123;<br>            str[j++] = HEX[(ele &amp; <span class="hljs-number">0xF0</span>) &gt;&gt;&gt; <span class="hljs-number">4</span>]; <span class="hljs-comment">//无符号左移</span><br>            str[j++] = HEX[(ele &amp; <span class="hljs-number">0x0F</span>)];<br>        &#125;<br>        <span class="hljs-keyword">return</span> String.valueOf(str);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Xposed常用HOOK方法&quot;&gt;&lt;a href=&quot;#Xposed常用HOOK方法&quot; class=&quot;headerlink&quot; title=&quot;Xposed常用HOOK方法&quot;&gt;&lt;/a&gt;Xposed常用HOOK方法&lt;/h1&gt;&lt;p&gt;不讲废话&lt;/p&gt;
&lt;h1 id=&quot;hook修</summary>
      
    
    
    
    <category term="安卓逆向" scheme="https://hybpjx.cn/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    
    <category term="Android" scheme="https://hybpjx.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Scrapyd简易食用教程</title>
    <link href="https://hybpjx.cn/2024/12/02/Scrapyd%E7%AE%80%E6%98%93%E9%A3%9F%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://hybpjx.cn/2024/12/02/Scrapyd%E7%AE%80%E6%98%93%E9%A3%9F%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2024-12-02T03:07:00.000Z</published>
    <updated>2025-10-09T06:51:36.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapyd安装"><a href="#Scrapyd安装" class="headerlink" title="Scrapyd安装:"></a>Scrapyd安装:</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#服务端</span><br>pip install scrapyd  <br><span class="hljs-comment">#客户端</span><br>pip install scrapyd-client<br></code></pre></td></tr></table></figure><p>打开命令行，输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scrapyd</span><br></code></pre></td></tr></table></figure><p>访问 127.0.0.1:6800 即可看到web界面</p><h1 id="部署scrapy项目"><a href="#部署scrapy项目" class="headerlink" title="部署scrapy项目"></a>部署scrapy项目</h1><p>在scrapy项目目录下，有一个scrapy.cfg的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Automatically created by: scrapy startproject</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information about the [deploy] section see:</span><br><span class="hljs-comment"># https://scrapyd.readthedocs.io/en/latest/deploy.html</span><br><br>[settings]<br>default = xxx.settings<br><br>[deploy:<span class="hljs-built_in">test</span>]<br>url = http://localhost:6800/<br>project = xxx<br></code></pre></td></tr></table></figure><p>test——项目名 （随便）</p><p>project 工程名 （你创建 项目时使用的名字）</p><h2 id="windows环境下配置："><a href="#windows环境下配置：" class="headerlink" title="windows环境下配置："></a>windows环境下配置：</h2><p>到python虚拟环境下找到 Scripts&#x2F;scrapyd-deploy</p><p>新建scrapyd-deploy.bat</p><p>这里路径需要自己修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;E:\python_venv\envTest\Scripts\python.exe&quot; &quot;E:\python_venv\envTest\Scripts\scrapyd-deploy&quot; %1 %2 %3 %4 %5 %6 %7 %8 %9<br></code></pre></td></tr></table></figure><p>然后，进入到我们爬虫的根目录，运行scrapyd-deploy</p><h1 id="把爬虫项目上传到服务端"><a href="#把爬虫项目上传到服务端" class="headerlink" title="把爬虫项目上传到服务端"></a>把爬虫项目上传到服务端</h1><p>准备工作：查看当前目录下的 spider</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) $ scrapy list<br>xxxx1  xxxx2<br></code></pre></td></tr></table></figure><ul><li>执行打包命令<br>  <code>scrapyd-deploy 部署名称 -p 项目名称</code><br>  如<code>scrapyd-deploy bushu -p test</code><br>  可以去网页中127.0.0.1:6800查看爬虫运行状态</li><li>停止爬虫<br>  <code>curl http://localhost:6800/cancel.json -d project=scrapy项目名称 -d job=运行ID</code> </li><li>删除scrapy项目<br>  curl <a href="http://localhost:6800/delproject.json">http://localhost:6800/delproject.json</a> -d project&#x3D;scrapy项目名称 </li><li>查看有多少个scrapy项目在api中<br>  curl <a href="http://localhost:6800/listprojects.json">http://localhost:6800/listprojects.json</a> </li><li>查看指定的scrapy项目中有多少个爬虫<br>  curl <a href="http://localhost:6800/listspiders.json?project=scrapy%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0">http://localhost:6800/listspiders.json?project=scrapy项目名称</a><br>  总结几个请求url</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs text">1、获取状态<br>http://127.0.0.1:6800/daemonstatus.json<br><br>2、获取项目列表<br>http://127.0.0.1:6800/listprojects.json<br><br>3、获取项目下已发布的爬虫列表<br>http://127.0.0.1:6800/listspiders.json?project=myproject<br><br>4、获取项目下已发布的爬虫版本列表<br>http://127.0.0.1:6800/listversions.json?project=myproject<br><br>5、获取爬虫运行状态<br>http://127.0.0.1:6800/listjobs.json?project=myproject<br><br>6、启动服务器上某一爬虫（必须是已发布到服务器的爬虫）<br>http://127.0.0.1:6800/schedule.json <br>（post方式，data=&#123;&quot;project&quot;:myproject,&quot;spider&quot;:myspider&#125;）<br><br>7、删除某一版本爬虫<br>http://127.0.0.1:6800/delversion.json<br>（post方式，data=&#123;&quot;project&quot;:myproject,&quot;version&quot;:myversion&#125;）<br><br>8、删除某一工程，包括该工程下的各版本爬虫<br>http://127.0.0.1:6800/delproject.json（post方式，data=&#123;&quot;project&quot;:myproject&#125;）<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Scrapyd安装&quot;&gt;&lt;a href=&quot;#Scrapyd安装&quot; class=&quot;headerlink&quot; title=&quot;Scrapyd安装:&quot;&gt;&lt;/a&gt;Scrapyd安装:&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://hybpjx.cn/tags/Python/"/>
    
  </entry>
  
</feed>
